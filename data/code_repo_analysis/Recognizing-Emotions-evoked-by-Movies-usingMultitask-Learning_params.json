{
    "multi_modality/st_main.py": {
        "sklearn": {
            "normalize_244": {
                "variable": {
                    "value": "cmb_features",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "cmb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((cmb_txt_vis_features, audio_features), axis=1)",
                            "Call"
                        ],
                        [
                            "normalize(cmb_features)",
                            "Call"
                        ],
                        [
                            "np.concatenate((cmb_txt_vis_features, audio_features), axis=1)",
                            "Call"
                        ],
                        [
                            "normalize(cmb_features)",
                            "Call"
                        ],
                        [
                            "np.concatenate((cmb_txt_vis_features, audio_features), axis=1)",
                            "Call"
                        ],
                        [
                            "normalize(cmb_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_148": {
                "variable": {
                    "value": "cmb_features",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "cmb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((cmb_txt_vis_features, audio_features), axis=1)",
                            "Call"
                        ],
                        [
                            "normalize(cmb_features)",
                            "Call"
                        ],
                        [
                            "np.concatenate((cmb_txt_vis_features, audio_features), axis=1)",
                            "Call"
                        ],
                        [
                            "normalize(cmb_features)",
                            "Call"
                        ],
                        [
                            "np.concatenate((cmb_txt_vis_features, audio_features), axis=1)",
                            "Call"
                        ],
                        [
                            "normalize(cmb_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_180": {
                "variable": {
                    "value": "cmb_features",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "cmb_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((cmb_txt_vis_features, audio_features), axis=1)",
                            "Call"
                        ],
                        [
                            "normalize(cmb_features)",
                            "Call"
                        ],
                        [
                            "np.concatenate((cmb_txt_vis_features, audio_features), axis=1)",
                            "Call"
                        ],
                        [
                            "normalize(cmb_features)",
                            "Call"
                        ],
                        [
                            "np.concatenate((cmb_txt_vis_features, audio_features), axis=1)",
                            "Call"
                        ],
                        [
                            "normalize(cmb_features)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "placeholder_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, params.max_words]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, params.cmb_tensor_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "xnet",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_104": {
                "variable": {
                    "value": "reg_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_110": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_210": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./save/' + 'cnn_model.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.embed_sequence(ids=x, vocab_size=VOCAB_LEN, embed_dim=EMBED_SIZE, initializer=tf.truncated_normal_initializer(), regularizer=None, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 18, EMBED_SIZE, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_69": {
                "variable": {
                    "value": "flatten_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.conv2d(conv1, [3, EMBED_SIZE], biases['bc2'])",
                            "Call"
                        ],
                        [
                            "utils.maxpool2d(conv2, k=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_84": {
                "variable": {
                    "value": "dp1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.random_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_91": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(dp1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.random_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_49": {
                "name": {
                    "value": "bc1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "name": {
                    "value": "bc2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "name": {
                    "value": "bc3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_102": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_213": {
                "checkpoint_dir": {
                    "value": "./save/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_75": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_80": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_87": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_94": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "multi_modality/utils.py": {
        "sklearn": {},
        "tensorflow": {
            "conv2d_516": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_520": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_521": {
                "features": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_526": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_634": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_662": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_690": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_718": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_746": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_774": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_802": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_831": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 128, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_602": {
                "name_or_scope": {
                    "value": "cmb_fc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_617": {
                "name_or_scope": {
                    "value": "p_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_645": {
                "name_or_scope": {
                    "value": "p_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_673": {
                "name_or_scope": {
                    "value": "p_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_701": {
                "name_or_scope": {
                    "value": "p_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_729": {
                "name_or_scope": {
                    "value": "p_5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_757": {
                "name_or_scope": {
                    "value": "p_6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_785": {
                "name_or_scope": {
                    "value": "p_7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_814": {
                "name_or_scope": {
                    "value": "p_8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_606": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_610": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_611": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_620": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_621": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_626": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_630": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_631": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_637": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_638": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_648": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_649": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_653": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_654": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_658": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_659": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_665": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_666": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_676": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_677": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_681": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_682": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_686": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_687": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_694": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_705": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_709": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_710": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_714": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_715": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_721": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_722": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_732": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_733": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_737": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_738": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_742": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_743": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_749": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_750": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_760": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_761": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_765": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_766": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_770": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_771": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_777": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_778": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_788": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_789": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_793": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_794": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_798": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_799": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_805": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_806": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_817": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_818": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_822": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_823": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_827": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_828": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_834": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_835": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "visual_modality/utils.py": {
        "sklearn": {},
        "tensorflow": {
            "flatten_470": {
                "variable": {
                    "value": "flatten_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_502": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_530": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_558": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_586": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_614": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_642": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_670": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_698": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc2, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_469": {
                "name_or_scope": {
                    "value": "cmb_fc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_485": {
                "name_or_scope": {
                    "value": "p_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_513": {
                "name_or_scope": {
                    "value": "p_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_541": {
                "name_or_scope": {
                    "value": "p_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_569": {
                "name_or_scope": {
                    "value": "p_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_597": {
                "name_or_scope": {
                    "value": "p_5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_625": {
                "name_or_scope": {
                    "value": "p_6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_653": {
                "name_or_scope": {
                    "value": "p_7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_681": {
                "name_or_scope": {
                    "value": "p_8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_473": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_478": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_488": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_493": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_494": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_498": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_499": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_505": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_516": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_521": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_522": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_526": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_527": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_533": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_544": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_549": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_550": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_554": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_561": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_572": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_577": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_582": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_589": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_590": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_600": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_601": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_605": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_606": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_610": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_611": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_617": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_618": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_628": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_629": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_633": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_634": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_638": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_639": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_645": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_646": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_656": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_657": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_661": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_662": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_666": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_667": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_673": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_674": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_684": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_685": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_689": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_690": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_694": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_695": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_701": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_702": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "multi_modality/mt_main.py": {
        "tensorflow": {
            "placeholder_41": {
                "variable": {
                    "value": "x_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, params.max_words]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "x_cmb",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2224]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "x_per",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_collection_78": {
                "variable": {
                    "value": "reg_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "xnet_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_1, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_86": {
                "variable": {
                    "value": "optimizer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_90": {
                "variable": {
                    "value": "xnet_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_2, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_94": {
                "variable": {
                    "value": "optimizer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_98": {
                "variable": {
                    "value": "xnet_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_3, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_102": {
                "variable": {
                    "value": "optimizer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_106": {
                "variable": {
                    "value": "xnet_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_4, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_110": {
                "variable": {
                    "value": "optimizer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "xnet_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_5, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_118": {
                "variable": {
                    "value": "optimizer_5",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "xnet_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_6, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_126": {
                "variable": {
                    "value": "optimizer_6",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_130": {
                "variable": {
                    "value": "xnet_7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_7, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_134": {
                "variable": {
                    "value": "optimizer_7",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "variable": {
                    "value": "xnet_8",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_8, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_142": {
                "variable": {
                    "value": "optimizer_8",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_145": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_356": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./save/' + 'cnn_model.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.embed_sequence(ids=x, vocab_size=VOCAB_LEN, embed_dim=EMBED_SIZE, initializer=tf.truncated_normal_initializer(), regularizer=None, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 18, EMBED_SIZE, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_70": {
                "variable": {
                    "value": "flatten_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.conv2d(conv1, [3, EMBED_SIZE], biases['bc2'])",
                            "Call"
                        ],
                        [
                            "utils.maxpool2d(conv2, k=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_50": {
                "name": {
                    "value": "bc1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "name": {
                    "value": "bc2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "name": {
                    "value": "bc3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_82": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_1(x_per, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_90": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_2(x_per, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_98": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_3(x_per, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_106": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_4(x_per, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_114": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_5(x_per, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_122": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_6(x_per, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_130": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_7(x_per, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_138": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_8(x_per, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_359": {
                "checkpoint_dir": {
                    "value": "./save/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "text_modality/mt_main.py": {
        "tensorflow": {
            "placeholder_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, max_words]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1200]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_98": {
                "variable": {
                    "value": "reg_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "xnet_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_1, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_107": {
                "variable": {
                    "value": "optimizer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "xnet_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_2, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_115": {
                "variable": {
                    "value": "optimizer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "xnet_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_3, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_123": {
                "variable": {
                    "value": "optimizer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_127": {
                "variable": {
                    "value": "xnet_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_4, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_131": {
                "variable": {
                    "value": "optimizer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_135": {
                "variable": {
                    "value": "xnet_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_5, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_139": {
                "variable": {
                    "value": "optimizer_5",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "variable": {
                    "value": "xnet_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_6, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_147": {
                "variable": {
                    "value": "optimizer_6",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_151": {
                "variable": {
                    "value": "xnet_7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_7, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_155": {
                "variable": {
                    "value": "optimizer_7",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_159": {
                "variable": {
                    "value": "xnet_8",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_7, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_163": {
                "variable": {
                    "value": "optimizer_8",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_166": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_381": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'.../path/to/save/the/trained/model/CNN_Model.meta'",
                            "str"
                        ]
                    ]
                }
            },
            "conv2d_63": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_67": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_54": {
                "name": {
                    "value": "bc1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_55": {
                "name": {
                    "value": "bc2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_56": {
                "name": {
                    "value": "bc3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "features": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_73": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.embed_sequence(ids=x, vocab_size=VOCAB_LEN, embed_dim=EMBED_SIZE, initializer=tf.truncated_normal_initializer(mean=0.0, stddev=1.0), regularizer=None, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 18, EMBED_SIZE, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_92": {
                "variable": {
                    "value": "flatten_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(conv1, [3, EMBED_SIZE], biases['bc2'])",
                            "Call"
                        ],
                        [
                            "maxpool2d(conv2, k=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_103": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_1(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_111": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_2(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_119": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_3(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_127": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_4(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_135": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_5(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_143": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_6(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_151": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_7(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_159": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_7(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_384": {
                "checkpoint_dir": {
                    "value": ".../path/to/save/the/trained/model/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_80": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "text_modality/st_main.py": {
        "tensorflow": {
            "placeholder_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, params.max_words]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_98": {
                "variable": {
                    "value": "xnet",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_100": {
                "variable": {
                    "value": "reg_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_106": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_210": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'.../save_models/model_no' + str(select_set) + '/' + 'cnn_model.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.embed_sequence(ids=x, vocab_size=VOCAB_LEN, embed_dim=EMBED_SIZE, initializer=tf.truncated_normal_initializer(), regularizer=None, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, max_words, EMBED_SIZE, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_76": {
                "variable": {
                    "value": "flatten_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.conv2d(conv1, [3, EMBED_SIZE], biases['bc2'])",
                            "Call"
                        ],
                        [
                            "utils.maxpool2d(conv2, k=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_88": {
                "variable": {
                    "value": "drop_out_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(flatten_layer, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_55": {
                "name": {
                    "value": "bc1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_56": {
                "name": {
                    "value": "bc2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "name": {
                    "value": "bc3",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[300]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_98": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_net(x, VOCAB_LEN, params.EMBED_SIZE, biases)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_213": {
                "checkpoint_dir": {
                    "value": ".../save_models/ + select_set + /",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "text_modality/utils.py": {
        "tensorflow": {
            "conv2d_480": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.contrib.layers.l2_regularizer(0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_484": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_485": {
                "features": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_490": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=X, filters=300, kernel_size=k_size, strides=[3, 3], padding='SAME', activation=None, kernel_regularizer=tf.contrib.layers.l2_regularizer(0.001), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(X, b)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_499": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.embed_sequence(ids=x, vocab_size=VOCAB_LEN, embed_dim=EMBED_SIZE, initializer=tf.truncated_normal_initializer(mean=0.0, stddev=1.0), regularizer=None, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 18, EMBED_SIZE, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_509": {
                "variable": {
                    "value": "flatten_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(conv1, [3, EMBED_SIZE], biases['bc2'])",
                            "Call"
                        ],
                        [
                            "maxpool2d(conv2, k=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_526": {
                "variable": {
                    "value": "drop_out_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_533": {
                "variable": {
                    "value": "drop_out_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_555": {
                "variable": {
                    "value": "drop_out_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_562": {
                "variable": {
                    "value": "drop_out_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_584": {
                "variable": {
                    "value": "drop_out_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_591": {
                "variable": {
                    "value": "drop_out_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_613": {
                "variable": {
                    "value": "drop_out_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_620": {
                "variable": {
                    "value": "drop_out_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_642": {
                "variable": {
                    "value": "drop_out_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_649": {
                "variable": {
                    "value": "drop_out_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_671": {
                "variable": {
                    "value": "drop_out_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_678": {
                "variable": {
                    "value": "drop_out_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_700": {
                "variable": {
                    "value": "drop_out_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_707": {
                "variable": {
                    "value": "drop_out_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_729": {
                "variable": {
                    "value": "drop_out_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_736": {
                "variable": {
                    "value": "drop_out_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(drop_out_1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.truncated_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_494": {
                "name_or_scope": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_514": {
                "name_or_scope": {
                    "value": "p_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_543": {
                "name_or_scope": {
                    "value": "p_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_572": {
                "name_or_scope": {
                    "value": "p_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_601": {
                "name_or_scope": {
                    "value": "p_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_630": {
                "name_or_scope": {
                    "value": "p_5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_659": {
                "name_or_scope": {
                    "value": "p_6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_688": {
                "name_or_scope": {
                    "value": "p_7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_717": {
                "name_or_scope": {
                    "value": "p_8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_497": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_517": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_522": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_529": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_536": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_537": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_546": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_547": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_551": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_552": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_558": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_565": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_566": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_575": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_576": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_580": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_581": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_587": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_588": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_594": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_595": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_604": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_609": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_610": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_616": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_617": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_623": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_624": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_633": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_634": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_638": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_639": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_645": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_646": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_652": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_653": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_662": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_663": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_667": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_668": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_674": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_675": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_681": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_682": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_691": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_692": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_696": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_697": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_703": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_710": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_711": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_720": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_721": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_725": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_726": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_732": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_733": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_739": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_740": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "visual_modality/mt_main.py": {
        "tensorflow": {
            "placeholder_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_collection_36": {
                "variable": {
                    "value": "reg_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "xnet_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_1, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_45": {
                "variable": {
                    "value": "optimizer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_49": {
                "variable": {
                    "value": "xnet_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_2, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_53": {
                "variable": {
                    "value": "optimizer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "variable": {
                    "value": "xnet_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_3, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_61": {
                "variable": {
                    "value": "optimizer_3",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_65": {
                "variable": {
                    "value": "xnet_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_4, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_69": {
                "variable": {
                    "value": "optimizer_4",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "xnet_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_5, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_77": {
                "variable": {
                    "value": "optimizer_5",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_81": {
                "variable": {
                    "value": "xnet_6",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_6, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_85": {
                "variable": {
                    "value": "optimizer_6",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "xnet_7",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_7, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_93": {
                "variable": {
                    "value": "optimizer_7",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "variable": {
                    "value": "xnet_8",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits_8, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_101": {
                "variable": {
                    "value": "optimizer_8",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_104": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_280": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./save/' + 'cnn_model.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_41": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_1(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_49": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_2(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_57": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_3(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_65": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_4(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_73": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_5(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_81": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_6(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_89": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_7(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_97": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.personalized_model_8(tensor, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_283": {
                "checkpoint_dir": {
                    "value": "./save/",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "visual_modality/st_main.py": {
        "tensorflow": {
            "placeholder_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1024]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "xnet",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(labels=y, logits=logits, pos_weight=weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_69": {
                "variable": {
                    "value": "reg_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_75": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_142": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "load_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./save/' + 'cnn_model.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_32": {
                "variable": {
                    "value": "flatten_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_44": {
                "variable": {
                    "value": "dp1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(fc1, 512, activation_fn=tf.nn.relu, weights_initializer=tf.random_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_51": {
                "variable": {
                    "value": "dp2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(dp1, 256, activation_fn=tf.nn.relu, weights_initializer=tf.random_normal_initializer(seed=10), biases_initializer=tf.zeros_initializer(), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "weighted_cross_entropy_with_logits_68": {
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP(x, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_145": {
                "checkpoint_dir": {
                    "value": "./save/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_normal_initializer_35": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_40": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_47": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_54": {
                "seed": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}