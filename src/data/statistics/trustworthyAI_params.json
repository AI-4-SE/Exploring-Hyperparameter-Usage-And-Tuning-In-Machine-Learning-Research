{
    "datasets/synthetic_datasets.py": {
        "sklearn": {
            "PolynomialFeatures_141": {
                "variable": {
                    "value": "poly",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/anm/_anm.py": {
        "sklearn": {
            "GaussianProcessRegressor_126": {
                "variable": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "**kwargs",
                    "type": "",
                    "possible_values": []
                }
            },
            "scale_295": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, i].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scale(x).reshape((-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "scale_296": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[:, j].reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "scale(y).reshape((-1, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/corl/torch/frame/_reward.py": {
        "sklearn": {
            "PolynomialFeatures_101": {
                "variable": {
                    "value": "self.poly",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "WhiteKernel_106": {
                "noise_level": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "noise_level_bounds": {
                    "value": "(1e-10, 10.0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RBF_104": {
                "length_scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "length_scale_bounds": {
                    "value": "(0.01, 100.0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/corl/torch/utils/graph_analysis.py": {
        "sklearn": {
            "LinearRegression_85": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_123": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PolynomialFeatures_124": {
                "variable": {
                    "value": "poly",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/gran_dag/mindspore/gran_dag.py": {
        "sklearn": {
            "ExtraTreesRegressor_583": {
                "variable": {
                    "value": "extra_tree",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SelectFromModel_585": {
                "variable": {
                    "value": "selected_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "extra_tree",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ExtraTreesRegressor(n_estimators=500)",
                            "Call"
                        ]
                    ]
                },
                "threshold": {
                    "value": "'{}*mean'.format(thresh)",
                    "type": "Call",
                    "possible_values": []
                },
                "prefit": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_features": {
                    "value": "num_neighbors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.input_dim",
                            "Attribute"
                        ],
                        [
                            "self.num_neighbors",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/gran_dag/torch/gran_dag.py": {
        "sklearn": {
            "ExtraTreesRegressor_568": {
                "variable": {
                    "value": "extraTree",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SelectFromModel_570": {
                "variable": {
                    "value": "selected_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "extraTree",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ExtraTreesRegressor(n_estimators=500)",
                            "Call"
                        ]
                    ]
                },
                "threshold": {
                    "value": "'{}*mean'.format(thresh)",
                    "type": "Call",
                    "possible_values": []
                },
                "prefit": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "max_features": {
                    "value": "num_neighbors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.input_dim",
                            "Attribute"
                        ],
                        [
                            "self.num_neighbors",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "as_tensor_73": {
                "variable": {
                    "value": "self.data_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[shuffle_idx[:train_samples]]",
                            "Subscript"
                        ],
                        [
                            "data[shuffle_idx[train_samples:]]",
                            "Subscript"
                        ],
                        [
                            "Tensor(data, columns=columns)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_258": {
                "seed": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_368": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_537": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_79": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.data_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_80": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.data_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_101": {
                "data": {
                    "value": "sample_idxs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.random.choice(np.arange(int(self.n_samples)), size=(int(batch_size),), replace=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_103": {
                "input": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data_set[torch.as_tensor(sample_idxs).long()]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "RMSprop_370": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_501": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_538": {},
            "set_default_tensor_type_264": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_266": {
                "t": {
                    "value": "torch.cuda.DoubleTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_382": {
                "input": {
                    "value": "self.model.compute_log_likelihood(x, weights, biases, extra_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_269": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_271": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSprop_467": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_470": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_424": {
                "input": {
                    "value": "self.model.compute_log_likelihood(x, weights, biases, extra_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_460": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/rl/torch/data_loader/dataset_read_data.py": {
        "sklearn": {
            "StandardScaler_30": {
                "variable": {
                    "value": "self.inputdata",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/rl/torch/helpers/analyze_utils.py": {
        "sklearn": {
            "LinearRegression_30": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_66": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PolynomialFeatures_67": {
                "variable": {
                    "value": "poly",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/rl/torch/helpers/lambda_utils.py": {
        "sklearn": {
            "PolynomialFeatures_35": {
                "variable": {
                    "value": "poly",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_31": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianProcessRegressor_33": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/rl/torch/rewards/Reward_BIC.py": {
        "sklearn": {
            "PolynomialFeatures_53": {
                "variable": {
                    "value": "self.poly",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/lingam/direct_lingam.py": {
        "sklearn": {
            "check_array_125": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Tensor(data, columns=columns)",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_array_129": {
                "variable": {
                    "value": "self._Aknw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "array": {
                    "value": "self._prior_knowledge",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scale_142": {
                "variable": {
                    "value": "X_",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.copy(X)",
                            "Call"
                        ],
                        [
                            "scale(X_)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gcastle/castle/algorithms/lingam/ica_lingam.py": {
        "sklearn": {
            "check_array_113": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Tensor(data, columns=columns)",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "FastICA_116": {
                "variable": {
                    "value": "ica",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "self._max_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self._random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/lingam/utils/base.py": {
        "sklearn": {
            "check_array_72": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "LinearRegression_88": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_162": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LassoLarsIC_165": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "bic",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/lingam/utils/bootstrap.py": {
        "sklearn": {
            "check_array_42": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "resample_55": {
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/datasets/simulator.py": {
        "sklearn": {
            "GaussianProcessRegressor_391": {
                "variable": {
                    "value": "gp",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianProcessRegressor_395": {
                "variable": {
                    "value": "gp",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/data_loader/dataset_read_data.py": {
        "sklearn": {
            "StandardScaler_19": {
                "variable": {
                    "value": "self.inputdata",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/helpers/analyze_utils.py": {
        "sklearn": {
            "LinearRegression_36": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_72": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PolynomialFeatures_73": {
                "variable": {
                    "value": "poly",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/helpers/lambda_utils.py": {
        "sklearn": {
            "PolynomialFeatures_20": {
                "variable": {
                    "value": "poly",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_16": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GaussianProcessRegressor_18": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/rewards/Reward_BIC.py": {
        "sklearn": {
            "PolynomialFeatures_39": {
                "variable": {
                    "value": "self.poly",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/gae/tensorflow/helpers/tf_utils.py": {
        "tensorflow": {
            "is_gpu_available_23": {
                "cuda_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_random_seed_34": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/gae/tensorflow/models/model.py": {
        "tensorflow": {
            "glorot_uniform_39": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_58": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n, self.d, self.x_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.uniform([self.d, self.d], minval=-0.1, maxval=0.1, dtype=self.tf_float_type, seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_79": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_87": {
                "variable": {
                    "value": "X_prime",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,jl->ilk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "X_prime",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._encoder_forward(X)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ijk,jl->ilk', X_prime, W_prime)",
                            "Call"
                        ],
                        [
                            "self._decoder_forward(X_prime)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "W_prime",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_48": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=0.5, allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_55": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_90": {
                "x": {
                    "value": "tf.linalg.norm(X - X_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "uniform_68": {
                "shape": {
                    "value": "[self.d, self.d]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_74": {
                "*args": {
                    "value": "tf.linalg.expm(self.W_prime * self.W_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "W.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_90": {
                "tensor": {
                    "value": "X - X_prime",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "tensor": {
                    "value": "flatten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, input_dim))",
                            "Call"
                        ],
                        [
                            "Dense(hidden_size, activation=None, kernel_initializer=self.initializer)(flatten)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.05)(flatten)",
                            "Call"
                        ],
                        [
                            "Dense(output_dim, kernel_initializer=self.initializer)(flatten)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.n, self.d, output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expm_74": {
                "input": {
                    "value": "self.W_prime * self.W_prime",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_111": {
                "units": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_48": {
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=0.5, allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_108": {
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_109": {
                "alpha": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_76": {
                "tensor": {
                    "value": "self.W_prime",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_49": {
                "per_process_gpu_memory_fraction": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/gae/tensorflow/trainers/al_trainer.py": {
        "tensorflow": {
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/helpers/tf_utils.py": {
        "tensorflow": {
            "is_gpu_available_7": {
                "cuda_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_random_seed_18": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/main.py": {
        "tensorflow": {
            "Saver_125": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "variables_to_save",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'Adam' not in v.name]",
                            "ListComp"
                        ]
                    ]
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConfigProto_128": {
                "variable": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FileWriter_159": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config.summary_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_130": {
                "config": {
                    "value": "sess_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_135": {
                "input": {
                    "value": "actor.input_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/models/actor_graph.py": {
        "tensorflow": {
            "reduce_mean_13": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "self.avg_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "config.init_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_avg_baseline",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "self.global_step2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.input_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_length, self.input_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_coordinates",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.reward_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_rewards",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.graphs_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.max_length, self.max_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_graphs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_61": {
                "variable": {
                    "value": "self.merged",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_120": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_12": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_14": {
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(var)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_16": {
                "variable": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(var - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_17": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(var - mean)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_89": {
                "variable": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(self.samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "variable": {
                    "value": "self.graph_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.stack(self.samples), [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_94": {
                "variable": {
                    "value": "entropy_for_rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "variable": {
                    "value": "entropy_for_rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "entropy_for_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(self.entropy)",
                            "Call"
                        ],
                        [
                            "tf.transpose(entropy_for_rewards, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_96": {
                "variable": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(self.scores)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_for_rewards, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_98": {
                "variable": {
                    "value": "log_probss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.graphs_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(self.scores)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_for_rewards, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_99": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=self.graphs_, logits=logits_for_rewards)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "variable": {
                    "value": "self.entropy_regularization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "entropy_for_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(self.entropy)",
                            "Call"
                        ],
                        [
                            "tf.transpose(entropy_for_rewards, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_15": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_19": {
                "name": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_20": {
                "name": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "critic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_113": {
                "name": {
                    "value": "environment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_121": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_124": {
                "variable": {
                    "value": "(reward_mean, reward_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_126": {
                "variable": {
                    "value": "self.base_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.avg_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.alpha * self.avg_baseline + (1.0 - self.alpha) * reward_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exponential_decay_132": {
                "variable": {
                    "value": "self.lr1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr1_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.lr1_decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.lr1_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_135": {
                "variable": {
                    "value": "self.opt1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stop_gradient_137": {
                "variable": {
                    "value": "self.reward_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reward - self.avg_baseline - self.critic.predictions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exponential_decay_150": {
                "variable": {
                    "value": "self.lr2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr2_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.lr2_decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.lr2_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_153": {
                "variable": {
                    "value": "self.opt2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_squared_error_156": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.reward - self.avg_baseline",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.critic.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_16": {
                "input_tensor": {
                    "value": "tf.square(var - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_19": {
                "input_tensor": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_min_20": {
                "input_tensor": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_89": {
                "values": {
                    "value": "self.samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_97": {
                "x": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(self.scores)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_for_rewards, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_122": {
                "name": {
                    "value": "baseline",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_128": {
                "name": {
                    "value": "average baseline",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.avg_baseline",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "reinforce",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_142": {
                "name": {
                    "value": "loss1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_148": {
                "name": {
                    "value": "state_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_158": {
                "name": {
                    "value": "loss2",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_16": {
                "x": {
                    "value": "var - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "input_tensor": {
                    "value": "self.entropy_regularization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_norm_145": {
                "t": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_norm_161": {
                "t": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/models/critic.py": {
        "tensorflow": {
            "reduce_mean_28": {
                "variable": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_32": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(encoder_output, 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_neurons, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.init_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(h0, w1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "a": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(frame, self.num_neurons, activation=tf.nn.relu, kernel_initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w1', [self.num_neurons, 1], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/models/decoder/bilinear_decoder.py": {
        "tensorflow": {
            "einsum_29": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kn, imn->ijm",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bilinear_weights', [self.input_embed, self.input_embed], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_27": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bilinear_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.input_embed, self.input_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "self.logit_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logit_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([encoder_output.shape[0]]) * i",
                            "BinOp"
                        ],
                        [
                            "tf.cast(position, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_48": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([encoder_output.shape[0]]) * i",
                            "BinOp"
                        ],
                        [
                            "tf.cast(position, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_51": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_34": {
                "variable": {
                    "value": "self.logit_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.bias_initial_value]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logit_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "self.logit_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[self.bias_initial_value]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logit_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_44": {
                "shape": {
                    "value": "[encoder_output.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/models/decoder/decoder_graph.py": {
        "tensorflow": {
            "transpose_17": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.encoder_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_39": {
                "variable": {
                    "value": "self.cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_output.get_shape().as_list()[2]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "first_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "GO",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_43": {
                "variable": {
                    "value": "self.decoder_first_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "first_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('GO', [1, n_hidden], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "first_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "GO_state1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_90": {
                "variable": {
                    "value": "encoded_ref_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W_ref_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "encoded_ref_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_91": {
                "variable": {
                    "value": "encoded_query_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(query, self.W_q_g, name='encoded_query_g')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_92": {
                "variable": {
                    "value": "scores_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.v_g * tf.tanh(encoded_ref_g + encoded_query_g)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "scores_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "attention_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores_g - 100000000.0 * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "attention_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_100": {
                "variable": {
                    "value": "glimpse",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(attention_g, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_104": {
                "variable": {
                    "value": "encoded_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.W_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "encoded_ref",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_105": {
                "variable": {
                    "value": "encoded_query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(glimpse, self.W_q, name='encoded_query')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.v * tf.tanh(encoded_ref + encoded_query)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_113": {
                "variable": {
                    "value": "pointing",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.attention(self.encoder_output, output)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "self.positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_169": {
                "variable": {
                    "value": "self.attending",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.attending",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_170": {
                "variable": {
                    "value": "self.pointing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.pointing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_188": {
                "variable": {
                    "value": "self.positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_191": {
                "variable": {
                    "value": "self.attending",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.attending",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_192": {
                "variable": {
                    "value": "self.pointing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "self.pointing",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "self.W_ref_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_ref_g",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_hidden, n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "self.W_q_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_q_g",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden, n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "self.v_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "v_g",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "self.W_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_ref",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_hidden, n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "self.W_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "W_q",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden, n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_hidden]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_129": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([prev_input.shape[0]]) * timestep",
                            "BinOp"
                        ],
                        [
                            "tf.cast(position, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_132": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([prev_input.shape[0]]) * timestep",
                            "BinOp"
                        ],
                        [
                            "tf.cast(position, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.seq_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_138": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scores - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.attention(self.encoder_output, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_47": {
                "input": {
                    "value": "first_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('GO_state1', [1, n_hidden], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "input_tensor": {
                    "value": "self.encoder_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_50": {
                "name_or_scope": {
                    "value": "glimpse",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "pointer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "a": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_q_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoded_query_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_100": {
                "input": {
                    "value": "attention_g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores_g - 100000000.0 * self.mask, name='attention_g')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "input_tensor": {
                    "value": "glimpse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(ref, tf.expand_dims(attention_g, 2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(glimpse, 1) + query",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "a": {
                    "value": "glimpse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.multiply(ref, tf.expand_dims(attention_g, 2))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(glimpse, 1) + query",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "encoded_query",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_109": {
                "x": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.v * tf.tanh(encoded_ref + encoded_query), [-1], name='scores')",
                            "Call"
                        ],
                        [
                            "scores / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.C * tf.tanh(scores)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "loop",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_146": {
                "variable": {
                    "value": "self.first_city_hot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.first_city",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.seq_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_158": {
                "x": {
                    "value": "self.decoder_first_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_180": {
                "x": {
                    "value": "self.decoder_first_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_92": {
                "x": {
                    "value": "encoded_ref_g + encoded_query_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_106": {
                "x": {
                    "value": "encoded_ref + encoded_query",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_128": {
                "shape": {
                    "value": "[prev_input.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_149": {
                "params": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([prev_input.shape[0]]) * timestep",
                            "BinOp"
                        ],
                        [
                            "tf.cast(position, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/models/decoder/ntn_decoder.py": {
        "tensorflow": {
            "einsum_39": {
                "variable": {
                    "value": "dot_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "W_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights_left', [self.input_embed, self.decoder_hidden_dim], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_40": {
                "variable": {
                    "value": "dot_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "W_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights_right', [self.input_embed, self.decoder_hidden_dim], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_41": {
                "variable": {
                    "value": "tiled_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(dot_l, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, 1, self.max_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_42": {
                "variable": {
                    "value": "tiled_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(dot_r, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.max_length, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_46": {
                "variable": {
                    "value": "bilinear_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, knl, imn->ijml",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bilinear_weights', [self.input_embed, self.input_embed, self.decoder_hidden_dim], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_57": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijkl, l->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "final_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(bilinear_product + linear_sum + B)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bilinear_product + linear_sum + B)",
                            "Call"
                        ],
                        [
                            "bilinear_product + linear_sum + B",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('U', [self.decoder_hidden_dim], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bilinear_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.input_embed, self.input_embed, self.decoder_hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "W_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights_left",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.input_embed, self.decoder_hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "W_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights_right",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.input_embed, self.decoder_hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "U",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.decoder_hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.decoder_hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_49": {
                "variable": {
                    "value": "final_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bilinear_product + linear_sum + B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "self.logit_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logit_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_73": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([encoder_output.shape[0]]) * i",
                            "BinOp"
                        ],
                        [
                            "tf.cast(position, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_76": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([encoder_output.shape[0]]) * i",
                            "BinOp"
                        ],
                        [
                            "tf.cast(position, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_79": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "ntn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_41": {
                "input": {
                    "value": "dot_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ijk, kl->ijl', encoder_output, W_l)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_42": {
                "input": {
                    "value": "dot_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ijk, kl->ijl', encoder_output, W_r)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "final_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bilinear_product + linear_sum + B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_62": {
                "variable": {
                    "value": "self.logit_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.bias_initial_value]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logit_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "variable": {
                    "value": "self.logit_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[self.bias_initial_value]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logit_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_72": {
                "shape": {
                    "value": "[encoder_output.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/models/decoder/single_layer_decoder.py": {
        "tensorflow": {
            "einsum_34": {
                "variable": {
                    "value": "dot_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "W_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights_left', [self.input_embed, self.decoder_hidden_dim], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_35": {
                "variable": {
                    "value": "dot_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "W_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights_right', [self.input_embed, self.decoder_hidden_dim], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_37": {
                "variable": {
                    "value": "tiled_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(dot_l, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, 1, self.max_length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_38": {
                "variable": {
                    "value": "tiled_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(dot_r, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.max_length, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_50": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijkl, l->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "final_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tiled_l + tiled_r)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tiled_l + tiled_r)",
                            "Call"
                        ],
                        [
                            "tiled_l + tiled_r",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('U', [self.decoder_hidden_dim], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "W_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights_left",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.input_embed, self.decoder_hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "W_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights_right",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.input_embed, self.decoder_hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "U",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.decoder_hidden_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_41": {
                "variable": {
                    "value": "final_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tiled_l + tiled_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "self.logit_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logit_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_66": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([encoder_output.shape[0]]) * i",
                            "BinOp"
                        ],
                        [
                            "tf.cast(position, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_69": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([encoder_output.shape[0]]) * i",
                            "BinOp"
                        ],
                        [
                            "tf.cast(position, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_72": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "singe_layer_nn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "input": {
                    "value": "dot_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ijk, kl->ijl', encoder_output, W_l)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_38": {
                "input": {
                    "value": "dot_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.einsum('ijk, kl->ijl', encoder_output, W_r)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "final_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tiled_l + tiled_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_55": {
                "variable": {
                    "value": "self.logit_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[self.bias_initial_value]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logit_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self.logit_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[self.bias_initial_value]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logit_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_65": {
                "shape": {
                    "value": "[encoder_output.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/models/decoder/transformer_decoder.py": {
        "tensorflow": {
            "placeholder_194": {
                "variable": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.batch_size, config.max_length, config.input_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_channel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_204": {
                "variable": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_205": {
                "variable": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(samples)",
                            "Call"
                        ],
                        [
                            "tf.transpose(graphs_gen, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(graphs_gen, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_206": {
                "variable": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(samples)",
                            "Call"
                        ],
                        [
                            "tf.transpose(graphs_gen, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(graphs_gen, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_207": {
                "variable": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(logits_for_rewards)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_for_rewards, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_208": {
                "variable": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(logits_for_rewards)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_for_rewards, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_209": {
                "variable": {
                    "value": "log_probss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(samples)",
                            "Call"
                        ],
                        [
                            "tf.transpose(graphs_gen, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(graphs_gen, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(logits_for_rewards)",
                            "Call"
                        ],
                        [
                            "tf.transpose(logits_for_rewards, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_210": {
                "variable": {
                    "value": "reward_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=graphs_gen, logits=logits_for_rewards)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_212": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(graphs_gen)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_15": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_16": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_17": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_20": {
                "variable": {
                    "value": "Q_",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(Q, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_21": {
                "variable": {
                    "value": "K_",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(K, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_22": {
                "variable": {
                    "value": "V_",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(V, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Q_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(Q, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(K_, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_34": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "tf.convert_to_tensor(is_training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(V, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_40": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(outputs, num_heads, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_46": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "ln",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv1d_59": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv1d_63": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_normalization_69": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "ln",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "all_user_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_129": {
                "variable": {
                    "value": "inputs_with_all_user_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, tf.tile(tf.expand_dims(all_user_embedding, 1), [1, self.max_length, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "multihead_attention",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "get_variable_134": {
                "variable": {
                    "value": "W_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.input_embed, self.input_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_135": {
                "variable": {
                    "value": "self.embedded_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', [1, self.input_embed, self.input_embed], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "embedded_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_137": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.embedded_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv1d_155": {
                "variable": {
                    "value": "self.adj_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_212": {
                "x": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack(samples)",
                            "Call"
                        ],
                        [
                            "tf.transpose(graphs_gen, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(graphs_gen, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_20": {
                "value": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_21": {
                "value": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_22": {
                "value": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_25": {
                "a": {
                    "value": "K_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(K, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_40": {
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_132": {
                "name_or_scope": {
                    "value": "embedding_MCS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "stack_MCS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_164": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([inputs.shape[0]]) * i",
                            "BinOp"
                        ],
                        [
                            "tf.cast(position, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_167": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ones([inputs.shape[0]]) * i",
                            "BinOp"
                        ],
                        [
                            "tf.cast(position, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_171": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "convert_to_tensor_34": {
                "value": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tile_130": {
                "input": {
                    "value": "tf.expand_dims(all_user_embedding, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.max_length, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_130": {
                "input": {
                    "value": "all_user_embedding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(inputs, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "'block_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_163": {
                "shape": {
                    "value": "[inputs.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_233": {
                "input": {
                    "value": "reward_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(log_probss, axis=[1, 2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/models/encoder/gat_encoder.py": {
        "tensorflow": {
            "conv1d_12": {
                "variable": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv1d_15": {
                "variable": {
                    "value": "f_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv1d_16": {
                "variable": {
                    "value": "f_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_18": {
                "variable": {
                    "value": "coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.nn.leaky_relu(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "coefs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.nn.leaky_relu(logits))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(coefs, 1.0 - coef_drop)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_26": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(coefs, seq_fts)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_8": {
                "name": {
                    "value": "my_attn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_10": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - in_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_21": {
                "variable": {
                    "value": "coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coefs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.nn.leaky_relu(logits))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(coefs, 1.0 - coef_drop)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - coef_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_23": {
                "variable": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq, out_sz, 1, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(seq_fts, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - in_drop",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "h_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_17": {
                "a": {
                    "value": "f_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.conv1d(seq_fts, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_18": {
                "features": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f_1 + tf.transpose(f_2, [0, 2, 1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv1d_31": {
                "input": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(seq, 1.0 - in_drop)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ret.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "research/Causal Discovery with RL/src/models/encoder/transformer_encoder.py": {
        "tensorflow": {
            "dense_20": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_21": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_22": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_25": {
                "variable": {
                    "value": "Q_",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(Q, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_26": {
                "variable": {
                    "value": "K_",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(K, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_27": {
                "variable": {
                    "value": "V_",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(V, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Q_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(Q, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(K_, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_39": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "tf.convert_to_tensor(is_training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(V, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_45": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(outputs, num_heads, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_51": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "ln",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv1d_64": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv1d_68": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_normalization_74": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "ln",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "multihead_attention",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "W_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.input_dimension, self.input_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_98": {
                "variable": {
                    "value": "self.embedded_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', [1, self.input_dimension, self.input_embed], initializer=self.initializer)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "embedded_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_100": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.embedded_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "split_25": {
                "value": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_26": {
                "value": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_27": {
                "value": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_30": {
                "a": {
                    "value": "K_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(K, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_45": {
                "value": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, axis=2, training=is_training, name='ln', reuse=None)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "stack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_39": {
                "value": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "'block_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "research/GAE/src/helpers/tf_utils.py": {
        "tensorflow": {
            "trainable_variables_53": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_gpu_available_8": {
                "cuda_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_random_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "research/GAE/src/models/gae.py": {
        "tensorflow": {
            "glorot_uniform_29": {
                "variable": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_48": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n, self.d, self.x_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.uniform([self.d, self.d], minval=-0.1, maxval=0.1, dtype=self.tf_float_type, seed=self.seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_72": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_82": {
                "variable": {
                    "value": "X_prime",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,jl->ilk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "X_prime",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._encoder_forward(X)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ijk,jl->ilk', X_prime, W_prime)",
                            "Call"
                        ],
                        [
                            "self._decoder_forward(X_prime)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "W_prime",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_38": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=0.5, allow_growth=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_45": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_85": {
                "x": {
                    "value": "tf.linalg.norm(X - X_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "uniform_60": {
                "shape": {
                    "value": "[self.d, self.d]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_66": {
                "*args": {
                    "value": "tf.linalg.expm(self.W_prime * self.W_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "shape": {
                    "value": "W.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.tf_float_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_85": {
                "tensor": {
                    "value": "X - X_prime",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "tensor": {
                    "value": "flatten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, shape=(-1, input_dim))",
                            "Call"
                        ],
                        [
                            "Dense(hidden_size, activation=None, kernel_initializer=self.initializer)(flatten)",
                            "Call"
                        ],
                        [
                            "LeakyReLU(alpha=0.05)(flatten)",
                            "Call"
                        ],
                        [
                            "Dense(output_dim, kernel_initializer=self.initializer)(flatten)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.n, self.d, output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expm_66": {
                "input": {
                    "value": "self.W_prime * self.W_prime",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_106": {
                "units": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_38": {
                "gpu_options": {
                    "value": "tf.GPUOptions(per_process_gpu_memory_fraction=0.5, allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_103": {
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_104": {
                "alpha": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_68": {
                "tensor": {
                    "value": "self.W_prime",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ord": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GPUOptions_39": {
                "per_process_gpu_memory_fraction": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "research/GAE/src/trainers/al_trainer.py": {
        "tensorflow": {
            "global_variables_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/corl/__init__.py": {
        "torch": {}
    },
    "gcastle/castle/algorithms/gradient/corl/torch/corl.py": {
        "torch": {
            "manual_seed_42": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_262": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': actor.encoder.parameters(), 'lr': self.config.actor_lr}, {'params': actor.decoder.parameters(), 'lr': self.config.actor_lr}, {'params': critic.parameters(), 'lr': self.config.critic_lr}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "self.avg_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_baseline",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_182": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_184": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_345": {
                "variable": {
                    "value": "log_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_softmax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "actor.decoder.log_softmax(input=prev_input, position=actions, mask=action_mask_, state_0=prev_state_0, state_1=prev_state_1)",
                            "Call"
                        ],
                        [
                            "log_softmax.reshape((self.config.batch_size, self.config.seq_length)).T",
                            "Attribute"
                        ],
                        [
                            "torch.sum(log_softmax, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "data": {
                    "value": "td_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "td_target[::-1][:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_340": {
                "data": {
                    "value": "td_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "td_target[::-1][:-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/corl/torch/frame/_actor.py": {
        "torch": {}
    },
    "gcastle/castle/algorithms/gradient/corl/torch/frame/_critic.py": {
        "torch": {
            "Parameter_38": {
                "variable": {
                    "value": "self.env_w0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "env_w0.requires_grad_(True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.env_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "env_w1.requires_grad_(True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.env_w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "env_w2.requires_grad_(True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "env_b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.env_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "env_b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([0.0], requires_grad=True, device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "self.tgt_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_69": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "stats_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stats_x.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_71": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijk, kl->ijl', stats_x, self.env_w0)",
                            "Call"
                        ],
                        [
                            "self.activation(h0)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk, kl->ijl', stats_y, self.tgt_w0)",
                            "Call"
                        ],
                        [
                            "self.activation(h0)",
                            "Call"
                        ],
                        [
                            "self.h0(frame)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_73": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijk, kl->ijl', h0, self.env_w1)",
                            "Call"
                        ],
                        [
                            "self.activation(h1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk, kl->ijl', h0, self.tgt_w1)",
                            "Call"
                        ],
                        [
                            "self.activation(h1)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_83": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "stats_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stats_y.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_85": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijk, kl->ijl', stats_x, self.env_w0)",
                            "Call"
                        ],
                        [
                            "self.activation(h0)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk, kl->ijl', stats_y, self.tgt_w0)",
                            "Call"
                        ],
                        [
                            "self.activation(h0)",
                            "Call"
                        ],
                        [
                            "self.h0(frame)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_87": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijk, kl->ijl', h0, self.env_w1)",
                            "Call"
                        ],
                        [
                            "self.activation(h1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk, kl->ijl', h0, self.tgt_w1)",
                            "Call"
                        ],
                        [
                            "self.activation(h1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dim, out_features=output_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_116": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ParameterList_119": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(self.w1), nn.Parameter(self.b1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_36": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.neurons[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_41": {
                "*size": {
                    "value": "self.neurons[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.neurons[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_46": {
                "*size": {
                    "value": "self.neurons[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.neurons[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_55": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.neurons[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_58": {
                "*size": {
                    "value": "self.neurons[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.neurons[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_61": {
                "*size": {
                    "value": "self.neurons[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.neurons[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_127": {
                "input": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijk, kl->ijl', stats_x, self.env_w0)",
                            "Call"
                        ],
                        [
                            "self.activation(h0)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk, kl->ijl', stats_y, self.tgt_w0)",
                            "Call"
                        ],
                        [
                            "self.activation(h0)",
                            "Call"
                        ],
                        [
                            "self.h0(frame)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_119": {
                "data": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "data": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/corl/torch/frame/score_function.py": {
        "torch": {
            "mean_47": {
                "variable": {
                    "value": "critic_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(td_error)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_74": {
                "variable": {
                    "value": "critic_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward - avg_baseline",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "predict_reward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predict_reward.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_34": {
                "input": {
                    "value": "step_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "advantage_no_grad * log_softmax[:-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_47": {
                "input": {
                    "value": "td_error",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "advantage.reshape((-1, 1)).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_61": {
                "input": {
                    "value": "reward_baseline * log_softmax",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/corl/torch/models/_base_network.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=input_dim, out_channels=embed_dim, kernel_size=(1,), device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_52": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_71": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_87": {
                "variable": {
                    "value": "self.conv1d_ref_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.w_q_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.v_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_100": {
                "variable": {
                    "value": "self.conv1d_ref_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.w_q_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.v_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Categorical_145": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pointer_net(self.encoder_output, output)",
                            "Call"
                        ],
                        [
                            "scores_p - self.mask * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "self.pointer_net(encoder_output_ex, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_174": {
                "variable": {
                    "value": "scores_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.v_g(torch.tanh(encoder_ref_g + encoder_query_g))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_177": {
                "variable": {
                    "value": "attention_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_g - self.mask * 1000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_179": {
                "variable": {
                    "value": "glimpse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "attention_g.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_187": {
                "variable": {
                    "value": "scores_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.v_p(torch.tanh(encoder_ref_p + encoder_query_p))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_216": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pointer_net(self.encoder_output, output)",
                            "Call"
                        ],
                        [
                            "scores_p - self.mask * 1000000000.0",
                            "BinOp"
                        ],
                        [
                            "self.pointer_net(encoder_output_ex, output)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.feedforward_conv1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=embed_dim, out_channels=hidden_dim, kernel_size=(1,), device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.feedforward_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dim, out_features=hidden_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_34": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_150": {
                "tensor": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "prob.sample().long()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.seq_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_154": {
                "input": {
                    "value": "self.encoder_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "action_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "action.reshape(-1, 1, 1).repeat(1, 1, self.hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_180": {
                "input": {
                    "value": "glimpse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(ref, attention_g.unsqueeze(2))",
                            "Call"
                        ],
                        [
                            "torch.sum(glimpse, dim=1) + query",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_42": {
                "in_channels": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_47": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_175": {
                "input": {
                    "value": "encoder_ref_g + encoder_query_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_188": {
                "input": {
                    "value": "encoder_ref_p + encoder_query_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_191": {
                "input": {
                    "value": "scores_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(self.v_p(torch.tanh(encoder_ref_p + encoder_query_p)), dim=-1)",
                            "Call"
                        ],
                        [
                            "10.0 * torch.tanh(scores_p)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/corl/torch/models/decoders.py": {
        "torch": {
            "LSTMCell_34": {
                "variable": {
                    "value": "self.lstm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_44": {
                "variable": {
                    "value": "s_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "h_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_list, dim=1).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_62": {
                "variable": {
                    "value": "h_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_63": {
                "variable": {
                    "value": "c_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_list, dim=1).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "variable": {
                    "value": "c_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "s_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "s_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(s_list, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(s_list, dim=1).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "s_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "action_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "mask_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prob_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_92": {
                "variable": {
                    "value": "s_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "s_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "s_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(s_list, dim=1).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(s_list, dim=1).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "s_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_106": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "action_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "mask_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prob_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "(self.batch_size, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "s_i.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "(self.batch_size, self.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "s_i.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/corl/torch/models/encoders.py": {
        "torch": {
            "LSTM_41": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.w_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dim, out_features=output_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.w_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dim, out_features=output_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.w_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dim, out_features=output_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_169": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_177": {
                "variable": {
                    "value": "Q_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(Q, split_size_or_sections=Q.shape[2] // self.heads, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "K_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(K, split_size_or_sections=K.shape[2] // self.heads, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "V_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(V, split_size_or_sections=V.shape[2] // self.heads, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.split(Q, split_size_or_sections=Q.shape[2] // self.heads, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K_.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_196": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(x).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "self.feedforward_conv1d(output)",
                            "Call"
                        ],
                        [
                            "self.bn(output).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.embedding(x).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.feedforward_conv1d(enc)",
                            "Call"
                        ],
                        [
                            "output + x",
                            "BinOp"
                        ],
                        [
                            "self.bn(output).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q_, K_.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "output / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "torch.matmul(output, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(output, split_size_or_sections=output.shape[0] // self.heads, dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "self.bn(output.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_199": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(x).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "self.feedforward_conv1d(output)",
                            "Call"
                        ],
                        [
                            "self.bn(output).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.embedding(x).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.feedforward_conv1d(enc)",
                            "Call"
                        ],
                        [
                            "output + x",
                            "BinOp"
                        ],
                        [
                            "self.bn(output).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q_, K_.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "output / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "torch.matmul(output, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(output, split_size_or_sections=output.shape[0] // self.heads, dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "self.bn(output.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_202": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(x).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "self.feedforward_conv1d(output)",
                            "Call"
                        ],
                        [
                            "self.bn(output).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.embedding(x).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.feedforward_conv1d(enc)",
                            "Call"
                        ],
                        [
                            "output + x",
                            "BinOp"
                        ],
                        [
                            "self.bn(output).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q_, K_.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "output / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "torch.matmul(output, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(output, split_size_or_sections=output.shape[0] // self.heads, dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "self.bn(output.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.split(V, split_size_or_sections=V.shape[2] // self.heads, dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_205": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(output, split_size_or_sections=output.shape[0] // self.heads, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_158": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_164": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_177": {
                "tensor": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.w_q(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "Q.shape[2] // self.heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_181": {
                "tensor": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.w_k(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "K.shape[2] // self.heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_185": {
                "tensor": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.w_v(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "V.shape[2] // self.heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_205": {
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(x).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "self.feedforward_conv1d(output)",
                            "Call"
                        ],
                        [
                            "self.bn(output).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.embedding(x).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.feedforward_conv1d(enc)",
                            "Call"
                        ],
                        [
                            "output + x",
                            "BinOp"
                        ],
                        [
                            "self.bn(output).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q_, K_.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "output / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(output, p=self.dropout_rate)",
                            "Call"
                        ],
                        [
                            "torch.matmul(output, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(output, split_size_or_sections=output.shape[0] // self.heads, dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "self.bn(output.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "output.shape[0] // self.heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/corl/torch/utils/data_loader.py": {
        "torch": {
            "tensor_41": {
                "variable": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_45": {
                "variable": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_70": {
                "tensors": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/corl/torch/utils/validation.py": {
        "torch": {
            "tensor_86": {
                "variable": {
                    "value": "each",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "each",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args",
                            "Name"
                        ],
                        [
                            "torch.tensor(each, device=device)",
                            "Call"
                        ],
                        [
                            "each.to(device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/gran_dag/__init__.py": {
        "torch": {}
    },
    "gcastle/castle/algorithms/gradient/gran_dag/torch/base/base_model.py": {
        "torch": {
            "ParameterList_40": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_41": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_360": {
                "variable": {
                    "value": "self.extra_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unbind_102": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('tij,ljt,bj->bti', weights[k], adj, x) + biases[k]",
                            "BinOp"
                        ],
                        [
                            "torch.einsum('tij,btj->bti', weights[k], x) + biases[k]",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_211": {
                "input": {
                    "value": "grad_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(1)",
                            "Call"
                        ],
                        [
                            "grad_norm + torch.sum(ep.grad ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_319": {
                "loc": {
                    "value": "dp[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.exp(dp[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_369": {
                "loc": {
                    "value": "dp[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "dp[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "(self.input_dim, self.input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_47": {
                "n": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_319": {
                "input": {
                    "value": "dp[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "data": {
                    "value": "torch.zeros(self.input_dim, out_dim, in_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "data": {
                    "value": "torch.zeros(self.input_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('tij,ljt,bj->bti', weights[k], adj, x) + biases[k]",
                            "BinOp"
                        ],
                        [
                            "torch.einsum('tij,btj->bti', weights[k], x) + biases[k]",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_100": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('tij,ljt,bj->bti', weights[k], adj, x) + biases[k]",
                            "BinOp"
                        ],
                        [
                            "torch.einsum('tij,btj->bti', weights[k], x) + biases[k]",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_200": {
                "input": {
                    "value": "w.grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_204": {
                "input": {
                    "value": "b.grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unbind_267": {
                "input": {
                    "value": "density_params[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_363": {
                "data": {
                    "value": "torch.tensor(np.log(extra_param).reshape(1)).type(torch.Tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_374": {
                "input": {
                    "value": "extra_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "extra_params",
                            "Name"
                        ],
                        [
                            "extra_params",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_list[i + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "item",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_list[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_91": {
                "equation": {
                    "value": "tij,ljt,bj->bti",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weights[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_93": {
                "equation": {
                    "value": "tij,btj->bti",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weights[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_209": {
                "input": {
                    "value": "ep.grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "data": {
                    "value": "np.log(extra_param).reshape(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unbind_269": {
                "input": {
                    "value": "extra_params[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/gran_dag/torch/base/dag_optimizer.py": {
        "torch": {
            "eye_72": {
                "variable": {
                    "value": "prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prod",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.eye(adjacency.shape[0])",
                            "Call"
                        ],
                        [
                            "np.matmul(adjacency, prod)",
                            "Call"
                        ],
                        [
                            "torch.eye(model.input_dim)",
                            "Call"
                        ],
                        [
                            "torch.sum(prod, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('tij,ljt,jk->tik', w, model.adjacency.unsqueeze(0), prod)",
                            "Call"
                        ],
                        [
                            "torch.einsum('tij,tjk->tik', w, prod)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "jac_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unbind_121": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.compute_log_likelihood(x, weights, biases, extra_params, detach=True)",
                            "Call"
                        ],
                        [
                            "torch.unbind(log_probs, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_74": {
                "variable": {
                    "value": "prod_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "prod_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prod_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(model.input_dim)",
                            "Call"
                        ],
                        [
                            "torch.sum(prod_norm, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('tij,ljt,jk->tik', torch.ones_like(w).detach(), tmp, prod_norm)",
                            "Call"
                        ],
                        [
                            "torch.einsum('tij,tjk->tik', torch.ones_like(w).detach(), prod_norm)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_127": {
                "variable": {
                    "value": "jac_avg[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - torch.eye(model.input_dim).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.autograd.grad(log_probs[i], x, retain_graph=True, grad_outputs=torch.ones(batch_size))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_127": {
                "variable": {
                    "value": "jac_avg[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_32": {
                "variable": {
                    "value": "expm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "expm_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expm(input.detach().cpu().numpy())",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(expm_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_79": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.abs(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_81": {
                "variable": {
                    "value": "prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "tij,ljt,jk->tik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.abs(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_89": {
                "variable": {
                    "value": "prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "tij,tjk->tik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.abs(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trace_40": {
                "input": {
                    "value": "expm_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expm(input.detach().cpu().numpy())",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(expm_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_85": {
                "variable": {
                    "value": "prod_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "tij,ljt,jk->tik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "torch.ones_like(w).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_91": {
                "variable": {
                    "value": "prod_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "tij,tjk->tik",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "torch.ones_like(w).detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_99": {
                "n": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_125": {
                "outputs": {
                    "value": "log_probs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones(batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_84": {
                "n": {
                    "value": "model.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_86": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.abs(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_92": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.abs(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_126": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/mcsl/__init__.py": {
        "torch": {}
    },
    "gcastle/castle/algorithms/gradient/mcsl/torch/helpers/utils.py": {
        "torch": {
            "sigmoid_23": {
                "variable": {
                    "value": "sigmoid_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w / tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(eps, device=device)",
                            "Call"
                        ],
                        [
                            "1e-20",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_44": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gumbel_softmax_sample / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.arange(d ** 2).reshape(d, d)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mat, dtype=torch.long, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_43": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "trace_37": {
                "input": {
                    "value": "torch.matrix_exp(w * w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_45": {
                "input": {
                    "value": "u + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_24": {
                "n": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "w.shape[0]",
                            "Subscript"
                        ],
                        [
                            "w_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "sigmoid_w.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matrix_exp_37": {
                "A": {
                    "value": "w * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "triu_67": {
                "input": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.arange(d ** 2).reshape(d, d)",
                            "Call"
                        ],
                        [
                            "torch.tensor(mat, dtype=torch.long, device=device)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/mcsl/torch/mcsl.py": {
        "torch": {
            "manual_seed_37": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_149": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_151": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_175": {
                "variable": {
                    "value": "pns_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[1], x.shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "pns_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pns_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones([x.shape[1], x.shape[1]], device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(pns_mask, device=self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Tensor(data, columns=columns)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/mcsl/torch/models/masked_model.py": {
        "torch": {
            "Parameter_57": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w.to(device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_65": {
                "input": {
                    "value": "torch.matrix_exp(w_prime * w_prime)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matrix_exp_65": {
                "A": {
                    "value": "w_prime * w_prime",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_77": {
                "n": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_90": {
                "condition": {
                    "value": "self.pns_mask[:, i] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "torch.square(curr_y_pred.squeeze() - curr_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_100": {
                "input": {
                    "value": "curr_y_pred.squeeze() - curr_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_67": {
                "input": {
                    "value": "w_prime",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._preprocess_graph(self.w, tau=temperature, seed=self.seed)",
                            "Call"
                        ],
                        [
                            "self.pns_mask * w_prime",
                            "BinOp"
                        ]
                    ]
                },
                "ord": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/mcsl/torch/models/masked_nn.py": {
        "torch": {
            "ModuleDict_78": {
                "variable": {
                    "value": "self.nets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "md",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "reg_nn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*reg_nn",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dim, out_features=self.hidden_dim).to(device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_57": {
                "condition": {
                    "value": "self.mask[:, i] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden_dim",
                            "Attribute"
                        ],
                        [
                            "first_input_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/mcsl/torch/models/masked_quadratic_regression.py": {
        "torch": {
            "zeros_47": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "all_cross_terms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_ * y_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.n_samples, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "self.weight[choice]['w1'] * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "self.weight[choice]['w2'] * torch.square(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "self.w3 * combinations_cross_terms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w1.to(device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w2.to(device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_53": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_76": {
                "condition": {
                    "value": "self.mask[:, i] == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/mcsl/torch/trainers/al_trainer.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "self.init_rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_rho",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/notears/__init__.py": {
        "torch": {}
    },
    "gcastle/castle/algorithms/gradient/notears/torch/golem.py": {
        "torch": {
            "Adam_202": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_125": {
                "variable": {
                    "value": "self.config.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self.config.device_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_191": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_193": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/notears/torch/golem_utils/golem_model.py": {
        "torch": {
            "Parameter_69": {
                "variable": {
                    "value": "self._B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.B_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self._B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.d, self.d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_139": {
                "input": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_149": {
                "input": {
                    "value": "torch.matrix_exp(self.B * self.B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matrix_exp_149": {
                "A": {
                    "value": "self.B * self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_102": {
                "n": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_115": {
                "input": {
                    "value": "torch.square(torch.linalg.norm(self.X - self.X @ self.B))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slogdet_116": {
                "input": {
                    "value": "torch.eye(self.d).cuda(self.args.device_ids) - self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_119": {
                "input": {
                    "value": "torch.square(torch.linalg.norm(self.X - self.X @ self.B))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slogdet_120": {
                "input": {
                    "value": "torch.eye(self.d) - self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_124": {
                "input": {
                    "value": "torch.square(self.X - self.X @ self.B)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slogdet_125": {
                "input": {
                    "value": "torch.eye(self.d).cuda(self.args.device_ids) - self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "torch.square(self.X - self.X @ self.B)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slogdet_129": {
                "input": {
                    "value": "torch.eye(self.d) - self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_100": {
                "n": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_115": {
                "input": {
                    "value": "torch.linalg.norm(self.X - self.X @ self.B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_119": {
                "input": {
                    "value": "torch.linalg.norm(self.X - self.X @ self.B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_124": {
                "input": {
                    "value": "torch.sum(torch.square(self.X - self.X @ self.B), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_128": {
                "input": {
                    "value": "torch.sum(torch.square(self.X - self.X @ self.B), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_115": {
                "input": {
                    "value": "self.X - self.X @ self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_116": {
                "n": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_119": {
                "input": {
                    "value": "self.X - self.X @ self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_120": {
                "n": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_125": {
                "n": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_129": {
                "n": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_124": {
                "input": {
                    "value": "self.X - self.X @ self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_128": {
                "input": {
                    "value": "self.X - self.X @ self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/notears/torch/golem_utils/utils.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_45": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_47": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/notears/torch/models.py": {
        "torch": {
            "set_default_dtype_32": {
                "d": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc1_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d * dims[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc1_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d * dims[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_99": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc1_weight * fc1_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_99": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_101": {
                "variable": {
                    "value": "init_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matrix_power_103": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_e + A / d",
                            "BinOp"
                        ],
                        [
                            "init_e + A / self.d",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "d - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_130": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_pos.weight + self.fc1_neg.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_145": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc1_weight * fc1_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_145": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_146": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(fc1_weight * fc1_weight, dim=1).t()",
                            "Call"
                        ],
                        [
                            "torch.sum(fc1_weight * fc1_weight, dim=1).t()",
                            "Call"
                        ],
                        [
                            "torch.sum(fc1_weight * fc1_weight, dim=2).t()",
                            "Call"
                        ],
                        [
                            "torch.sum(fc1_weight * fc1_weight, dim=2).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.fc1_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.fc1_neg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ],
                        [
                            "self.dims[0]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_197": {
                "variable": {
                    "value": "bases",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc1_weight * fc1_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_210": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_212": {
                "variable": {
                    "value": "init_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matrix_power_214": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_e + A / d",
                            "BinOp"
                        ],
                        [
                            "init_e + A / self.d",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "self.d - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_223": {
                "variable": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_pos.weight + self.fc1_neg.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_230": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc1_weight * fc1_weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_230": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_231": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(fc1_weight * fc1_weight, dim=1).t()",
                            "Call"
                        ],
                        [
                            "torch.sum(fc1_weight * fc1_weight, dim=1).t()",
                            "Call"
                        ],
                        [
                            "torch.sum(fc1_weight * fc1_weight, dim=2).t()",
                            "Call"
                        ],
                        [
                            "torch.sum(fc1_weight * fc1_weight, dim=2).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_83": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc1_pos(x) - self.fc1_neg(x)",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dims[0], self.dims[1])",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "fc(x)",
                            "Call"
                        ],
                        [
                            "x.squeeze(dim=2)",
                            "Call"
                        ],
                        [
                            "self.fc1_pos(bases) - self.fc1_neg(bases)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_117": {
                "input": {
                    "value": "fc1_weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_252": {
                "input": {
                    "value": "(output - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "fc.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_204": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_195": {
                "input": {
                    "value": "x / mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/notears/torch/nonlinear.py": {
        "torch": {
            "from_numpy_186": {
                "variable": {
                    "value": "X_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Tensor(data, columns=columns)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_138": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_140": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/notears/torch/utils/lbfgsb_scipy.py": {
        "torch": {
            "from_numpy_117": {
                "variable": {
                    "value": "final_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sol.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "views",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "views",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "flat_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flat_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(flat_params)",
                            "Call"
                        ],
                        [
                            "flat_params.to(torch.get_default_dtype()).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_dtype_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_dtype_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/notears/torch/utils/locally_connected.py": {
        "torch": {
            "Parameter_46": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_linear, input_features, output_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_68": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x.unsqueeze(dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight.unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_linear, output_features)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/rl/__init__.py": {
        "torch": {}
    },
    "gcastle/castle/algorithms/gradient/rl/torch/helpers/torch_utils.py": {
        "torch": {
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_36": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/rl/torch/models/actor_graph.py": {
        "torch": {
            "tensor_76": {
                "variable": {
                    "value": "self.avg_baseline",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.init_baseline]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_80": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_83": {
                "variable": {
                    "value": "self.global_step2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_165": {
                "variable": {
                    "value": "self.opt1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.encoder.parameters()}, {'params': self.decoder.parameters()}, {'params': self.critic.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr1_start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_171": {
                "variable": {
                    "value": "self.lr1_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.opt1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "pow(self.lr1_decay_rate, 1 / self.lr1_decay_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_174": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_189": {
                "variable": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_189": {
                "variable": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_193": {
                "variable": {
                    "value": "self.graph_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "graphs_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(self.samples).permute([1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_194": {
                "variable": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "entropy_for_rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.entropy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_201": {
                "variable": {
                    "value": "log_probss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(self.scores)",
                            "Call"
                        ],
                        [
                            "logits_for_rewards.permute([1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.graphs_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_205": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(input=logits_for_rewards, target=self.graphs_, reduction='none')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_206": {
                "variable": {
                    "value": "self.entropy_regularization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "entropy_for_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(self.entropy)",
                            "Call"
                        ],
                        [
                            "entropy_for_rewards.permute([1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_grad_norm__247": {
                "parameters": {
                    "value": "list(self.encoder.parameters()) + list(self.decoder.parameters()) + list(self.critic.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_200": {
                "input": {
                    "value": "logits_for_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(self.scores)",
                            "Call"
                        ],
                        [
                            "logits_for_rewards.permute([1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_229": {
                "input": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "std_229": {
                "input": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_238": {
                "input": {
                    "value": "self.reward_baseline * self.log_softmax",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_239": {
                "input": {
                    "value": "self.entropy_regularization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/rl/torch/models/critic.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "layer0",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_neurons",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.h0_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "layer0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_45": {
                "variable": {
                    "value": "self.layer1.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_49": {
                "variable": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_output.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "self.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.layer1(h0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/rl/torch/models/decoder/decoder.py": {
        "torch": {
            "Parameter_40": {
                "variable": {
                    "value": "self._W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*(self.input_embed, self.input_embed)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self._l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_62": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kn, imn->ijm",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self._w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*(self.input_embed, self.input_embed, self.decoder_hidden_dim)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self._wl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*(self.input_embed, self.decoder_hidden_dim)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "self._wr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*(self.input_embed, self.decoder_hidden_dim)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self._u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*(self.decoder_hidden_dim, 1)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self._b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*(self.decoder_hidden_dim, 1)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self._l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_159": {
                "variable": {
                    "value": "dot_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_160": {
                "variable": {
                    "value": "dot_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_168": {
                "variable": {
                    "value": "bilinear_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, knl, imn->ijml",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_179": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijkl, l->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "final_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.activation(bilinear_product + linear_sum + B.view(self.decoder_hidden_dim))",
                            "Call"
                        ],
                        [
                            "self.activation(bilinear_product + linear_sum + B.view(self.decoder_hidden_dim))",
                            "Call"
                        ],
                        [
                            "bilinear_product + linear_sum + B.view(self.decoder_hidden_dim)",
                            "BinOp"
                        ],
                        [
                            "self.activation(tiled_l + tiled_r)",
                            "Call"
                        ],
                        [
                            "self.activation(tiled_l + tiled_r)",
                            "Call"
                        ],
                        [
                            "tiled_l + tiled_r",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_239": {
                "variable": {
                    "value": "self._wl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*(self.input_embed, self.decoder_hidden_dim)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_240": {
                "variable": {
                    "value": "self._wr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*(self.input_embed, self.decoder_hidden_dim)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_241": {
                "variable": {
                    "value": "self._u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*(self.decoder_hidden_dim, 1)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_242": {
                "variable": {
                    "value": "self._l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_266": {
                "variable": {
                    "value": "dot_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_267": {
                "variable": {
                    "value": "dot_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk, kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "encoder_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_282": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijkl, l->ijk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "final_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.activation(bilinear_product + linear_sum + B.view(self.decoder_hidden_dim))",
                            "Call"
                        ],
                        [
                            "self.activation(bilinear_product + linear_sum + B.view(self.decoder_hidden_dim))",
                            "Call"
                        ],
                        [
                            "bilinear_product + linear_sum + B.view(self.decoder_hidden_dim)",
                            "BinOp"
                        ],
                        [
                            "self.activation(tiled_l + tiled_r)",
                            "Call"
                        ],
                        [
                            "self.activation(tiled_l + tiled_r)",
                            "Call"
                        ],
                        [
                            "tiled_l + tiled_r",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_328": {
                "variable": {
                    "value": "self.Q_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dimension, out_features=num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "variable": {
                    "value": "self.K_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dimension, out_features=num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_334": {
                "variable": {
                    "value": "self.V_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dimension, out_features=num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_339": {
                "variable": {
                    "value": "self.bn_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_351": {
                "variable": {
                    "value": "Q_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(Q, int(input_dimension / num_heads), dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "K_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(K, int(input_dimension / num_heads), dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "V_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(V, int(input_dimension / num_heads), dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_356": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.split(Q, int(input_dimension / num_heads), dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K_.permute([0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_362": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q_, K_.permute([0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(outputs, p=dropout_rate, training=is_training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "outputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_365": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q_, K_.permute([0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(outputs, p=dropout_rate, training=is_training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "outputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_368": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q_, K_.permute([0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(outputs, p=dropout_rate, training=is_training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "outputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.split(V, int(input_dimension / num_heads), dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_371": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_394": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_units[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "(2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_units[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "(2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_399": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_units[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "(2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_units[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "(2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_404": {
                "variable": {
                    "value": "self.bn_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_410": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q_, K_.permute([0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(outputs, p=dropout_rate, training=is_training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "outputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_412": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q_, K_.permute([0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(outputs, p=dropout_rate, training=is_training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "outputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_440": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*(1, self.input_embed, self.input_embed)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_445": {
                "variable": {
                    "value": "self.bn_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.input_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_448": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.input_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv1d_472": {
                "variable": {
                    "value": "self.embedded_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "inputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "inputs.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "W_embed_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_embed.permute(2, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(encoder_output.shape[0], self.max_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_87": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tanh_120": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(encoder_output.shape[0], self.max_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_202": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tanh_235": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(encoder_output.shape[0], self.max_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_307": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_506": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(inputs.shape[0], self.max_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_510": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "masked_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ],
                        [
                            "self.adj_prob[:, i, :] - 100000000.0 * self.mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_162": {
                "input": {
                    "value": "dot_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijk, kl->ijl', encoder_output, W_l)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk, kl->ijl', encoder_output, W_l)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_163": {
                "input": {
                    "value": "dot_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijk, kl->ijl', encoder_output, W_r)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk, kl->ijl', encoder_output, W_r)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_237": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_269": {
                "input": {
                    "value": "dot_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijk, kl->ijl', encoder_output, W_l)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk, kl->ijl', encoder_output, W_l)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_270": {
                "input": {
                    "value": "dot_r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('ijk, kl->ijl', encoder_output, W_r)",
                            "Call"
                        ],
                        [
                            "torch.einsum('ijk, kl->ijl', encoder_output, W_r)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_351": {
                "tensor": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.Q_layer(inputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(input_dimension / num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_352": {
                "tensor": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.K_layer(inputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(input_dimension / num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_353": {
                "tensor": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.V_layer(inputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(input_dimension / num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_371": {
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q_, K_.permute([0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(outputs, p=dropout_rate, training=is_training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "outputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(outputs.shape[0] / num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_49": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "[encoder_output.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_141": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_194": {
                "*size": {
                    "value": "[encoder_output.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_252": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_297": {
                "*size": {
                    "value": "[encoder_output.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_503": {
                "*size": {
                    "value": "[inputs.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_328": {
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "(2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_331": {
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "(2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_334": {
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "(2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/rl/torch/models/encoder/encoder.py": {
        "torch": {
            "Conv1d_28": {
                "variable": {
                    "value": "self._seq_fts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_34": {
                "variable": {
                    "value": "self._f_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_38": {
                "variable": {
                    "value": "self._f_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_43": {
                "variable": {
                    "value": "self._ret",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.leaky_relu(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coefs.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "seq_fts.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.Q_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dimension, out_features=num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.K_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dimension, out_features=num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.V_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=input_dimension, out_features=num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_152": {
                "variable": {
                    "value": "self.bn_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_164": {
                "variable": {
                    "value": "Q_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(Q, int(input_dimension / num_heads), dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "K_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(K, int(input_dimension / num_heads), dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "V_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(V, int(input_dimension / num_heads), dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.split(Q, int(input_dimension / num_heads), dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K_.permute([0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_175": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q_, K_.permute([0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(outputs, p=dropout_rate, training=is_training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "outputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.bn_layer1(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_178": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q_, K_.permute([0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(outputs, p=dropout_rate, training=is_training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "outputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.bn_layer1(outputs)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_181": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q_, K_.permute([0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(outputs, p=dropout_rate, training=is_training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "outputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.bn_layer1(outputs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.split(V, int(input_dimension / num_heads), dim=2), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_184": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_206": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_units[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_units[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_211": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_units[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_units[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_216": {
                "variable": {
                    "value": "self.bn_layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_221": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q_, K_.permute([0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(outputs, p=dropout_rate, training=is_training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "outputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.bn_layer1(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_252": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*(1, self.input_dimension, self.input_embed)).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_257": {
                "variable": {
                    "value": "self.bn_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.input_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_289": {
                "variable": {
                    "value": "self.embedded_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "inputs.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "W_embed_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_embed.permute(2, 1, 0)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_60": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seq.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.dropout(seq, in_drop)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "in_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_72": {
                "variable": {
                    "value": "coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coefs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(F.leaky_relu(logits))",
                            "Call"
                        ],
                        [
                            "F.dropout(coefs, coef_drop)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "coef_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_fts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._seq_fts(seq)",
                            "Call"
                        ],
                        [
                            "F.dropout(seq_fts, in_drop)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "in_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "elu_86": {
                "input": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vals + self._bias",
                            "BinOp"
                        ],
                        [
                            "ret + self._ret(seq).permute(0, 2, 1)",
                            "BinOp"
                        ],
                        [
                            "ret + seq.permute(0, 2, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_123": {
                "variable": {
                    "value": "h_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_48": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_69": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f_1 + f_2.permute(0, 2, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_164": {
                "tensor": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.Q_layer(inputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(input_dimension / num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_165": {
                "tensor": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.K_layer(inputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(input_dimension / num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_166": {
                "tensor": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.V_layer(inputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(input_dimension / num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_184": {
                "tensor": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(Q_, K_.permute([0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.shape[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "F.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(outputs, p=dropout_rate, training=is_training)",
                            "Call"
                        ],
                        [
                            "torch.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(outputs, int(outputs.shape[0] / num_heads), dim=0), dim=2)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "outputs.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bn_layer(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(outputs)",
                            "Call"
                        ],
                        [
                            "self.conv2(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "self.bn_layer1(outputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(outputs.shape[0] / num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "input_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gcastle/castle/algorithms/gradient/rl/torch/rl.py": {
        "torch": {
            "is_available_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_240": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_242": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_367": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(input_batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_378": {
                "ndarray": {
                    "value": "reward_feed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "callreward.cal_rewards(graphs_feed.cpu().detach().numpy(), lambda1, lambda2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gcastle/run.py": {
        "torch": {}
    },
    "gcastle/web/main.py": {
        "torch": {}
    },
    "research/CausalVAE/codebase/models/mask_vae_flow.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.z_prior_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.z_prior_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_91": {
                "variable": {
                    "value": "cp_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[q_m.size()[0], self.z1_dim, self.z2_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_98": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(1).to(device)",
                            "Call"
                        ],
                        [
                            "0.3 * ut.kl_normal(q_m.view(-1, self.z_dim).to(device), q_v.view(-1, self.z_dim).to(device), p_m.view(-1, self.z_dim).to(device), p_v.view(-1, self.z_dim).to(device))",
                            "BinOp"
                        ],
                        [
                            "kl + 1 * ut.kl_normal(decode_m[:, i, :].to(device), cp_v[:, i, :].to(device), cp_m[:, i, :].to(device), cp_v[:, i, :].to(device))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "mask_kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "mask_kl2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_103": {
                "variable": {
                    "value": "u_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_80": {
                "variable": {
                    "value": "m_zv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[q_m.size()[0], self.z1_dim, self.z2_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_128": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dec.decode(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_140": {
                "input": {
                    "value": "self.compute_sigmoid_given(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_38": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "q_m.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "q_m.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_86": {
                "input": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ut.log_bernoulli_with_logits(x, decoded_bernoulli_logits.reshape(x.size()))",
                            "Call"
                        ],
                        [
                            "-torch.mean(rec)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "q_m.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "q_m.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "mask_kl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(1).to(device)",
                            "Call"
                        ],
                        [
                            "mask_kl + 1 * ut.kl_normal(f_z1[:, i, :].to(device), cp_v[:, i, :].to(device), cp_m[:, i, :].to(device), cp_v[:, i, :].to(device))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_62": {
                "*size": {
                    "value": "q_m.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "q_m.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "research/CausalVAE/codebase/models/mask_vae_pendulum.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.z_prior_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.z_prior_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_97": {
                "variable": {
                    "value": "cp_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[q_m.size()[0], self.z1_dim, self.z2_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_104": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(1).to(device)",
                            "Call"
                        ],
                        [
                            "alpha * ut.kl_normal(q_m.view(-1, self.z_dim).to(device), q_v.view(-1, self.z_dim).to(device), p_m.view(-1, self.z_dim).to(device), p_v.view(-1, self.z_dim).to(device))",
                            "BinOp"
                        ],
                        [
                            "kl + beta * ut.kl_normal(decode_m[:, i, :].to(device), cp_v[:, i, :].to(device), cp_m[:, i, :].to(device), cp_v[:, i, :].to(device))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "mask_kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "mask_kl2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_112": {
                "variable": {
                    "value": "u_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_137": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dec.decode(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_149": {
                "input": {
                    "value": "self.compute_sigmoid_given(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_42": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_60": {
                "*size": {
                    "value": "q_m.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_62": {
                "*size": {
                    "value": "q_m.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_93": {
                "input": {
                    "value": "rec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ut.log_bernoulli_with_logits(x, decoded_bernoulli_logits.reshape(x.size()))",
                            "Call"
                        ],
                        [
                            "-torch.mean(rec)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "q_m.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_95": {
                "*size": {
                    "value": "q_m.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_113": {
                "input": {
                    "value": "mask_kl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(1).to(device)",
                            "Call"
                        ],
                        [
                            "mask_kl + 1 * ut.kl_normal(f_z1[:, i, :].to(device), cp_v[:, i, :].to(device), cp_m[:, i, :].to(device), cp_v[:, i, :].to(device))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_66": {
                "*size": {
                    "value": "q_m.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "q_m.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "q_m.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_84": {
                "*size": {
                    "value": "q_m.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z2_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "research/CausalVAE/codebase/models/nns/mask.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "addmm_33": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "mat1": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_44": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "mat1": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ELU_61": {
                "variable": {
                    "value": "self.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.net1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.net2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.net3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.net4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ELU_128": {
                "variable": {
                    "value": "self.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.net1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.net2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.net3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.net4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rx1, rx2, rx3, rx4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_174": {
                "variable": {
                    "value": "self.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "variable": {
                    "value": "self.net1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.net2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.net3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.net4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rx1, rx2, rx3, rx4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_230": {
                "variable": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.nn.init.normal_(torch.zeros(in_features, in_features), mean=0, std=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_231": {
                "variable": {
                    "value": "self.sigmd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_239": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.matmul(self.M).matmul(e.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "self.sigmd(a)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_240": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(a, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(A, e)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_253": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_255": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_257": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_259": {
                "variable": {
                    "value": "self.I",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_272": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.B.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.B.t(), x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.B.t(), x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.I - self.A, self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, torch.inverse(self.I - self.A.t()), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "dag_left_linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x * torch.inverse(self.A + self.I)",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "dag_left_linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.channel * 96 * 96)",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc2(torch.cat([x, l], dim=1)))",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_282": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.B.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.B.t(), x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.B.t(), x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.I - self.A, self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, torch.inverse(self.I - self.A.t()), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "dag_left_linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x * torch.inverse(self.A + self.I)",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "dag_left_linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.channel * 96 * 96)",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc2(torch.cat([x, l], dim=1)))",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_288": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.B.t(), x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.B.t(), x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.I - self.A, self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, torch.inverse(self.I - self.A.t()), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "dag_left_linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x * torch.inverse(self.A + self.I)",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "dag_left_linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.channel * 96 * 96)",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc2(torch.cat([x, l], dim=1)))",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.I - self.A",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_300": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.B.t(), x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.B.t(), x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.I - self.A, self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, torch.inverse(self.I - self.A.t()), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "dag_left_linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x * torch.inverse(self.A + self.I)",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "dag_left_linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.channel * 96 * 96)",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc2(torch.cat([x, l], dim=1)))",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.inverse(self.I - self.A.t())",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_324": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.B.t(), x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, x.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.B.t(), x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, self.I - self.A, self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, torch.inverse(self.I - self.A.t()), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "dag_left_linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x * torch.inverse(self.A + self.I)",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "dag_left_linear(x, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "self.LReLU(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.channel * 96 * 96)",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc2(torch.cat([x, l], dim=1)))",
                            "Call"
                        ],
                        [
                            "F.elu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.inverse(self.I - self.A)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_325": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ut.vector_expand(v)",
                            "Call"
                        ],
                        [
                            "dag_left_linear(v, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "dag_right_linear(v, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "v.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.linear(v, torch.mul(torch.inverse(self.I - self.A), torch.inverse(self.I - self.A)), self.bias)",
                            "Call"
                        ],
                        [
                            "v.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "v.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "dag_left_linear(v, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "dag_right_linear(v, torch.inverse(self.I - self.A), self.bias)",
                            "Call"
                        ],
                        [
                            "v.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.mul(torch.inverse(self.I - self.A), torch.inverse(self.I - self.A))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_357": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_358": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_359": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_362": {
                "variable": {
                    "value": "self.LReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_363": {
                "variable": {
                    "value": "self.convm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_364": {
                "variable": {
                    "value": "self.convv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_365": {
                "variable": {
                    "value": "self.mean_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(8 * 8, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_368": {
                "variable": {
                    "value": "self.var_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(8 * 8, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_372": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_413": {
                "variable": {
                    "value": "self.net6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 128, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_447": {
                "variable": {
                    "value": "self.net5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(16, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_453": {
                "variable": {
                    "value": "self.net6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16, 128, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_472": {
                "variable": {
                    "value": "(zy1, zy2, zy3, zy4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_dim // self.concept",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_494": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.channel * 96 * 96",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_495": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300 + y_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_496": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_497": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * z_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_498": {
                "variable": {
                    "value": "self.LReLU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_499": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.channel * 96 * 96, 900)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_509": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_511": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(torch.cat([x, l], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_512": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ELU_535": {
                "variable": {
                    "value": "self.elu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_536": {
                "variable": {
                    "value": "self.net1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim + y_dim, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_545": {
                "variable": {
                    "value": "self.net2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim + y_dim, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_554": {
                "variable": {
                    "value": "self.net3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim + y_dim, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_563": {
                "variable": {
                    "value": "self.net4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z1_dim + y_dim, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_572": {
                "variable": {
                    "value": "self.net5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ELU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_577": {
                "variable": {
                    "value": "self.net6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_591": {
                "variable": {
                    "value": "(z1, z2, z3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.view(-1, self.z_dim)",
                            "Call"
                        ],
                        [
                            "self.net(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.z_dim)",
                            "Call"
                        ],
                        [
                            "self.net(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.z_dim)",
                            "Call"
                        ],
                        [
                            "self.net(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.z_dim)",
                            "Call"
                        ],
                        [
                            "self.net(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, 16, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.net6(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "(rx1 + rx2 + rx3 + rx4) / 4",
                            "BinOp"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.net6(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, 3 * 4)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=2, out=None)",
                            "Call"
                        ],
                        [
                            "z.contiguous()",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "z.view(-1, 4 * 4)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_602": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.view(-1, self.z_dim)",
                            "Call"
                        ],
                        [
                            "self.net(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.z_dim)",
                            "Call"
                        ],
                        [
                            "self.net(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.z_dim)",
                            "Call"
                        ],
                        [
                            "self.net(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.z_dim)",
                            "Call"
                        ],
                        [
                            "self.net(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, 16, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.net6(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "(rx1 + rx2 + rx3 + rx4) / 4",
                            "BinOp"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.net6(z)",
                            "Call"
                        ],
                        [
                            "z.view(-1, 3 * 4)",
                            "Call"
                        ],
                        [
                            "z.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=2, out=None)",
                            "Call"
                        ],
                        [
                            "z.contiguous()",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "z.view(-1, 4 * 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "split_658": {
                "variable": {
                    "value": "(zy1, zy2, zy3, zy4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_672": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim + y_dim, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_688": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rx1, rx2, rx3, rx4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_157": {
                "variable": {
                    "value": "(zy1, zy2, zy3, zy4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_dim // self.concept",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_217": {
                "variable": {
                    "value": "(zy1, zy2, zy3, zy4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_dim // self.concept",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_616": {
                "variable": {
                    "value": "(zy1, zy2, zy3, zy4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_dim // self.concept",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_107": {
                "variable": {
                    "value": "(zy1, zy2, zy3, zy4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_dim // self.concept",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rx1, rx2, rx3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_142": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_145": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_176": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_178": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_183": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_186": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_191": {
                "in_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_193": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z1_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_198": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_259": {
                "n": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "inverse_300": {
                "input": {
                    "value": "self.I - self.A.t()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_311": {
                "input": {
                    "value": "self.I - self.A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_312": {
                "input": {
                    "value": "self.I - self.A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_313": {
                "input": {
                    "value": "self.I - self.A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_324": {
                "input": {
                    "value": "self.I - self.A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_325": {
                "input": {
                    "value": "torch.inverse(self.I - self.A)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.inverse(self.I - self.A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_332": {
                "input": {
                    "value": "self.A + self.I",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_341": {
                "input": {
                    "value": "self.I - self.A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_342": {
                "input": {
                    "value": "self.I - self.A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_343": {
                "input": {
                    "value": "self.I - self.A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_350": {
                "input": {
                    "value": "self.A + self.I",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_366": {
                "in_features": {
                    "value": "8 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_369": {
                "in_features": {
                    "value": "8 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_373": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_374": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_375": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_376": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_377": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_378": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_379": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_380": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_381": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_382": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_383": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_384": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_385": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_400": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softplus(var) + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_414": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_415": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_416": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_417": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_418": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_419": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_420": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_421": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_422": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_423": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_424": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_425": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_426": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_448": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_449": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_450": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_451": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_454": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_455": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_456": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_457": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_458": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_459": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_460": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_461": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_462": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_463": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_464": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_465": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_466": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_471": {
                "tensors": {
                    "value": "(z, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_500": {
                "in_features": {
                    "value": "self.channel * 96 * 96",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "900",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_501": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_502": {
                "in_features": {
                    "value": "900",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_503": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_504": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * z_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_518": {
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_537": {
                "in_features": {
                    "value": "z1_dim + y_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_538": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_539": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_541": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_542": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_543": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel * 96 * 96",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_546": {
                "in_features": {
                    "value": "z1_dim + y_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_547": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_548": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_549": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_550": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_551": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_552": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel * 96 * 96",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_555": {
                "in_features": {
                    "value": "z1_dim + y_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_556": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_557": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_558": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_559": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_560": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_561": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel * 96 * 96",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_564": {
                "in_features": {
                    "value": "z1_dim + y_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_565": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_566": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_567": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_568": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_569": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_570": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel * 96 * 96",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ELU_573": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_574": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel * 96 * 96",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_578": {
                "in_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_579": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_580": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_581": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_582": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_584": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_585": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_586": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.channel * 96 * 96",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_593": {
                "input": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_594": {
                "input": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_595": {
                "input": {
                    "value": "z3",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_597": {
                "tensors": {
                    "value": "(rx1, rx2, rx3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_611": {
                "tensors": {
                    "value": "(z, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_631": {
                "tensors": {
                    "value": "(z, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_641": {
                "variable": {
                    "value": "(zy1, zy2, zy3, zy4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_dim // self.concept",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_657": {
                "tensors": {
                    "value": "(z, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_663": {
                "tensors": {
                    "value": "(rx1, rx2, rx3, rx4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_673": {
                "in_features": {
                    "value": "z_dim + y_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_674": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_675": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_676": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_677": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 96 * 96",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_681": {
                "tensors": {
                    "value": "(z, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_689": {
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_690": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_691": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_692": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_693": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_109": {
                "variable": {
                    "value": "(zy1, zy2, zy3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_dim // self.concept",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "*size": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "inverse_325": {
                "input": {
                    "value": "self.I - self.A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_511": {
                "tensors": {
                    "value": "[x, l]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_593": {
                "tensors": {
                    "value": "(torch.transpose(z1, 1, 0), u[:, 0].reshape(1, u.size()[0]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_594": {
                "tensors": {
                    "value": "(torch.transpose(z2, 1, 0), u[:, 1].reshape(1, u.size()[0]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_595": {
                "tensors": {
                    "value": "(torch.transpose(z3, 1, 0), u[:, 2].reshape(1, u.size()[0]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_643": {
                "variable": {
                    "value": "(zy1, zy2, zy3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "zy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z.view(-1, self.concept * self.z1_dim)",
                            "Call"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "zy.reshape(zy.size()[0], zy.size()[1], 1)",
                            "Call"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ],
                        [
                            "z if y is None else torch.cat((z, y), dim=1)",
                            "IfExp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.z_dim // self.concept",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "research/CausalVAE/codebase/utils.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_21": {
                "variable": {
                    "value": "bce",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCELoss_22": {
                "variable": {
                    "value": "bce3",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.cov(labels, rowvar=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "cov.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cov.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "cov.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "v.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "v.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "KL",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "qm.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_69": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_75": {
                "variable": {
                    "value": "(m, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(h, [-1, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "h.size(1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.reshape(m.size()[0], 4)",
                            "Call"
                        ],
                        [
                            "torch.reshape(m, [-1, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(h, [-1, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_82": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "label.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "label.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_83": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "label.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "label.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultivariateNormal_109": {
                "variable": {
                    "value": "latent_code",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.cov(labels, rowvar=False)).to(device)",
                            "Call"
                        ]
                    ]
                },
                "precision_matrix": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scale_tril": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "validate_args": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "A.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_116": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "A.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_142": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_228": {
                "variable": {
                    "value": "(m, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(h, [-1, 3, 4])",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "h.size(dim) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_358": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join('checkpoints', model.name, 'model-{:05d}.pt'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model-{:05d}.pt'.format(global_step))",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_379": {
                "variable": {
                    "value": "xl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bernoulli(xl)",
                            "Call"
                        ],
                        [
                            "xl + [X[idx][idx_choice]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(xl).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_465": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=True, download=True, transform=preprocess)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_469": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data', train=False, download=True, transform=preprocess)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_492": {
                "variable": {
                    "value": "xl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bernoulli(xl)",
                            "Call"
                        ],
                        [
                            "xl + [X[idx][idx_choice]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(xl).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_493": {
                "variable": {
                    "value": "yl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "yl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "yl + [y[idx][idx_choice]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(yl).to(device)",
                            "Call"
                        ],
                        [
                            "yl.new(np.eye(10)[yl])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_533": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN('data', split='extra', download=True, transform=preprocess)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_like_542": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_545": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y / tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_54": {
                "variable": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "loc": {
                    "value": "m[i].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "cov[i].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_118": {
                "variable": {
                    "value": "I[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(torch.t(A[j] - i), A[j] - i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_378": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_425": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(file_path)",
                            "Call"
                        ],
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join('checkpoints', model.name, 'model-{:05d}.pt'.format(global_step))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'model-{:05d}.pt'.format(global_step))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_78": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(h, [-1, 3, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_170": {
                "input": {
                    "value": "2 * torch.tensor(np.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_172": {
                "input": {
                    "value": "torch.log(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_174": {
                "input": {
                    "value": "(x - m) ** 2 / v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_229": {
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.reshape(h, [-1, 3, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_342": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(x + 0.5).int().float()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_543": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_93": {
                "input": {
                    "value": "1 - r + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_118": {
                "input": {
                    "value": "torch.t(A[j] - i)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A[j] - i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_172": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(batchsize, cov.size()[0], cov.size()[1])",
                            "Call"
                        ],
                        [
                            "F.softplus(h) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "F.softplus(h) + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_87": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_88": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "t_118": {
                "input": {
                    "value": "A[j] - i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "data": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_63": {
                "input": {
                    "value": "pv[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_61": {
                "input": {
                    "value": "torch.det(qv[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_62": {
                "input": {
                    "value": "torch.inverse(qv[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_297": {
                "input": {
                    "value": "qv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "det_61": {
                "input": {
                    "value": "qv[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_62": {
                "input": {
                    "value": "qv[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "research/CausalVAE/inference_flow.py": {
        "torch": {
            "is_available_13": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_36": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "z_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/CausalVAE/inference_pendeulum.py": {
        "torch": {
            "is_available_13": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_36": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "z_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/CausalVAE/run_flow.py": {
        "torch": {
            "is_available_13": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_36": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lvae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_49": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I + torch.exp(-x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'model-{:05d}.pt'.format(global_step))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_50": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "research/CausalVAE/run_pendulum.py": {
        "torch": {
            "is_available_13": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lvae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_49": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I + torch.exp(-x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_98": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'model-{:05d}.pt'.format(global_step))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_50": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "research/CausalVAE/utils.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_like_25": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(A < 0.3, zero, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_26": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "A < 0.3",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(A).to(device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(A < 0.3, zero, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_29": {
                "variable": {
                    "value": "expm_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.gumbel_softmax(A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_33": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "A.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "m": {
                    "value": "A.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_190": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataload_withlabel(dataset_dir, dataset)",
                            "Call"
                        ],
                        [
                            "Data.DataLoader(dataset, batch_size=batch_size, shuffle=False)",
                            "Call"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matrix_power_38": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(d).to(device) + torch.div(matrix.to(device), d).to(device)",
                            "BinOp"
                        ],
                        [
                            "(x + 0.5).int().float()",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matrix_power_45": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(d).to(device) + torch.div(matrix.to(device), d).to(device)",
                            "BinOp"
                        ],
                        [
                            "(x + 0.5).int().float()",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(pil_img)",
                            "Call"
                        ],
                        [
                            "np.asarray(pil_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_132": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray(self.imglabel[idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(label)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(pil_img)",
                            "Call"
                        ],
                        [
                            "np.asarray(pil_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gumbel_softmax_29": {
                "logits": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(A < 0.3, zero, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_30": {
                "input": {
                    "value": "expm_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(F.gumbel_softmax(A))",
                            "Call"
                        ],
                        [
                            "matrix_poly(A * A, m)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_37": {
                "n": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "div_37": {
                "input": {
                    "value": "matrix.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_44": {
                "n": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "div_44": {
                "input": {
                    "value": "matrix.to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trace_50": {
                "input": {
                    "value": "expm_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(F.gumbel_softmax(A))",
                            "Call"
                        ],
                        [
                            "matrix_poly(A * A, m)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pil_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(img_path)",
                            "Call"
                        ],
                        [
                            "np.asarray(pil_img).reshape(96, 96, 4)",
                            "Call"
                        ],
                        [
                            "Image.open(img_path)",
                            "Call"
                        ],
                        [
                            "np.asarray(pil_img).reshape(96, 96, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pil_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(img_path)",
                            "Call"
                        ],
                        [
                            "np.asarray(pil_img).reshape(96, 96, 4)",
                            "Call"
                        ],
                        [
                            "Image.open(img_path)",
                            "Call"
                        ],
                        [
                            "np.asarray(pil_img).reshape(96, 96, 4)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}