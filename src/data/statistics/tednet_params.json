{
    "ext/benchmark/experiment_cifar/model/layers/tr_tensordot.py": {
        "torch": {
            "Conv2d_51": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.kernel_channel_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.kernel_channel_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_250": {
                "variable": {
                    "value": "ori_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_296": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.contiguous()",
                            "Call"
                        ],
                        [
                            "inputs.view(batch_size, *self.input_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(input_positions, input_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.input_rank[-1], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.input_rank[0], self.output_rank[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.output_size)",
                            "Call"
                        ],
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "I_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'input_node0')",
                            "Call"
                        ],
                        [
                            "torch.tensordot(I_in, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(input_positions, input_positions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_319": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.contiguous()",
                            "Call"
                        ],
                        [
                            "inputs.view(batch_size, *self.input_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(input_positions, input_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.input_rank[-1], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.input_rank[0], self.output_rank[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.output_size)",
                            "Call"
                        ],
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "O_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'output_node0')",
                            "Call"
                        ],
                        [
                            "torch.tensordot(O_out, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1, 2], [-1, 0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_561": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.contiguous()",
                            "Call"
                        ],
                        [
                            "inputs.view(batch_size, *self.input_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(input_positions, input_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.input_rank[-1], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.input_rank[0], self.output_rank[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.output_size)",
                            "Call"
                        ],
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "I0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1], [1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_572": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.contiguous()",
                            "Call"
                        ],
                        [
                            "inputs.view(batch_size, *self.input_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(input_positions, input_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.input_rank[-1], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.input_rank[0], self.output_rank[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.output_size)",
                            "Call"
                        ],
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "O_L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node%d' % (self.input_num + self.output_num - 1))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1, -1], [2, 0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_572": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*node_shape['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_87": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.contiguous()",
                            "Call"
                        ],
                        [
                            "inputs.view(batch_size, *self.input_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(input_positions, input_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.input_rank[-1], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.input_rank[0], self.output_rank[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.output_size)",
                            "Call"
                        ],
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_241": {
                "variable": {
                    "value": "ori_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "std_245": {
                "variable": {
                    "value": "ori_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_292": {
                "variable": {
                    "value": "I_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "I_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'input_node0')",
                            "Call"
                        ],
                        [
                            "torch.tensordot(I_in, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'input_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'output_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % (self.input_num + i))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_316": {
                "variable": {
                    "value": "O_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "O_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'output_node0')",
                            "Call"
                        ],
                        [
                            "torch.tensordot(O_out, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'input_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'output_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % (self.input_num + i))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_367": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*node_shape['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_372": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_400": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.contiguous()",
                            "Call"
                        ],
                        [
                            "inputs.view(batch_size, *self.input_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(input_positions, input_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.input_rank[-1], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.input_rank[0], self.output_rank[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.output_size)",
                            "Call"
                        ],
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_493": {
                "variable": {
                    "value": "ori_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_565": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.contiguous()",
                            "Call"
                        ],
                        [
                            "inputs.view(batch_size, *self.input_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(input_positions, input_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.input_rank[-1], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.input_rank[0], self.output_rank[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.output_size)",
                            "Call"
                        ],
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'input_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'output_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % (self.input_num + i))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1, -1], [1, 0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_570": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.contiguous()",
                            "Call"
                        ],
                        [
                            "inputs.view(batch_size, *self.input_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(input_positions, input_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2)",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.input_rank[-1], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.input_rank[0], self.output_rank[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.output_size)",
                            "Call"
                        ],
                        [
                            "self.tensor_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'input_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'output_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % (self.input_num + i))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "ext/benchmark/experiment_cifar/model/resnet_cifar10.py": {
        "torch": {
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_96": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_119": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_123": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_130": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_135": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SGD_139": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_142": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[60, 120, 160]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_76": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ext/benchmark/experiment_cifar/model/resnet_cifar100.py": {
        "torch": {
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_97": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_120": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_124": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_131": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_136": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SGD_140": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_143": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[60, 120, 160]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_77": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ext/benchmark/experiment_cifar/model/resnet_tn_cifar10.py": {
        "torch": {
            "cross_entropy_25": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_30": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_59": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_73": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_86": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_100": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_114": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_128": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_159": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_173": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_187": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_201": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_34": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_37": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[60, 120, 160]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ext/benchmark/experiment_cifar/model/resnet_tn_cifar100.py": {
        "torch": {
            "cross_entropy_27": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_32": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_61": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_75": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_89": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_103": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_134": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_165": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_196": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_210": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_224": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_238": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_36": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_39": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[60, 120, 160]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "ext/benchmark/experiment_cifar/on_cifar10.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ext/benchmark/experiment_cifar/on_cifar100.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ext/benchmark/experiment_ucf11/model/cls_rnn.py": {
        "torch": {
            "device_count_29": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_30": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "11",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_58": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data, state)",
                            "Call"
                        ],
                        [
                            "model(data, state)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_68": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data, state)",
                            "Call"
                        ],
                        [
                            "model(data, state)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "UCF11Torch(self.dataset, 'train', [512, 2, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "UCF11Torch(self.dataset, 'test', [512, 2, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_72": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.00016667",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_75": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[100, 200]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ext/benchmark/experiment_ucf11/model/cls_rnn_tn.py": {
        "torch": {
            "device_count_32": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_33": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "11",
                            "MethodArgument"
                        ],
                        [
                            "11",
                            "MethodArgument"
                        ],
                        [
                            "11",
                            "MethodArgument"
                        ],
                        [
                            "11",
                            "MethodArgument"
                        ],
                        [
                            "11",
                            "MethodArgument"
                        ],
                        [
                            "11",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_56": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data, state)",
                            "Call"
                        ],
                        [
                            "model(data, state)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_66": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data, state)",
                            "Call"
                        ],
                        [
                            "model(data, state)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "UCF11Torch(self.dataset, 'train', [512, 2, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "UCF11Torch(self.dataset, 'test', [512, 2, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.00016667",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_73": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "[100, 200]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ext/benchmark/experiment_ucf11/model/rnn_naive/rnn.py": {
        "torch": {
            "Parameter_18": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.bias_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.35",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mm_33": {
                "variable": {
                    "value": "gate_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout_hh(hx)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight_hh.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "variable": {
                    "value": "ingate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "forgetgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_40": {
                "variable": {
                    "value": "cellgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_41": {
                "variable": {
                    "value": "outgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_66": {
                "variable": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_30": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight_ih.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "input": {
                    "value": "cy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ext/benchmark/experiment_ucf11/on_ucf11.py": {
        "torch": {
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ext/tests/test_btt.py": {
        "torch": {
            "Tensor_17": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_41": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ext/tests/test_cp.py": {
        "torch": {
            "Tensor_17": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_41": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ext/tests/test_ops.py": {
        "torch": {}
    },
    "ext/tests/test_tk2.py": {
        "torch": {
            "Tensor_17": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_41": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ext/tests/test_tr.py": {
        "torch": {
            "Tensor_17": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_41": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ext/tests/test_tt.py": {
        "torch": {
            "Tensor_17": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_41": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_49": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_60": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tednet/_ops.py": {
        "torch": {
            "threshold_28": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-tensor",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "threshold_29": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-tensor",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor.numpy()",
                            "Call"
                        ],
                        [
                            "tensor.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_52": {
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "m": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tednet/tnn/bt_tucker/base.py": {
        "torch": {
            "conv2d_173": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "weight_tmp.permute(*new_index)",
                            "Call"
                        ],
                        [
                            "weight_tmp.reshape(self.out_size, self.in_size, self.kernel_size[0], self.kernel_size[1])",
                            "Call"
                        ],
                        [
                            "weight_tmp + cal_tmp",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "core_param_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*core_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "factor_param_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*k_factor_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "factor_param_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*k_factor_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_163": {
                "variable": {
                    "value": "cal_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cal_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, block_info['core']['name'])",
                            "Call"
                        ],
                        [
                            "torch.tensordot(cal_tmp, factor, dims=[[0], [2]])",
                            "Call"
                        ],
                        [
                            "torch.tensordot(cal_tmp, factor, dims=[[0], [1]])",
                            "Call"
                        ],
                        [
                            "torch.tensordot(cal_tmp, factor, dims=[[0], [1]])",
                            "Call"
                        ],
                        [
                            "in_tmp",
                            "Name"
                        ],
                        [
                            "cal_tmp.reshape(-1, I).matmul(factor.view(I, -1))",
                            "Call"
                        ],
                        [
                            "cal_tmp.view(batch_size * factor_offset, -1, J * R)",
                            "Call"
                        ],
                        [
                            "cal_tmp.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "cal_tmp.reshape(-1, self.core_size).matmul(core.view(self.core_size, -1))",
                            "Call"
                        ],
                        [
                            "cal_tmp.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, c_factors_info[j]['name'])",
                            "Call"
                        ],
                        [
                            "getattr(self, k_factors_info[0]['name'])",
                            "Call"
                        ],
                        [
                            "getattr(self, k_factors_info[1]['name'])",
                            "Call"
                        ],
                        [
                            "getattr(self, factor_info['name'])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[[0], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_165": {
                "variable": {
                    "value": "cal_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cal_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, block_info['core']['name'])",
                            "Call"
                        ],
                        [
                            "torch.tensordot(cal_tmp, factor, dims=[[0], [2]])",
                            "Call"
                        ],
                        [
                            "torch.tensordot(cal_tmp, factor, dims=[[0], [1]])",
                            "Call"
                        ],
                        [
                            "torch.tensordot(cal_tmp, factor, dims=[[0], [1]])",
                            "Call"
                        ],
                        [
                            "in_tmp",
                            "Name"
                        ],
                        [
                            "cal_tmp.reshape(-1, I).matmul(factor.view(I, -1))",
                            "Call"
                        ],
                        [
                            "cal_tmp.view(batch_size * factor_offset, -1, J * R)",
                            "Call"
                        ],
                        [
                            "cal_tmp.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "cal_tmp.reshape(-1, self.core_size).matmul(core.view(self.core_size, -1))",
                            "Call"
                        ],
                        [
                            "cal_tmp.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, c_factors_info[j]['name'])",
                            "Call"
                        ],
                        [
                            "getattr(self, k_factors_info[0]['name'])",
                            "Call"
                        ],
                        [
                            "getattr(self, k_factors_info[1]['name'])",
                            "Call"
                        ],
                        [
                            "getattr(self, factor_info['name'])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[[0], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_244": {
                "variable": {
                    "value": "core_param_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*core_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "factor_param_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*factor_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_160": {
                "variable": {
                    "value": "cal_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cal_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, block_info['core']['name'])",
                            "Call"
                        ],
                        [
                            "torch.tensordot(cal_tmp, factor, dims=[[0], [2]])",
                            "Call"
                        ],
                        [
                            "torch.tensordot(cal_tmp, factor, dims=[[0], [1]])",
                            "Call"
                        ],
                        [
                            "torch.tensordot(cal_tmp, factor, dims=[[0], [1]])",
                            "Call"
                        ],
                        [
                            "in_tmp",
                            "Name"
                        ],
                        [
                            "cal_tmp.reshape(-1, I).matmul(factor.view(I, -1))",
                            "Call"
                        ],
                        [
                            "cal_tmp.view(batch_size * factor_offset, -1, J * R)",
                            "Call"
                        ],
                        [
                            "cal_tmp.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "cal_tmp.reshape(-1, self.core_size).matmul(core.view(self.core_size, -1))",
                            "Call"
                        ],
                        [
                            "cal_tmp.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, c_factors_info[j]['name'])",
                            "Call"
                        ],
                        [
                            "getattr(self, k_factors_info[0]['name'])",
                            "Call"
                        ],
                        [
                            "getattr(self, k_factors_info[1]['name'])",
                            "Call"
                        ],
                        [
                            "getattr(self, factor_info['name'])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[[0], [2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_253": {
                "variable": {
                    "value": "factor_param_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*factor_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tednet/tnn/bt_tucker/btt_lenet.py": {
        "torch": {
            "MaxPool2d_31": {
                "variable": {
                    "value": "self.s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "self.s4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/bt_tucker/btt_resnet.py": {
        "torch": {
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(out_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(out_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample2(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample3(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_160": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_166": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample2(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample3(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BTTConv2D(in_shape, out_shape, [r for _ in range(len(in_shape) + 2)], 2, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_57": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(out_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/bt_tucker/btt_rnn.py": {
        "torch": {}
    },
    "tednet/tnn/cp/base.py": {
        "torch": {
            "conv2d_162": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "weight_tmp + torch.tensordot(weight_out_in, weight_k0_k1, dims=[[-1], [-1]])",
                            "BinOp"
                        ],
                        [
                            "getattr(self, 'node%d_block%d' % (0, i))",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d_block%d' % (j, i))",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d_block%d' % (j, i))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_150": {
                "variable": {
                    "value": "weight_out_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weight_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node_out_block%d' % i)",
                            "Call"
                        ],
                        [
                            "weight_out.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node_in_block%d' % i)",
                            "Call"
                        ],
                        [
                            "weight_in.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[[-1], [-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "variable": {
                    "value": "weight_out_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensordot_158": {
                "variable": {
                    "value": "weight_k0_k1",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weight_k0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node_k0_block%d' % i)",
                            "Call"
                        ],
                        [
                            "weight_k0.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_k1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node_k1_block%d' % i)",
                            "Call"
                        ],
                        [
                            "weight_k1.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[[-1], [-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_158": {
                "variable": {
                    "value": "weight_k0_k1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensordot_282": {
                "variable": {
                    "value": "res_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_dec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "weight_tmp + torch.tensordot(weight_out_in, weight_k0_k1, dims=[[-1], [-1]])",
                            "BinOp"
                        ],
                        [
                            "getattr(self, 'node%d_block%d' % (0, i))",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d_block%d' % (j, i))",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d_block%d' % (j, i))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[[1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_160": {
                "a": {
                    "value": "weight_out_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensordot(weight_out, weight_in, dims=[[-1], [-1]]).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_k0_k1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensordot(weight_k0, weight_k1, dims=[[-1], [-1]]).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[[-1], [-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_231": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_285": {
                "variable": {
                    "value": "res_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensordot(inputs_dec, weight_tmp, dims=[[1], [0]])",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res_tmp, weight_tmp, dims=[[1], [0]])",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res_tmp.unsqueeze(-1), weight_tmp.unsqueeze(-1), dims=[[-1], [-1]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "weight_tmp + torch.tensordot(weight_out_in, weight_k0_k1, dims=[[-1], [-1]])",
                            "BinOp"
                        ],
                        [
                            "getattr(self, 'node%d_block%d' % (0, i))",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d_block%d' % (j, i))",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d_block%d' % (j, i))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[[1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_288": {
                "variable": {
                    "value": "res_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res_tmp.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "weight_tmp.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[[-1], [-1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tednet/tnn/cp/cp_lenet.py": {
        "torch": {
            "MaxPool2d_31": {
                "variable": {
                    "value": "self.s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "self.s4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/cp/cp_resnet.py": {
        "torch": {
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm2d_46": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample2(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample3(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_162": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample2(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample3(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "CPConv2D(c_in, c_out, r, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_55": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/cp/cp_rnn.py": {
        "torch": {}
    },
    "tednet/tnn/initializer.py": {
        "torch": {
            "no_grad_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tednet/tnn/tensor_ring/base.py": {
        "torch": {
            "Conv2d_89": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.kernel_cin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.kernel_cout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensordot_166": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(batch_size, *self.in_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(in_positions, in_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.ranks_fill[self.in_num], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.ranks_fill[0], self.ranks_fill[self.in_num + 1], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.out_size)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "I_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'in_node0')",
                            "Call"
                        ],
                        [
                            "torch.tensordot(I_in, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(in_positions, in_positions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_185": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(batch_size, *self.in_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(in_positions, in_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.ranks_fill[self.in_num], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.ranks_fill[0], self.ranks_fill[self.in_num + 1], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.out_size)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "O_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'out_node0')",
                            "Call"
                        ],
                        [
                            "torch.tensordot(O_out, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1, 2], [-1, 0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_303": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(batch_size, *self.in_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(in_positions, in_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.ranks_fill[self.in_num], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.ranks_fill[0], self.ranks_fill[self.in_num + 1], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.out_size)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "I0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1], [1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_312": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(batch_size, *self.in_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(in_positions, in_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.ranks_fill[self.in_num], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.ranks_fill[0], self.ranks_fill[self.in_num + 1], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.out_size)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "O_L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node%d' % (self.in_num + self.out_num - 1))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1, -1], [2, 0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_312": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "node",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_162": {
                "variable": {
                    "value": "I_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "I_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'in_node0')",
                            "Call"
                        ],
                        [
                            "torch.tensordot(I_in, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'in_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'out_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % (self.in_num + i))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_182": {
                "variable": {
                    "value": "O_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "O_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'out_node0')",
                            "Call"
                        ],
                        [
                            "torch.tensordot(O_out, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'in_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'out_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % (self.in_num + i))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_243": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_306": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(batch_size, *self.in_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(in_positions, in_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.ranks_fill[self.in_num], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.ranks_fill[0], self.ranks_fill[self.in_num + 1], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.out_size)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'in_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'out_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % (self.in_num + i))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1, -1], [1, 0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_310": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(batch_size, *self.in_shape, *image_hw)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I_in, dims=(in_positions, in_positions))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 4, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "res.reshape(-1, self.ranks_fill[self.in_num], *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, self.ranks_fill[0], self.ranks_fill[self.in_num + 1], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_out, dims=([1, 2], [-1, 0]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *image_new_hw, self.out_size)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, I0, dims=([1], [1]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [1, 0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, O_L, dims=([1, -1], [2, 0])).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'in_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'out_node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % (self.in_num + i))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tednet/tnn/tensor_ring/tr_lenet.py": {
        "torch": {
            "MaxPool2d_31": {
                "variable": {
                    "value": "self.s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "self.s4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/tensor_ring/tr_resnet.py": {
        "torch": {
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(out_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(out_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample2(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample3(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_161": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_167": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample2(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample3(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TRConv2D(in_shape, out_shape, [r for _ in range(len(in_shape) + len(out_shape) + 1)], kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_58": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(out_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/tensor_ring/tr_rnn.py": {
        "torch": {}
    },
    "tednet/tnn/tensor_train/base.py": {
        "torch": {
            "Conv2d_74": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ranks[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensordot_137": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(-1, 1, *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *self.in_shape, self.ranks[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -2], [0, 2]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [0, 2]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *new_hw, -1)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [0, 2]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1, -2], [0, 2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_264": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(-1, 1, *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *self.in_shape, self.ranks[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -2], [0, 2]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [0, 2]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *new_hw, -1)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [0, 2]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_140": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(-1, 1, *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *self.in_shape, self.ranks[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -2], [0, 2]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [0, 2]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *new_hw, -1)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [0, 2]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1, -1], [0, 2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_208": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_268": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.view(-1, 1, *image_hw)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *self.in_shape, self.ranks[0], -1)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -2], [0, 2]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [0, 2]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, *new_hw, -1)",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, -1], [0, 2]))",
                            "Call"
                        ],
                        [
                            "res.reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node%d' % i)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1, -1], [0, 2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tednet/tnn/tensor_train/tt_lenet.py": {
        "torch": {
            "MaxPool2d_31": {
                "variable": {
                    "value": "self.s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "self.s4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/tensor_train/tt_resnet.py": {
        "torch": {
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(out_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(out_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample2(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample3(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_161": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_167": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample2(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample3(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TTConv2D(in_shape, out_shape, [r for _ in range(len(in_shape))], kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_58": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(out_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/tensor_train/tt_rnn.py": {
        "torch": {}
    },
    "tednet/tnn/tn_cnn.py": {
        "torch": {
            "add_61": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tn_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "res.contiguous()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/tn_linear.py": {
        "torch": {
            "add_50": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tn_contract(inputs)",
                            "Call"
                        ],
                        [
                            "torch.add(self.bias, res)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/tn_module.py": {
        "torch": {
            "Parameter_57": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tednet/tnn/tn_rnn.py": {
        "torch": {
            "Parameter_32": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(4 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.bias_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(4 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_ih",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_hh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.35",
                            "MethodArgument"
                        ],
                        [
                            "0.35",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_65": {
                "variable": {
                    "value": "gate_hh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout_hh(hx)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight_hh.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "variable": {
                    "value": "ingate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "forgetgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_72": {
                "variable": {
                    "value": "cellgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_73": {
                "variable": {
                    "value": "outgate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_122": {
                "variable": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_76": {
                "input": {
                    "value": "cy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "forgetgate * cx + ingate * cellgate",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/tucker2/base.py": {
        "torch": {
            "Parameter_63": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(node_info['shape'][0], node_info['shape'][1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(node_info['shape'][0], node_info['shape'][1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ranks[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ranks[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensordot_129": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, 2, 3], [0, 1, 2]))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node_core')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_133": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, 2, 3], [0, 1, 2]))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node_core')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_195": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_289": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, 2, 3], [0, 1, 2]))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node_core')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_204": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*node_info['shape'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_280": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, 2, 3], [0, 1, 2]))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node_core')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_282": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, 2, 3], [0, 1, 2]))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node_core')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1, 2, 3], [0, 1, 2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_286": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "res.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.kernel(res)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "inputs.view(-1, *self.in_shape)",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1, 2, 3], [0, 1, 2]))",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.tensordot(res, weight_tmp, dims=([1], [0]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weight_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node_core')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node0')",
                            "Call"
                        ],
                        [
                            "getattr(self, 'node1')",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tednet/tnn/tucker2/tk2_lenet.py": {
        "torch": {
            "MaxPool2d_31": {
                "variable": {
                    "value": "self.s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "self.s4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.c1(inputs)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s2(out)",
                            "Call"
                        ],
                        [
                            "self.c3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.s4(out)",
                            "Call"
                        ],
                        [
                            "out.view(inputs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc5(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc6(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/tucker2/tk2_resnet.py": {
        "torch": {
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample2(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample3(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_163": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(inputs)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(inputs)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample2(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.down_sample3(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TK2Conv2D(c_in, c_out, [r, r], kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_58": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "tednet/tnn/tucker2/tk2_rnn.py": {
        "torch": {}
    }
}