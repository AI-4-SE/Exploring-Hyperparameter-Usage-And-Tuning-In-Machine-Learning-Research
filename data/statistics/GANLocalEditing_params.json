{
    "spherical_kmeans.py": {
        "sklearn": {
            "check_random_state_94": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(self.random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_random_state_180": {
                "variable": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_182": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', order='C', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', order='C', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_array_183": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', order='C', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', order='C', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "csr",
                    "type": "str",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[np.float64, np.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "check_array_338": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', order='C', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', order='C', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "csr",
                    "type": "str",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[np.float64, np.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "normalize_348": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', order='C', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', order='C', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_376": {
                "variable": {
                    "value": "self.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_385": {
                "variable": {
                    "value": "self.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_253": {
                "variable": {
                    "value": "cluster_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "cluster_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_init_centroids(X, self.n_clusters, self.init, random_state=random_state, x_squared_norms=x_squared_norms, init_size=init_size)",
                            "Call"
                        ],
                        [
                            "normalize(cluster_centers)",
                            "Call"
                        ],
                        [
                            "normalize(cluster_centers)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_262": {
                "variable": {
                    "value": "cluster_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "cluster_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_init_centroids(X, self.n_clusters, self.init, random_state=random_state, x_squared_norms=x_squared_norms, init_size=init_size)",
                            "Call"
                        ],
                        [
                            "normalize(cluster_centers)",
                            "Call"
                        ],
                        [
                            "normalize(cluster_centers)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_288": {
                "variable": {
                    "value": "self.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_304": {
                "variable": {
                    "value": "self.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "X": {
                    "value": "self.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_random_state_354": {
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_151": {
                "X": {
                    "value": "centers[center_idx, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cielab.py": {
        "torch": {
            "tensor_4": {
                "variable": {
                    "value": "_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.412453, 0.35758, 0.180423], [0.212671, 0.71516, 0.072169], [0.019334, 0.119193, 0.950227]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_20": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "rgb.contiguous().view(-1, rgb_shape[-1])",
                            "Call"
                        ],
                        [
                            "(rgb > 0.04045).float() * ((rgb + 0.055) / 1.055) ** 2.4 + (rgb <= 0.04045).float() * rgb / 12.92",
                            "BinOp"
                        ],
                        [
                            "rgb * 100",
                            "BinOp"
                        ],
                        [
                            "rgb",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_matrix.to(rgb.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_38": {
                "variable": {
                    "value": "lab",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(L, a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_49": {
                "input": {
                    "value": "(lab1 - lab2) / norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_25": {
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(rgb, matrix)",
                            "Call"
                        ],
                        [
                            "(xyz > 0.008856).float() * torch.pow(xyz, 1 / 3.0) + (xyz <= 0.008856).float() * (7.787 * xyz + 16 / 116)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1 / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "factor2_catalog.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "one_hot(labels, self._factorization.cluster_centers_.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "[heatmaps[:, v].sum(1, keepdim=True) for v in self.annotations.values()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "factor_catalog.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "one_hot(labels, self._factorization.cluster_centers_.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "[heatmaps[:, v].sum(1, keepdim=True) for v in self.annotations.values()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "op/fused_act.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "fused",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fused",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'fused_bias_act.cpp'), os.path.join(module_path, 'fused_bias_act_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "op/upfirdn2d.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "upfirdn2d_op",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "upfirdn2d",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'upfirdn2d.cpp'), os.path.join(module_path, 'upfirdn2d_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_176": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_100": {
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ],
                        [
                            "kernel",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ptutils.py": {
        "torch": {
            "interpolate_93": {
                "input": {
                    "value": "self._data[self._res]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(res, res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.interpolation_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "style2_interpolator.py": {
        "torch": {
            "ones_5": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t.dim()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._catalog.M[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_20": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._catalog.M[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_32": {
                "obj": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.to(y1.device)",
                            "Call"
                        ],
                        [
                            "q[:, None, None]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(in_mse)",
                            "Call"
                        ],
                        [
                            "q * (in_mse > rho).float()",
                            "BinOp"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._catalog.M[layer][label_i]",
                            "Subscript"
                        ],
                        [
                            "self._catalog.M[layer][label_i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_23": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._catalog.M[layer][label_i]",
                            "Subscript"
                        ],
                        [
                            "self._catalog.M[layer][label_i]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_25": {
                "variable": {
                    "value": "c[label_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - in_mse[order]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "style_interpolator.py": {
        "torch": {
            "ones_5": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t.dim()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._catalog.M[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_20": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._catalog.M[layer]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_33": {
                "obj": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.to(y1.device)",
                            "Call"
                        ],
                        [
                            "q[:, None, None]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(in_mse)",
                            "Call"
                        ],
                        [
                            "q * (in_mse > rho).float()",
                            "BinOp"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._catalog.M[layer][label_i]",
                            "Subscript"
                        ],
                        [
                            "self._catalog.M[layer][label_i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_23": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._catalog.M[layer][label_i]",
                            "Subscript"
                        ],
                        [
                            "self._catalog.M[layer][label_i]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_25": {
                "variable": {
                    "value": "c[label_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - in_mse[order]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "stylegan.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(output_size, input_size) * init_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(output_channels, input_channels, kernel_size, kernel_size) * init_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(kernel, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "kernel[:, None] * kernel[None, :]",
                            "BinOp"
                        ],
                        [
                            "kernel[None, None]",
                            "Subscript"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "kernel[:, :, ::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "self.kernel.expand(x.size(1), -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_183": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "x * (styles_in_slice[:, 0] + 1.0) + styles_in_slice[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.torgb(x)",
                            "Call"
                        ],
                        [
                            "m(styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(kernel, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "kernel[:, None] * kernel[None, :]",
                            "BinOp"
                        ],
                        [
                            "kernel[None, None]",
                            "Subscript"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "kernel[:, :, ::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "self.kernel.expand(x.size(1), -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((self.kernel.size(2) - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_300": {
                "variable": {
                    "value": "self.top_epi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_321": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, nf, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_322": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleDict_385": {
                "variable": {
                    "value": "self.style_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_449": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "OrderedDict(blocks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_491": {
                "variable": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_39": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "x * (styles_in_slice[:, 0] + 1.0) + styles_in_slice[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.torgb(x)",
                            "Call"
                        ],
                        [
                            "m(styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.w_mul",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(output_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_88": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv_transpose2d_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "x * (styles_in_slice[:, 0] + 1.0) + styles_in_slice[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.torgb(x)",
                            "Call"
                        ],
                        [
                            "m(styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(w.size(-1) - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_99": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "x * (styles_in_slice[:, 0] + 1.0) + styles_in_slice[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.torgb(x)",
                            "Call"
                        ],
                        [
                            "m(styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(w.size(-1) - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_132": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_242": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "x * (styles_in_slice[:, 0] + 1.0) + styles_in_slice[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.torgb(x)",
                            "Call"
                        ],
                        [
                            "m(styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lerp_285": {
                "input": {
                    "value": "self.avg_latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "x * (styles_in_slice[:, 0] + 1.0) + styles_in_slice[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.torgb(x)",
                            "Call"
                        ],
                        [
                            "m(styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_110": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "x * (styles_in_slice[:, 0] + 1.0) + styles_in_slice[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.torgb(x)",
                            "Call"
                        ],
                        [
                            "m(styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.w_mul",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_112": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "x * (styles_in_slice[:, 0] + 1.0) + styles_in_slice[:, 1]",
                            "BinOp"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, styles_in_range[0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, styles_in_range[1])",
                            "Call"
                        ],
                        [
                            "self.torgb(x)",
                            "Call"
                        ],
                        [
                            "m(styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, styles[2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.w_mul",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf(res - 1)",
                            "Call"
                        ],
                        [
                            "nf(res - 1)",
                            "Call"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_163": {
                "input": {
                    "value": "torch.mean(x ** 2, dim=1, keepdim=True) + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_321": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Call"
                        ],
                        [
                            "nf",
                            "Call"
                        ],
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_322": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "Call"
                        ],
                        [
                            "nf",
                            "Call"
                        ],
                        [
                            "nf",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_28": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_66": {
                "*size": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_281": {
                "*size": {
                    "value": "latent_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_size",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_163": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_248": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_299": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf(res - 1)",
                            "Call"
                        ],
                        [
                            "nf(res - 1)",
                            "Call"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_429": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_482": {
                "variable": {
                    "value": "nl.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.conv.weight.dtype",
                            "Attribute"
                        ],
                        [
                            "m.conv1.weight.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "res[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.conv.weight.device",
                            "Attribute"
                        ],
                        [
                            "m.conv1.weight.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_484": {
                "variable": {
                    "value": "nl.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.conv.weight.dtype",
                            "Attribute"
                        ],
                        [
                            "m.conv1.weight.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "res[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.conv.weight.device",
                            "Attribute"
                        ],
                        [
                            "m.conv1.weight.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "stylegan2.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(k, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "k[None, :] * k[:, None]",
                            "BinOp"
                        ],
                        [
                            "k / k.sum()",
                            "BinOp"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_115": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_dim, in_dim).div_(lr_mul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_176": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_199": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channel, size, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_306": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channels[4] * 4 * 4, channels[4], activation='fused_lrelu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_325": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stddev.var(0, unbiased=False) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, stddev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_379": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_453": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_547": {
                "variable": {
                    "value": "self.style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_570": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_571": {
                "variable": {
                    "value": "self.upsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_572": {
                "variable": {
                    "value": "self.to_rgbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_573": {
                "variable": {
                    "value": "self.noises",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_620": {
                "variable": {
                    "value": "latent_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_latent",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.style_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.input.input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_141": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_dim).fill_(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_153": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_402": {
                "variable": {
                    "value": "demod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_417": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "style.size(0)",
                            "Call"
                        ],
                        [
                            "ys[0].size(0)",
                            "Call"
                        ],
                        [
                            "ys[0].size(0)",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_19": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_101": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ],
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_138": {
                "*size": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_185": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_199": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_380": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ],
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_426": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "style.size(0)",
                            "Call"
                        ],
                        [
                            "ys[0].size(0)",
                            "Call"
                        ],
                        [
                            "ys[0].size(0)",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_432": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "style.size(0)",
                            "Call"
                        ],
                        [
                            "ys[0].size(0)",
                            "Call"
                        ],
                        [
                            "ys[0].size(0)",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_453": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_611": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ],
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ],
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_580": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_19": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_615": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "stylegan2_output.py": {
        "torch": {
            "is_tensor_6": {
                "obj": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_27": {
                "*size": {
                    "value": "max(seed_indices) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dlatent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_48": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__dict__.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_51": {
                "obj": {
                    "value": "v[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "stylegan_output.py": {
        "torch": {
            "is_tensor_6": {
                "obj": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_27": {
                "*size": {
                    "value": "max(seed_indices) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "dlatent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_48": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__dict__.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_51": {
                "obj": {
                    "value": "v[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}