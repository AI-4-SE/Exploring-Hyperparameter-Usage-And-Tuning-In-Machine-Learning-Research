{
    "fine_tune_sensation_generation.py": {
        "torch": {}
    },
    "sensation_generation.py": {
        "torch": {}
    },
    "sensation_save.py": {
        "torch": {}
    },
    "seq2seq/get_to_the_point.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_248": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "lang.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opts['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_52": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args['encoder_layers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_76": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(enc_input)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_78": {
                "variable": {
                    "value": "(h, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, self.args['hidden_size']), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out2(output1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.reduce_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.reduce_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "hidden_reduced_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reduce_h(h.view(-1, self.args['hidden_size'] * 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "hidden_reduced_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reduce_c(c.view(-1, self.args['hidden_size'] * 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.decode_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_146": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_feature + dec_fea_expanded",
                            "BinOp"
                        ],
                        [
                            "att_features + coverage_feature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_156": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_dist_ / normalization_factor",
                            "BinOp"
                        ],
                        [
                            "attn_dist.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "attn_dist.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h.contiguous()",
                            "Call"
                        ],
                        [
                            "h.view(-1, n)",
                            "Call"
                        ],
                        [
                            "h.view(-1, t_k, n)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.x_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 2 + self.args['emb_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTM_176": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.args['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.out1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.out2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "s_t_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_decoder.view(-1, self.args['hidden_size']), c_decoder.view(-1, self.args['hidden_size']))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lstm_out.view(-1, self.args['hidden_size']), c_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_231": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, self.args['hidden_size']), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out2(output1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_271": {
                "variable": {
                    "value": "self.convs_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Conv1d(embedding_size, num_filters, filter_size) for filter_size in filter_sizes)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "ModuleList_272": {
                "variable": {
                    "value": "self.convs_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Conv1d(embedding_size, num_filters, filter_size) for filter_size in filter_sizes)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters * len(filter_sizes) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "feat_map2_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.max_pool1d(feat_map, feat_map.size(2)).squeeze() for feat_map in feat_maps_q]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "feat_map2_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.max_pool1d(feat_map, feat_map.size(2)).squeeze() for feat_map in feat_maps_a]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_294": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(torch.cat((feat_map2_q, feat_map2_a), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_294": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_585": {
                "variable": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_586": {
                "variable": {
                    "value": "target_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_651": {
                "variable": {
                    "value": "baseline_rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "baseline_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.expected_reward_layer(output1.detach()) * step_mask.unsqueeze(1).detach() for (output1, step_mask) in zip(all_output1, all_step_mask)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(baseline_rewards, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_652": {
                "variable": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_653": {
                "variable": {
                    "value": "dec_lens_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_659": {
                "variable": {
                    "value": "sum_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward * torch.stack(step_losses, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_661": {
                "variable": {
                    "value": "rl_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_avg_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_704": {
                "variable": {
                    "value": "sum_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(step_losses, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_706": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_avg_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_739": {
                "variable": {
                    "value": "sum_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(step_losses, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_741": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_avg_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.oov_emb_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_94": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(enc_input)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_96": {
                "variable": {
                    "value": "(h, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, self.args['hidden_size']), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out2(output1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.p_gen_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 4 + self.args['emb_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.oov_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "s_t_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_decoder.view(-1, self.args['hidden_size']), c_decoder.view(-1, self.args['hidden_size']))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "p_gen_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_t, s_t_hat, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_222": {
                "variable": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.p_gen_linear(p_gen_input)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(p_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_559": {
                "variable": {
                    "value": "ext_vocab_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_559": {
                "variable": {
                    "value": "ext_vocab_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_563": {
                "variable": {
                    "value": "step_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "step_mask - (ext_vocab_target == EOS_idx).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_625": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_625": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_628": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vocab_dist",
                            "Name"
                        ],
                        [
                            "vocab_dist_.scatter_add(1, enc_batch_extend_vocab, attn_dist_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_628": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_638": {
                "variable": {
                    "value": "step_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "step_mask - (target == EOS_idx).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gather_694": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vocab_dist",
                            "Name"
                        ],
                        [
                            "vocab_dist_.scatter_add(1, enc_batch_extend_vocab, attn_dist_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_694": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_732": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vocab_dist",
                            "Name"
                        ],
                        [
                            "vocab_dist_.scatter_add(1, enc_batch_extend_vocab, attn_dist_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_732": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_775": {
                "variable": {
                    "value": "decoder_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(decoder_vocab, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_779": {
                "tensors": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "len(decoded_sents)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "len(decoded_sents)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.v(e)",
                            "Call"
                        ],
                        [
                            "scores.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "tensors": {
                    "value": "(c_t_1, y_t_1_embd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "vocab_dist_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vocab_dist_, extra_zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_286": {
                "input": {
                    "value": "conv(q_embedded)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_291": {
                "input": {
                    "value": "conv(a_embedded)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_363": {
                "*size": {
                    "value": "(batch_size, 2 * self.args['hidden_size'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_463": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "len(decoded_sents)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_668": {
                "input": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_697": {
                "variable": {
                    "value": "step_coverage_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(attn_dist, coverage)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_704": {
                "tensors": {
                    "value": "step_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_739": {
                "tensors": {
                    "value": "step_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_271": {
                "in_channels": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opts['emb_size']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opts['num_filters']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_272": {
                "in_channels": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opts['emb_size']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opts['num_filters']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_pool1d_287": {
                "input": {
                    "value": "feat_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "feat_map.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool1d_292": {
                "input": {
                    "value": "feat_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "feat_map.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_367": {
                "*size": {
                    "value": "enc_batch.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_629": {
                "input": {
                    "value": "gold_probs + self.args['eps']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_659": {
                "tensors": {
                    "value": "step_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_695": {
                "input": {
                    "value": "gold_probs + self.args['eps']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_733": {
                "input": {
                    "value": "gold_probs + self.args['eps']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_777": {
                "input": {
                    "value": "decoder_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(decoder_vocab, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sample[t].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "*size": {
                    "value": "(batch_size, batch['max_art_oovs'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_548": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "len(decoded_sents)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_613": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "len(decoded_sents)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_697": {
                "input": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_dist_ / normalization_factor",
                            "BinOp"
                        ],
                        [
                            "attn_dist.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "attn_dist.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_748": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "len(decoded_sents)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_294": {
                "tensors": {
                    "value": "(feat_map2_q, feat_map2_a)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_565": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "len(decoded_sents)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_575": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "len(decoded_sents)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.args['max_r']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_590": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "len(decoded_sents)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.args['max_r']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_640": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "len(decoded_sents)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_749": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "len(decoded_sents)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_205": {
                "tensors": {
                    "value": "[s_t_1[0][:, i], s_t_1[1][:, i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/sensation_get_to_the_point.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_248": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "lang.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opts['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_52": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "args['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args['encoder_layers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_76": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(enc_input)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_78": {
                "variable": {
                    "value": "(h, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, self.args['hidden_size']), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out2(output1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.reduce_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.reduce_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "hidden_reduced_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reduce_h(h.view(-1, self.args['hidden_size'] * 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "hidden_reduced_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.reduce_c(c.view(-1, self.args['hidden_size'] * 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.decode_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_146": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoder_feature + dec_fea_expanded",
                            "BinOp"
                        ],
                        [
                            "att_features + coverage_feature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_156": {
                "variable": {
                    "value": "c_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_dist_ / normalization_factor",
                            "BinOp"
                        ],
                        [
                            "attn_dist.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "attn_dist.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h.contiguous()",
                            "Call"
                        ],
                        [
                            "h.view(-1, n)",
                            "Call"
                        ],
                        [
                            "h.view(-1, t_k, n)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.x_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 2 + self.args['emb_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTM_176": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.args['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.out1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.out2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "s_t_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_decoder.view(-1, self.args['hidden_size']), c_decoder.view(-1, self.args['hidden_size']))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lstm_out.view(-1, self.args['hidden_size']), c_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_231": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, self.args['hidden_size']), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out2(output1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_445": {
                "variable": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_446": {
                "variable": {
                    "value": "target_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_507": {
                "variable": {
                    "value": "baseline_rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "baseline_rewards",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.expected_reward_layer(output1.detach()) * step_mask.unsqueeze(1).detach() for (output1, step_mask) in zip(all_output1, all_step_mask)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(baseline_rewards, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_508": {
                "variable": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_509": {
                "variable": {
                    "value": "dec_lens_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_515": {
                "variable": {
                    "value": "sum_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward * torch.stack(step_losses, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_520": {
                "variable": {
                    "value": "rl_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_avg_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum_losses / dec_lens_var.float() * (1 - batch['sensation_scores'])",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float() * batch['sensation_scores']",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_563": {
                "variable": {
                    "value": "sum_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(step_losses, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_568": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_avg_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum_losses / dec_lens_var.float() * (1 - batch['sensation_scores'])",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float() * batch['sensation_scores']",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_604": {
                "variable": {
                    "value": "sum_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(step_losses, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_606": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_avg_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum_losses / dec_lens_var.float() * (1 - batch['sensation_scores'])",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float() * batch['sensation_scores']",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ],
                        [
                            "sum_losses / dec_lens_var.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.oov_emb_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_94": {
                "variable": {
                    "value": "packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(enc_input)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "seq_lens",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_96": {
                "variable": {
                    "value": "(h, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((lstm_out.view(-1, self.args['hidden_size']), c_t), 1)",
                            "Call"
                        ],
                        [
                            "self.out2(output1)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.W_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.p_gen_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 4 + self.args['emb_size']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.oov_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args['hidden_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "s_t_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_decoder.view(-1, self.args['hidden_size']), c_decoder.view(-1, self.args['hidden_size']))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "p_gen_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_t, s_t_hat, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_222": {
                "variable": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_gen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.p_gen_linear(p_gen_input)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(p_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_419": {
                "variable": {
                    "value": "ext_vocab_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_419": {
                "variable": {
                    "value": "ext_vocab_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_423": {
                "variable": {
                    "value": "step_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "step_mask - (ext_vocab_target == EOS_idx).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_484": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_484": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_487": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vocab_dist",
                            "Name"
                        ],
                        [
                            "vocab_dist_.scatter_add(1, enc_batch_extend_vocab, attn_dist_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_487": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_494": {
                "variable": {
                    "value": "step_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "step_mask - (target == EOS_idx).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gather_553": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vocab_dist",
                            "Name"
                        ],
                        [
                            "vocab_dist_.scatter_add(1, enc_batch_extend_vocab, attn_dist_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_553": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_597": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vocab_dist",
                            "Name"
                        ],
                        [
                            "vocab_dist_.scatter_add(1, enc_batch_extend_vocab, attn_dist_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_597": {
                "variable": {
                    "value": "gold_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_640": {
                "variable": {
                    "value": "decoder_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(decoder_vocab, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_644": {
                "tensors": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.v(e)",
                            "Call"
                        ],
                        [
                            "scores.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "tensors": {
                    "value": "(c_t_1, y_t_1_embd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "vocab_dist_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vocab_dist_, extra_zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_317": {
                "*size": {
                    "value": "(batch_size, 2 * self.args['hidden_size'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_527": {
                "input": {
                    "value": "all_step_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_step_mask, dim=1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_556": {
                "variable": {
                    "value": "step_coverage_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(attn_dist, coverage)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_563": {
                "tensors": {
                    "value": "step_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_604": {
                "tensors": {
                    "value": "step_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "*size": {
                    "value": "enc_batch.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_488": {
                "input": {
                    "value": "gold_probs + self.args['eps']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_515": {
                "tensors": {
                    "value": "step_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_554": {
                "input": {
                    "value": "gold_probs + self.args['eps']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_598": {
                "input": {
                    "value": "gold_probs + self.args['eps']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_642": {
                "input": {
                    "value": "decoder_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(decoder_vocab, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sample[t].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "*size": {
                    "value": "(batch_size, batch['max_art_oovs'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_408": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_472": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_556": {
                "input": {
                    "value": "attn_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attn_dist_ / normalization_factor",
                            "BinOp"
                        ],
                        [
                            "attn_dist.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "attn_dist.view(-1, t_k)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_613": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_425": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_435": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.args['max_r']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_450": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.args['max_r']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_496": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_614": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.size(0)",
                            "Call"
                        ],
                        [
                            "enc_input.size(0)",
                            "Call"
                        ],
                        [
                            "input_batch.size(1)",
                            "Call"
                        ],
                        [
                            "all_targets[0].size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "enc_batch.size(0)",
                            "Call"
                        ],
                        [
                            "sample.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.max_r",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_205": {
                "tensors": {
                    "value": "[s_t_1[0][:, i], s_t_1[1][:, i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq/sensation_scorer.py": {
        "torch": {
            "Embedding_27": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "lang.n_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opts['emb_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "PAD_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.convs_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Conv1d(embedding_size, num_filters, filter_size) for filter_size in filter_sizes)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters * len(filter_sizes)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "feat_map2_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F.max_pool1d(feat_map, feat_map.size(2)).squeeze(-1) for feat_map in feat_maps_q]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(feat_map2_q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_66": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_97": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.sigmoid(self.out(feat_map2_q)).squeeze()",
                            "Call"
                        ],
                        [
                            "self.forward(input_batch)",
                            "Call"
                        ],
                        [
                            "self.forward(input_batch)",
                            "Call"
                        ],
                        [
                            "self.forward(input_batch)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['label']",
                            "Subscript"
                        ],
                        [
                            "batch['label']",
                            "Subscript"
                        ],
                        [
                            "batch['label']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_63": {
                "input": {
                    "value": "conv(q_embedded)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_49": {
                "in_channels": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opts['emb_size']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opts['num_filters']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_pool1d_64": {
                "input": {
                    "value": "feat_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "feat_map.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/beam_for_pointer_attn.py": {
        "torch": {
            "stack_145": {
                "variable": {
                    "value": "c_t_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_160": {
                "variable": {
                    "value": "(topk_log_probs, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "self.args['beam_size'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "coverage_t_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_coverage",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_144": {
                "tensors": {
                    "value": "all_state_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_144": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/masked_cross_entropy.py": {
        "torch": {
            "arange_10": {
                "variable": {
                    "value": "seq_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_38": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_42": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils_lcsts.py": {
        "torch": {
            "transpose_140": {
                "variable": {
                    "value": "input_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_141": {
                "variable": {
                    "value": "target_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, max_q, lang, pointer_gen=pointer_gen)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_115": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_123": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_133": {
                "key": {
                    "value": "lambda x: len(x['input_batch'])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_162": {
                "variable": {
                    "value": "input_ext_vocab_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "variable": {
                    "value": "target_ext_vocab_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils_sensation.py": {
        "torch": {
            "cat_144": {
                "variable": {
                    "value": "item_info[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "item_info['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, max_q, lang, pointer_gen=pointer_gen)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(input_txt)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_116": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sort_136": {
                "key": {
                    "value": "lambda x: len(x['input_batch'])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_124": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_126": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils_sensation_lcsts.py": {
        "torch": {
            "transpose_142": {
                "variable": {
                    "value": "input_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_143": {
                "variable": {
                    "value": "target_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_199": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(x_seq, y_seq, s_seq, max_q, lang, pointer_gen=pointer_gen)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_117": {
                "variable": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_135": {
                "key": {
                    "value": "lambda x: len(x['input_batch'])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "reverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_167": {
                "variable": {
                    "value": "input_ext_vocab_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_168": {
                "variable": {
                    "value": "target_ext_vocab_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}