{
    "src/data.py": {
        "torch": {
            "tensor_63": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_74": {
                "variable": {
                    "value": "label_split[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "label[data_split[i]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "data_loader[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset[k]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "cfg['shuffle'][k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg['batch_size'][k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "input_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_collate",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_73": {
                "data": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(dataset)))",
                            "Call"
                        ],
                        [
                            "list(set(idx) - set(data_split[i]))",
                            "Call"
                        ],
                        [
                            "torch.arange(len(label_idx_split[label_i]))[torch.randperm(len(label_idx_split[label_i]))[0]].item()",
                            "Call"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_102": {
                "data": {
                    "value": "label_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iid(dataset['train'], num_users)",
                            "Call"
                        ],
                        [
                            "non_iid(dataset['train'], num_users)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "list(range(cfg['classes_size'])) * shard_per_class",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(label_split)[torch.randperm(len(label_split))].tolist()",
                            "Call"
                        ],
                        [
                            "np.array(label_split).reshape((num_users, -1)).tolist()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_102": {
                "n": {
                    "value": "len(label_split)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_73": {
                "n": {
                    "value": "len(idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_108": {
                "start": {
                    "value": "len(label_idx_split[label_i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_108": {
                "n": {
                    "value": "len(label_idx_split[label_i])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/cifar.py": {
        "torch": {
            "tensor_30": {
                "data": {
                    "value": "self.target[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/folder.py": {
        "torch": {
            "tensor_26": {
                "data": {
                    "value": "self.target[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/imagenet.py": {
        "torch": {
            "tensor_32": {
                "data": {
                    "value": "self.target[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/lm.py": {
        "torch": {
            "tensor_218": {
                "variable": {
                    "value": "token",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(token, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/mnist.py": {
        "torch": {
            "tensor_33": {
                "data": {
                    "value": "self.target[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/omniglot.py": {
        "torch": {
            "tensor_34": {
                "data": {
                    "value": "self.target[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/fed.py": {
        "torch": {
            "multinomial_17": {
                "variable": {
                    "value": "rate_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(cfg['proportion'])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "cfg['num_users']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "cfg['proportion']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_41": {
                "variable": {
                    "value": "idx_i[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(1)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_44": {
                "variable": {
                    "value": "output_idx_i_m",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_97": {
                "variable": {
                    "value": "input_idx_i_m",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(1)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_145": {
                "variable": {
                    "value": "input_idx_i_m",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(1)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_171": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_48": {
                "start": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_76": {
                "variable": {
                    "value": "idx_i[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(1)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_116": {
                "variable": {
                    "value": "output_idx_i_m",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_197": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_198": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_200": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_201": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_80": {
                "start": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_87": {
                "variable": {
                    "value": "output_idx_i_m",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_123": {
                "variable": {
                    "value": "output_idx_i_m",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_232": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_233": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_235": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_236": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_119": {
                "start": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(1)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "input": {
                    "value": "cfg['transformer']['num_heads']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_267": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_268": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_273": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_274": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_276": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_277": {
                "*tensors": {
                    "value": "param_idx[m][k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_136": {
                "start": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_129": {
                "start": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/logger.py": {
        "torch": {
            "SummaryWriter_20": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.log_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/metrics/metrics.py": {
        "torch": {
            "cross_entropy_23": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_24": {
                "variable": {
                    "value": "perplexity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(output, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/conv.py": {
        "torch": {
            "Sequential_60": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cross_entropy_71": {
                "variable": {
                    "value": "output[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "out.masked_fill(label_mask == 0, 0)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "input['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "track",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_28": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cfg['classes_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "out.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GroupNorm_16": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "data_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "track",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_50": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cfg['device']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GroupNorm_18": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GroupNorm_38": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "hidden_size[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_size[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_57": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "hidden_size[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "classes_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['classes_size']",
                            "Subscript"
                        ],
                        [
                            "classes_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_20": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GroupNorm_40": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_size[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "hidden_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_22": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_42": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_size[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Identity_44": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/resnet.py": {
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n1(self.scaler(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n1(self.scaler(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "data_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size[3] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_148": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n4(self.scaler(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_149": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.n1(self.scaler(x)))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.n2(self.scaler(out))))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.n1(self.scaler(x)))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.n2(self.scaler(out))))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.n3(self.scaler(out))))",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n4(self.scaler(out)))",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "out.masked_fill(label_mask == 0, 0)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_157": {
                "variable": {
                    "value": "output[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "output['score']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "input['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "track",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "n2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "track",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_39": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "track",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "n2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "track",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "n3",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "track",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_89": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "variable": {
                    "value": "n4",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size[3] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "track",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ],
                        [
                            "track",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_129": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cfg['classes_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "out.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GroupNorm_19": {
                "variable": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_20": {
                "variable": {
                    "value": "n2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_48": {
                "input": {
                    "value": "self.n2(self.scaler(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GroupNorm_63": {
                "variable": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_64": {
                "variable": {
                    "value": "n2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_65": {
                "variable": {
                    "value": "n3",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_98": {
                "input": {
                    "value": "self.n2(self.scaler(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_99": {
                "input": {
                    "value": "self.n3(self.scaler(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GroupNorm_116": {
                "variable": {
                    "value": "n4",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "hidden_size[3] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_size[3] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_22": {
                "variable": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_23": {
                "variable": {
                    "value": "n2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_67": {
                "variable": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_68": {
                "variable": {
                    "value": "n2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_69": {
                "variable": {
                    "value": "n3",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_118": {
                "variable": {
                    "value": "n4",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_size[3] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GroupNorm_25": {
                "variable": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_26": {
                "variable": {
                    "value": "n2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_71": {
                "variable": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_72": {
                "variable": {
                    "value": "n2",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_73": {
                "variable": {
                    "value": "n3",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_120": {
                "variable": {
                    "value": "n4",
                    "type": "variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "hidden_size[3] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Identity_28": {
                "variable": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_29": {
                "variable": {
                    "value": "n2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_75": {
                "variable": {
                    "value": "n1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_76": {
                "variable": {
                    "value": "n2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_77": {
                "variable": {
                    "value": "n3",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_122": {
                "variable": {
                    "value": "n4",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/transformer.py": {
        "torch": {
            "Embedding_14": {
                "variable": {
                    "value": "self.positional_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "cfg['bptt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_18": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "src.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_18": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_29": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_tokens + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_30": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['transformer']['dropout']",
                            "Subscript"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.matmul(k.transpose(-2, -1)) / self.temperature",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, float('-inf'))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scaler(self.linear_v(v))",
                            "Call"
                        ],
                        [
                            "self._reshape_to_batches(v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.linear_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.linear_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.linear_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_92": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['transformer']['dropout']",
                            "Subscript"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_93": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['hidden_size']))",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_95": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['transformer']['dropout']",
                            "Subscript"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['hidden_size']))",
                            "Call"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_97": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['transformer']['dropout']",
                            "Subscript"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_98": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GELU_100": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GELU_127": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_128": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(model_rate * cfg['transformer']['embedding_size']))",
                            "Call"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "embedding_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['num_tokens']",
                            "Subscript"
                        ],
                        [
                            "num_tokens",
                            "Method Argument"
                        ],
                        [
                            "num_tokens",
                            "Method Argument"
                        ],
                        [
                            "num_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TransformerEncoder_142": {
                "variable": {
                    "value": "self.transformer_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TransformerEncoderLayer(embedding_size, num_heads, hidden_size, dropout, rate)",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['transformer']['num_layers']",
                            "Subscript"
                        ],
                        [
                            "num_layers",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Bernoulli_149": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "cfg['mask_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_161": {
                "variable": {
                    "value": "output[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "output['score']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "input['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(cfg['num_tokens'], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "out.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/utils.py": {
        "torch": {}
    },
    "src/modules/modules.py": {
        "torch": {}
    },
    "src/summary.py": {
        "torch": {
            "zeros_95": {
                "variable": {
                    "value": "summary[module][key][params][name][mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "summary['module'][key]['params'][name]['size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cfg['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "summary[module][key][params][name][mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "summary['module'][key]['params'][name]['size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cfg['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/test.py": {
        "torch": {
            "randn_112": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "SGD_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "m.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_115": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_108": {
                "seed": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "nll_loss_128": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(x)",
                            "Call"
                        ],
                        [
                            "y.masked_fill(mask == 0, 0)",
                            "Call"
                        ],
                        [
                            "y.log_softmax(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(c).repeat(N // c)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/test_classifier.py": {
        "torch": {
            "manual_seed_43": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/test_classifier_fed.py": {
        "torch": {
            "manual_seed_44": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_45": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "input[label_split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "label_split[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/test_transformer.py": {
        "torch": {
            "manual_seed_43": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/test_transformer_fed.py": {
        "torch": {
            "manual_seed_45": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train_classifier.py": {
        "torch": {
            "manual_seed_46": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_66": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('models.{}(model_rate=cfg[\"global_model_rate\"]).to(cfg[\"device\"])'.format(cfg['model_name']))",
                            "Call"
                        ],
                        [
                            "resume(model, cfg['model_tag'], optimizer, scheduler)",
                            "Call"
                        ],
                        [
                            "resume(model, cfg['model_tag'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=list(range(cfg['world_size'])))",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(cfg['world_size']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__104": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train_classifier_fed.py": {
        "torch": {
            "manual_seed_50": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "input[label_split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "label_split[m]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "input[label_split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.label_split",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_174": {
                "start": {
                    "value": "cfg['num_users']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__205": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_174": {
                "n": {
                    "value": "cfg['num_users']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_transformer.py": {
        "torch": {
            "manual_seed_46": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_65": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval('models.{}(model_rate=cfg[\"global_model_rate\"]).to(cfg[\"device\"])'.format(cfg['model_name']))",
                            "Call"
                        ],
                        [
                            "resume(model, cfg['model_tag'], optimizer, scheduler)",
                            "Call"
                        ],
                        [
                            "resume(model, cfg['model_tag'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=list(range(cfg['world_size'])))",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "list(range(cfg['world_size']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__102": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train_transformer_fed.py": {
        "torch": {
            "manual_seed_50": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(cfg['model_tag'].split('_')[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "input[label_split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.label_split",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_148": {
                "start": {
                    "value": "cfg['num_users']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__178": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_148": {
                "n": {
                    "value": "cfg['num_users']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "SGD_262": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MultiStepLR_278": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adamax(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[65535]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_349": {
                "variable": {
                    "value": "input[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_31": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader",
                            "variable"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "pickle_protocol": {
                    "value": "protocol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_41": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_222": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_254": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "m / (m + n) * old_std ** 2 + n / (m + n) * new_std ** 2 + m * n / (m + n) ** 2 * (old_mean - new_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSprop_265": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "StepLR_280": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adamax(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "cfg['step_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg['factor']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_268": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MultiStepLR_282": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adamax(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "cfg['milestones']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg['factor']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adamax_270": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ExponentialLR_284": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adamax(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_286": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adamax(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "cfg['num_epochs']['global']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "cfg['min_lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_289": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adamax(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "cfg['factor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "patience": {
                    "value": "cfg['patience']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "cfg['threshold']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "cfg['min_lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CyclicLR_294": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=lr, momentum=cfg['momentum'], weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optim.Adamax(model.parameters(), lr=lr, weight_decay=cfg['weight_decay'])",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "base_lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_lr": {
                    "value": "10 * cfg['lr']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}