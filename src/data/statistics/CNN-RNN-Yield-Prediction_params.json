{
    "CNN_RNN_corn.py": {
        "tensorflow": {
            "flatten_12": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "P_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None, 16, 1], dtype=tf.float32, name='P_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_26": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "E_t",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv00' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_pooling1d_33": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "average_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_35": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv0' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_pooling1d_43": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "average_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_45": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv1' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_pooling1d_53": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "average_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_57": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "s0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv2' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_pooling1d_61": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "average_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_78": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "S_t",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv1' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_pooling1d_88": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "average_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_90": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv2' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv1d_99": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv3' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flatten_122": {
                "variable": {
                    "value": "e_out1",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t1, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_124": {
                "variable": {
                    "value": "e_out2",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t2, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out2)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_126": {
                "variable": {
                    "value": "e_out3",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t3, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out3)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_128": {
                "variable": {
                    "value": "e_out4",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t4, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out4)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_130": {
                "variable": {
                    "value": "e_out5",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t5, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out5)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_132": {
                "variable": {
                    "value": "e_out6",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t6, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out6)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_136": {
                "variable": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[e_out1, e_out2, e_out3, e_out4, e_out5, e_out6]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_145": {
                "variable": {
                    "value": "s_out1",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t1, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_147": {
                "variable": {
                    "value": "s_out2",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t2, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out2)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_149": {
                "variable": {
                    "value": "s_out3",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t3, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out3)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_151": {
                "variable": {
                    "value": "s_out4",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t4, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out4)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_153": {
                "variable": {
                    "value": "s_out5",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t5, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out5)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_155": {
                "variable": {
                    "value": "s_out6",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t6, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out6)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_160": {
                "variable": {
                    "value": "s_out7",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out7",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t7, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out7)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_162": {
                "variable": {
                    "value": "s_out8",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out8",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t8, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out8)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_164": {
                "variable": {
                    "value": "s_out9",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out9",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t9, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out9)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_166": {
                "variable": {
                    "value": "s_out10",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out10",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t10, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out10)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_169": {
                "variable": {
                    "value": "p_out",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "p_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_P(P_t, f, is_training, var_name='P')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(p_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_175": {
                "variable": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_out1, s_out2, s_out3, s_out4, s_out5, s_out6, s_out7, s_out8, s_out9, s_out10]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([s_out1, s_out2, s_out3, s_out4, s_out5, s_out6, s_out7, s_out8, s_out9, s_out10], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=s_out, num_outputs=40, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(s_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_191": {
                "variable": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[e_out, s_out, p_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([e_out1, e_out2, e_out3, e_out4, e_out5, e_out6], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=e_out, num_outputs=60, activation_fn=tf.nn.relu, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, s_out, p_out], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e_out, shape=[-1, time_step, e_out.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, Ybar], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, Ybar, S_t_extra], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, time_step, e_out.get_shape().as_list()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_201": {
                "variable": {
                    "value": "S_t_extra",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S_t_extra",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(S_t_extra, shape=[-1, time_step, 4])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=[None, 4, 1], dtype=tf.float32, name='S_t_extra')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, time_step, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_202": {
                "variable": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[e_out, Ybar]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_203": {
                "variable": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[e_out, Ybar, S_t_extra]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_221": {
                "variable": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": []
                },
                "cells": {
                    "value": "cells",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "dynamic_rnn_225": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([e_out1, e_out2, e_out3, e_out4, e_out5, e_out6], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=e_out, num_outputs=60, activation_fn=tf.nn.relu, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, s_out, p_out], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e_out, shape=[-1, time_step, e_out.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, Ybar], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, Ybar, S_t_extra], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(output, shape=[-1, output.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=output, num_outputs=1, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=[-1, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, output.get_shape().as_list()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_240": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(output, shape=[-1, output.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=output, num_outputs=1, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=[-1, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_242": {
                "variable": {
                    "value": "Yhat1",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(output, shape=[-1, output.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=output, num_outputs=1, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=[-1, 5])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_246": {
                "variable": {
                    "value": "Yhat2",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(output, shape=[-1, output.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=output, num_outputs=1, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=[-1, 5])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_256": {
                "variable": {
                    "value": "E2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "E",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Y - Yhat",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_258": {
                "variable": {
                    "value": "MSE",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_mean(E2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_259": {
                "variable": {
                    "value": "RMSE",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "MSE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.reduce_mean(E2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "huber_loss_260": {
                "variable": {
                    "value": "Loss",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": []
                },
                "predictions": {
                    "value": "Yhat",
                    "type": "Name",
                    "possible_values": []
                },
                "weights": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "delta": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_607": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_215": {
                "variable": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "DropoutWrapper_217": {
                "variable": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_328": {
                "variable": {
                    "value": "E_t1",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_330": {
                "variable": {
                    "value": "E_t2",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_332": {
                "variable": {
                    "value": "E_t3",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_333": {
                "variable": {
                    "value": "E_t4",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_334": {
                "variable": {
                    "value": "E_t5",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_335": {
                "variable": {
                    "value": "E_t6",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_339": {
                "variable": {
                    "value": "S_t1",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_341": {
                "variable": {
                    "value": "S_t2",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_343": {
                "variable": {
                    "value": "S_t3",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_345": {
                "variable": {
                    "value": "S_t4",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_347": {
                "variable": {
                    "value": "S_t5",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_349": {
                "variable": {
                    "value": "S_t6",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_351": {
                "variable": {
                    "value": "S_t7",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_353": {
                "variable": {
                    "value": "S_t8",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_355": {
                "variable": {
                    "value": "S_t9",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_357": {
                "variable": {
                    "value": "S_t10",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_359": {
                "variable": {
                    "value": "S_t_extra",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t_extra",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_361": {
                "variable": {
                    "value": "P_t",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 16, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "P_t",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_366": {
                "variable": {
                    "value": "Ybar",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Ybar",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_369": {
                "variable": {
                    "value": "Y_t",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Y_t",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_371": {
                "variable": {
                    "value": "Y_t_2",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Y_t_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_374": {
                "variable": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_375": {
                "variable": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_376": {
                "variable": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_380": {
                "variable": {
                    "value": "Yhat1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "Yhat1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(output, indices=[4], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.identity(Yhat1, name='Yhat1')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Yhat1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_408": {
                "variable": {
                    "value": "RMSE",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "RMSE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pow(MSE, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.identity(RMSE, name='RMSE')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "RMSE",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_416": {
                "variable": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_418": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_421": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "./tensorboard",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_258": {
                "input_tensor": {
                    "value": "E2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pow(E, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_323": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_411": {
                "variable": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_399": {
                "name": {
                    "value": "loss_function",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_409": {
                "name": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_413": {
                "variable": {
                    "value": "train_op",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[], dtype=tf.float32, name='learning_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_412": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_406": {
                "value": {
                    "value": "le",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CNN_RNN_soybean.py": {
        "tensorflow": {
            "flatten_14": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "P_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None, 14, 1], dtype=tf.float32, name='P_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_48": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "E_t",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv00' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_pooling1d_53": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "average_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_55": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv0' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_pooling1d_61": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "average_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_63": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv1' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_pooling1d_70": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "average_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_74": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "s0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv2' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_pooling1d_78": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "average_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_95": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "S_t",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv1' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_pooling1d_105": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "average_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_107": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv2' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv1d_116": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'Conv3' + var_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BigX['data']",
                            "Subscript"
                        ],
                        [
                            "np.nan_to_num(X)",
                            "Call"
                        ],
                        [
                            "X[np.logical_not(index_low_yield)]",
                            "Subscript"
                        ],
                        [
                            "tf.contrib.layers.flatten(P_t)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(E_t, filters=8, kernel_size=9, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv00' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv0' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=16, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=20, kernel_size=3, strides=s0, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(S_t, filters=4, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv1' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(X, pool_size=2, strides=2, data_format='channels_last', name='average_pool')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=8, kernel_size=3, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv2' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(X, filters=12, kernel_size=2, strides=1, padding='valid', kernel_initializer=tf.contrib.layers.xavier_initializer(), activation=None, name='Conv3' + var_name, data_format='channels_last', reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(X)",
                            "Call"
                        ],
                        [
                            "dic[str(y)]",
                            "Subscript"
                        ],
                        [
                            "dic[str(2018)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flatten_141": {
                "variable": {
                    "value": "e_out1",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t1, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_143": {
                "variable": {
                    "value": "e_out2",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t2, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out2)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_145": {
                "variable": {
                    "value": "e_out3",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t3, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out3)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_147": {
                "variable": {
                    "value": "e_out4",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t4, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out4)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_149": {
                "variable": {
                    "value": "e_out5",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t5, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out5)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_151": {
                "variable": {
                    "value": "e_out6",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "e_out6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_E(E_t6, f, is_training=is_training, var_name='v1')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(e_out6)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_157": {
                "variable": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[e_out1, e_out2, e_out3, e_out4, e_out5, e_out6]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([e_out1, e_out2, e_out3, e_out4, e_out5, e_out6], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=e_out, num_outputs=40, activation_fn=tf.nn.relu, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(e_out)",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, s_out, p_out], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e_out, shape=[-1, time_step, e_out.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, Ybar, S_t_extra], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_168": {
                "variable": {
                    "value": "s_out1",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t1, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_170": {
                "variable": {
                    "value": "s_out2",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t2, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out2)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_172": {
                "variable": {
                    "value": "s_out3",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t3, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out3)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_174": {
                "variable": {
                    "value": "s_out4",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t4, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out4)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_176": {
                "variable": {
                    "value": "s_out5",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t5, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out5)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_178": {
                "variable": {
                    "value": "s_out6",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t6, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out6)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_183": {
                "variable": {
                    "value": "s_out7",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out7",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t7, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out7)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_185": {
                "variable": {
                    "value": "s_out8",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out8",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t8, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out8)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_187": {
                "variable": {
                    "value": "s_out9",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out9",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t9, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out9)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_189": {
                "variable": {
                    "value": "s_out10",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "s_out10",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_S(S_t10, f, is_training=is_training, var_name='v1S')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(s_out10)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_192": {
                "variable": {
                    "value": "p_out",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "p_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_res_part_P(P_t, f, is_training, var_name='P')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(p_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_198": {
                "variable": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[s_out1, s_out2, s_out3, s_out4, s_out5, s_out6, s_out7, s_out8, s_out9, s_out10]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_207": {
                "variable": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "s_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([s_out1, s_out2, s_out3, s_out4, s_out5, s_out6, s_out7, s_out8, s_out9, s_out10], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=s_out, num_outputs=40, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(s_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_212": {
                "variable": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[e_out, s_out, p_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "variable": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([e_out1, e_out2, e_out3, e_out4, e_out5, e_out6], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=e_out, num_outputs=40, activation_fn=tf.nn.relu, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(e_out)",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, s_out, p_out], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e_out, shape=[-1, time_step, e_out.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, Ybar, S_t_extra], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, time_step, e_out.get_shape().as_list()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_222": {
                "variable": {
                    "value": "S_t_extra",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S_t_extra",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(S_t_extra, shape=[-1, time_step, 4])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(shape=[None, 4, 1], dtype=tf.float32, name='S_t_extra')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, time_step, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_223": {
                "variable": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[e_out, Ybar, S_t_extra]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_250": {
                "variable": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": []
                },
                "cells": {
                    "value": "cells",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "dynamic_rnn_254": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "e_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([e_out1, e_out2, e_out3, e_out4, e_out5, e_out6], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=e_out, num_outputs=40, activation_fn=tf.nn.relu, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(e_out)",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, s_out, p_out], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e_out, shape=[-1, time_step, e_out.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.concat([e_out, Ybar, S_t_extra], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_260": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(output, shape=[-1, output.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=output, num_outputs=1, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=[-1, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, output.get_shape().as_list()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(output, shape=[-1, output.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=output, num_outputs=1, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=[-1, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_271": {
                "variable": {
                    "value": "Yhat1",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(output, shape=[-1, output.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=output, num_outputs=1, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=[-1, 5])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_275": {
                "variable": {
                    "value": "Yhat2",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(output, shape=[-1, output.get_shape().as_list()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=output, num_outputs=1, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), biases_initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, shape=[-1, 5])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_285": {
                "variable": {
                    "value": "E2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "E",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Y - Yhat",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_287": {
                "variable": {
                    "value": "MSE",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_mean(E2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_288": {
                "variable": {
                    "value": "RMSE",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "MSE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.reduce_mean(E2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "huber_loss_289": {
                "variable": {
                    "value": "Loss",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": []
                },
                "predictions": {
                    "value": "Yhat",
                    "type": "Name",
                    "possible_values": []
                },
                "weights": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "delta": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_655": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTMCell_242": {
                "variable": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "DropoutWrapper_246": {
                "variable": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(num_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, output_keep_prob=1.0 - dropout)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cells)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "1.0 - dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_357": {
                "variable": {
                    "value": "E_t1",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_359": {
                "variable": {
                    "value": "E_t2",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_361": {
                "variable": {
                    "value": "E_t3",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_362": {
                "variable": {
                    "value": "E_t4",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_363": {
                "variable": {
                    "value": "E_t5",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_364": {
                "variable": {
                    "value": "E_t6",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 52, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "E_t6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_368": {
                "variable": {
                    "value": "S_t1",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_370": {
                "variable": {
                    "value": "S_t2",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_372": {
                "variable": {
                    "value": "S_t3",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_374": {
                "variable": {
                    "value": "S_t4",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_376": {
                "variable": {
                    "value": "S_t5",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_378": {
                "variable": {
                    "value": "S_t6",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_380": {
                "variable": {
                    "value": "S_t7",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_382": {
                "variable": {
                    "value": "S_t8",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_384": {
                "variable": {
                    "value": "S_t9",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_386": {
                "variable": {
                    "value": "S_t10",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_388": {
                "variable": {
                    "value": "S_t_extra",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "S_t_extra",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_390": {
                "variable": {
                    "value": "P_t",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 14, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "P_t",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_395": {
                "variable": {
                    "value": "Ybar",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Ybar",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_398": {
                "variable": {
                    "value": "Y_t",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Y_t",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_400": {
                "variable": {
                    "value": "Y_t_2",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Y_t_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_403": {
                "variable": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_404": {
                "variable": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_405": {
                "variable": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_409": {
                "variable": {
                    "value": "Yhat1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "Yhat1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(output, indices=[4], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.identity(Yhat1, name='Yhat1')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Yhat1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_439": {
                "variable": {
                    "value": "RMSE",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "RMSE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pow(MSE, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.identity(RMSE, name='RMSE')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "RMSE",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_447": {
                "variable": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_449": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_452": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "logdir": {
                    "value": "./tensorboard",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_287": {
                "input_tensor": {
                    "value": "E2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pow(E, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_352": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_442": {
                "variable": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_428": {
                "name": {
                    "value": "loss_function",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_440": {
                "name": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_444": {
                "variable": {
                    "value": "train_op",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[], dtype=tf.float32, name='learning_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_443": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_437": {
                "value": {
                    "value": "le",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}