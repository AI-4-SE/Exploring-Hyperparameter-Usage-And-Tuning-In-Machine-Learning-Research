{
    "evaluator.py": {
        "sklearn": {
            "roc_auc_score_241": {
                "variable": {
                    "value": "stats_dict[auc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "spec_df.class_label.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "spec_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_curve_242": {
                "variable": {
                    "value": "stats_dict[roc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "spec_df.class_label.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "spec_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_248": {
                "variable": {
                    "value": "stats_dict[ap]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "spec_df.class_label.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "spec_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_recall_curve_249": {
                "variable": {
                    "value": "stats_dict[prc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "spec_df.class_label.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "spec_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_261": {
                "y_true": {
                    "value": "fold_df.class_label.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "fold_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "average_precision_score_263": {
                "y_true": {
                    "value": "fold_df.class_label.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "fold_df.pred_score.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cuda_functions/nms_2D/_ext/nms/__init__.py": {
        "torch": {}
    },
    "cuda_functions/nms_2D/build.py": {
        "torch": {
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cuda_functions/nms_2D/pth_nms.py": {
        "torch": {}
    },
    "cuda_functions/nms_3D/_ext/nms/__init__.py": {
        "torch": {}
    },
    "cuda_functions/nms_3D/build.py": {
        "torch": {
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cuda_functions/nms_3D/pth_nms.py": {
        "torch": {}
    },
    "cuda_functions/roi_align_2D/roi_align/_ext/crop_and_resize/__init__.py": {
        "torch": {}
    },
    "cuda_functions/roi_align_2D/roi_align/build.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cuda_functions/roi_align_2D/roi_align/crop_and_resize.py": {
        "torch": {
            "zeros_like_18": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_38": {
                "variable": {
                    "value": "grad_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_outputs.contiguous()",
                            "Call"
                        ],
                        [
                            "grad_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cuda_functions/roi_align_2D/roi_align/roi_align.py": {
        "torch": {
            "split_26": {
                "variable": {
                    "value": "(x1, y1, x2, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((ny0, nx0, ny0 + nh, nx0 + nw), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((y1, x1, y2, x2), 1)",
                            "Call"
                        ],
                        [
                            "boxes.detach().contiguous()",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ny0, nx0, ny0 + nh, nx0 + nw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y1, x1, y2, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cuda_functions/roi_align_3D/roi_align/_ext/crop_and_resize/__init__.py": {
        "torch": {}
    },
    "cuda_functions/roi_align_3D/roi_align/build.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cuda_functions/roi_align_3D/roi_align/crop_and_resize.py": {
        "torch": {
            "zeros_like_19": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_40": {
                "variable": {
                    "value": "grad_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_outputs.contiguous()",
                            "Call"
                        ],
                        [
                            "grad_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cuda_functions/roi_align_3D/roi_align/roi_align.py": {
        "torch": {
            "split_26": {
                "variable": {
                    "value": "(x1, y1, x2, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((ny0, nx0, ny0 + nh, nx0 + nw), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((y1, x1, y2, x2), 1)",
                            "Call"
                        ],
                        [
                            "boxes.detach().contiguous()",
                            "Call"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ny0, nx0, ny0 + nh, nx0 + nw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y1, x1, y2, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "exec.py": {
        "torch": {
            "Adam_39": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cf.learning_rate[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cf.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/backbone.py": {
        "torch": {
            "Sequential_69": {
                "variable": {
                    "value": "self.C2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*C2_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.C3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*C3_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.C4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*C4_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.C5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*C5_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.C0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(cf.n_channels, start_filts, ks=3, pad=1, norm=cf.norm, relu=cf.relu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.C6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*C6_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_151": {
                "input": {
                    "value": "p5_pre_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P5_conv1(c5_out) + F.interpolate(p6_pre_out, scale_factor=2)",
                            "BinOp"
                        ],
                        [
                            "self.P5_conv1(c5_out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_152": {
                "input": {
                    "value": "p4_pre_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P4_conv1(c4_out) + F.interpolate(p5_pre_out, scale_factor=2)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_153": {
                "input": {
                    "value": "p3_pre_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P3_conv1(c3_out) + F.interpolate(p4_pre_out, scale_factor=2)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_190": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_190": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_64": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "input": {
                    "value": "p6_pre_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P6_conv1(c6_out)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/detection_unet.py": {
        "torch": {
            "cross_entropy_130": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_final(out_features)",
                            "Call"
                        ],
                        [
                            "self.forward(var_img)",
                            "Call"
                        ],
                        [
                            "self.forward(var_img)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "var_seg[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.tensor(self.cf.wce_weights).float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_final(out_features)",
                            "Call"
                        ],
                        [
                            "self.forward(var_img)",
                            "Call"
                        ],
                        [
                            "self.forward(var_img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_final(out_features)",
                            "Call"
                        ],
                        [
                            "self.forward(var_img)",
                            "Call"
                        ],
                        [
                            "self.forward(var_img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "self.cf.wce_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_132": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_final(out_features)",
                            "Call"
                        ],
                        [
                            "self.forward(var_img)",
                            "Call"
                        ],
                        [
                            "self.forward(var_img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_167": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_final(out_features)",
                            "Call"
                        ],
                        [
                            "self.forward(var_img)",
                            "Call"
                        ],
                        [
                            "self.forward(var_img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/mrcnn.py": {
        "torch": {
            "nonzero_187": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_match == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_188": {
                "variable": {
                    "value": "neg_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_match == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "batch_normalized_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_normalized_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_normalized_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_447": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pooled, dim=0)",
                            "Call"
                        ],
                        [
                            "pooled[box_to_level, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_451": {
                "variable": {
                    "value": "box_to_level",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_to_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(box_to_level, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sort(box_to_level)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_454": {
                "variable": {
                    "value": "(_, box_to_level)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_to_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(box_to_level, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sort(box_to_level)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_636": {
                "variable": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(class_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_644": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "class_ids.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_650": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.reshape(cf.rpn_bbox_std_dev, [1, cf.dim * 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_651": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_657": {
                "variable": {
                    "value": "refined_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutils.apply_box_deltas_2D(rois, deltas_specific * std_dev) * scale if cf.dim == 2 else mutils.apply_box_deltas_3D(rois, deltas_specific * std_dev) * scale",
                            "IfExp"
                        ],
                        [
                            "mutils.clip_to_window(cf.window, refined_rois)",
                            "Call"
                        ],
                        [
                            "torch.round(refined_rois)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_709": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(refined_rois[keep], batch_ixs[keep].unsqueeze(1), class_ids[keep].unsqueeze(1).float(), class_scores[keep].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "rpn_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_class(x)",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.permute(*axes)",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.contiguous()",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.view(x.size()[0], -1, 2)",
                            "Call"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "rpn_class_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.linear_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cf.end_filts * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cf.head_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.linear_bbox",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cf.end_filts * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cf.head_classes * 2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_151": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_194": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_class_logits[pos_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.LongTensor([1] * pos_indices.shape[0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_204": {
                "variable": {
                    "value": "roi_probs_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_class_logits[neg_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_206": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg[neg_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.LongTensor([0] * neg_ix.shape[0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_226": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_match == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_226": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_232": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_pred_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_pred_deltas[indices]",
                            "Subscript"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "rpn_pred_deltas",
                            "Method Argument"
                        ],
                        [
                            "rpn_pred_deltas",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_target_deltas[:rpn_pred_deltas.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(sample_deltas)",
                            "Call"
                        ],
                        [
                            "torch.cat([target_deltas, zeros], dim=0)",
                            "Call"
                        ],
                        [
                            "zeros",
                            "variable"
                        ],
                        [
                            "torch.FloatTensor().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_246": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_class_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target_class_ids.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_265": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mrcnn_pred_deltas[positive_roi_ix, positive_roi_class_ids, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mrcnn_target_deltas[positive_roi_ix, :].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_286": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_masks[positive_ix, positive_class_ids, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_masks[positive_ix, :, :].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_323": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.rpn_bbox_std_dev[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_483": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([h, w, h, w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_486": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([h, w, h, w, z, z])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_500": {
                "variable": {
                    "value": "gt_class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_gt_class_ids[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_501": {
                "variable": {
                    "value": "gt_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_gt_masks[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_509": {
                "variable": {
                    "value": "batch_element_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_proposals[:, -1] == b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_509": {
                "variable": {
                    "value": "batch_element_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_584": {
                "variable": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_585": {
                "variable": {
                    "value": "target_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_586": {
                "variable": {
                    "value": "target_class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_class_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_590": {
                "tensors": {
                    "value": "sample_negative_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_591": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max((1, pos_indices.cpu().data.numpy().size))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_592": {
                "variable": {
                    "value": "target_class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_class_ids, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_593": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max((1, pos_indices.cpu().data.numpy().size))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "cf.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_594": {
                "variable": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_deltas, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_595": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max((1, pos_indices.cpu().data.numpy().size))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "*cf.mask_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_596": {
                "variable": {
                    "value": "target_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_masks, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_706": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_846": {
                "variable": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.np_anchors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_871": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_981": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_1018": {
                "variable": {
                    "value": "batch_ixs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.repeat(np.arange(batch_rpn_rois.shape[0]), batch_rpn_rois.shape[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1020": {
                "variable": {
                    "value": "self.rpn_rois_batch_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rpn_rois, batch_ixs.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1033": {
                "variable": {
                    "value": "batch_mrcnn_class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "class_logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1034": {
                "variable": {
                    "value": "batch_mrcnn_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1035": {
                "variable": {
                    "value": "self.batch_mrcnn_class_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_mrcnn_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(class_logits_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1042": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(scale[:self.cf.dim * 2] + [1])[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_145": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_147": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_224": {
                "input": {
                    "value": "rpn_match == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_260": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_279": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_340": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_346": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_355": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_pad_boxes, boxes.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_pad_boxes, rpn_scores.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "rpn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rpn_scores, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_526": {
                "variable": {
                    "value": "negative_roi_bool",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([1] * proposals.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_530": {
                "variable": {
                    "value": "positive_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor().cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max >= (0.5 if cf.dim == 2 else 0.3)",
                            "Compare"
                        ]
                    ]
                }
            },
            "squeeze_530": {
                "variable": {
                    "value": "positive_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_532": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "positive_indices.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_545": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.bbox_std_dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_553": {
                "variable": {
                    "value": "box_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "roi_masks.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_563": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ra2D(cf.mask_shape[0], cf.mask_shape[1], 0)(roi_masks.unsqueeze(1), boxes, box_ids)",
                            "Call"
                        ],
                        [
                            "ra3D(cf.mask_shape[0], cf.mask_shape[1], cf.mask_shape[2], 0)(roi_masks.unsqueeze(1), boxes, box_ids)",
                            "Call"
                        ],
                        [
                            "masks.squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.round(masks)",
                            "Call"
                        ],
                        [
                            "mrcnn_mask[ix][np.arange(boxes.shape[0]), ..., class_ids]",
                            "Subscript"
                        ],
                        [
                            "np.delete(masks, exclude_ix, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_575": {
                "variable": {
                    "value": "negative_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negative_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array([1] * proposals.shape[0])).cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max < (0.1 if cf.dim == 2 else 0.01)",
                            "Compare"
                        ]
                    ]
                }
            },
            "squeeze_575": {
                "variable": {
                    "value": "negative_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_598": {
                "variable": {
                    "value": "sample_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_positive_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "nonzero_662": {
                "input": {
                    "value": "keep_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_scores >= cf.model_min_confidence",
                            "Compare"
                        ]
                    ]
                }
            },
            "from_numpy_905": {
                "variable": {
                    "value": "rpn_match",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rpn_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([-1] * self.np_anchors.shape[0])",
                            "Call"
                        ],
                        [
                            "mutils.gt_anchor_matching(self.cf, self.np_anchors, gt_boxes[b])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rpn_match).cuda()",
                            "Call"
                        ],
                        [
                            "rpn_match",
                            "Method Argument"
                        ],
                        [
                            "rpn_match",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_906": {
                "variable": {
                    "value": "rpn_target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rpn_target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "mutils.gt_anchor_matching(self.cf, self.np_anchors, gt_boxes[b])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rpn_target_deltas).float().cuda()",
                            "Call"
                        ],
                        [
                            "rpn_target_deltas",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_149": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_149": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_261": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_282": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_415": {
                "input": {
                    "value": "ix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ix in range(batch_scores.shape[0])",
                            "Call"
                        ],
                        [
                            "roi_level == level",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(ix)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "ix in range(img_shape[0])",
                            "Call"
                        ],
                        [
                            "ix in range(len(gt_boxes[b]))",
                            "Call"
                        ],
                        [
                            "ix in enumerate(rois)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_529": {
                "input": {
                    "value": "positive_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor().cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max >= (0.5 if cf.dim == 2 else 0.3)",
                            "Compare"
                        ]
                    ]
                }
            },
            "nonzero_574": {
                "input": {
                    "value": "negative_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array([1] * proposals.shape[0])).cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max < (0.1 if cf.dim == 2 else 0.01)",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_600": {
                "variable": {
                    "value": "sample_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_negative_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_601": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max((1, pos_indices.cpu().data.numpy().size))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_603": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max((1, pos_indices.cpu().data.numpy().size))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "cf.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_605": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max((1, pos_indices.cpu().data.numpy().size))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "*cf.mask_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "nonzero_664": {
                "input": {
                    "value": "keep_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_scores >= cf.model_min_confidence",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_1010": {
                "tensors": {
                    "value": "list(o)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_1028": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1046": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_339": {
                "tensors": {
                    "value": "(boxes, scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_345": {
                "tensors": {
                    "value": "(boxes, scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_503": {
                "ndarray": {
                    "value": "batch_gt_boxes[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_519": {
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutils.bbox_overlaps_2D(proposals, gt_boxes)",
                            "Call"
                        ],
                        [
                            "mutils.bbox_overlaps_3D(proposals, gt_boxes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_539": {
                "input": {
                    "value": "positive_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "overlaps[positive_indices, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_672": {
                "input": {
                    "value": "pre_nms_batch_ixs == b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_679": {
                "input": {
                    "value": "bix_class_ids == class_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_701": {
                "tensors": {
                    "value": "(batch_keep, b_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_361": {
                "tensors": {
                    "value": "(boxes, rpn_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_687": {
                "tensors": {
                    "value": "(ix_rois, ix_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_689": {
                "tensors": {
                    "value": "(ix_rois, ix_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_694": {
                "tensors": {
                    "value": "(b_keep, class_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_403": {
                "input": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/retina_net.py": {
        "torch": {
            "nonzero_136": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_137": {
                "variable": {
                    "value": "neg_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "keep_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((keep_ix / fg_probs.shape[1]).unsqueeze(1), (keep_ix % fg_probs.shape[1]).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_219": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pre_nms_scores.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_222": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.reshape(cf.rpn_bbox_std_dev, [1, cf.dim * 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_229": {
                "variable": {
                    "value": "pre_nms_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutils.apply_box_deltas_2D(pre_nms_anchors / scale, pre_nms_deltas * std_dev) * scale if cf.dim == 2 else mutils.apply_box_deltas_3D(pre_nms_anchors / scale, pre_nms_deltas * std_dev) * scale",
                            "IfExp"
                        ],
                        [
                            "mutils.clip_to_window(cf.window, refined_rois)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_266": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pre_nms_rois[keep], pre_nms_batch_ixs[keep].unsqueeze(1).float(), pre_nms_class_ids[keep].unsqueeze(1).float(), pre_nms_scores[keep].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_144": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_pred_logits[pos_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_pos.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "roi_probs_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_pred_logits[neg_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_156": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg[neg_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.LongTensor([0] * neg_ix.shape[0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_177": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_177": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_183": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_deltas[indices]",
                            "Subscript"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "pred_deltas",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_deltas[:pred_deltas.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "target_deltas",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_374": {
                "variable": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.np_anchors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_397": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_466": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_503": {
                "variable": {
                    "value": "batch_ixs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "class_logits.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_503": {
                "variable": {
                    "value": "batch_ixs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_504": {
                "variable": {
                    "value": "flat_class_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits.view(-1, class_logits.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_175": {
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_428": {
                "variable": {
                    "value": "anchor_class_match",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_class_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([-1] * self.np_anchors.shape[0])",
                            "Call"
                        ],
                        [
                            "mutils.gt_anchor_matching(self.cf, self.np_anchors, gt_boxes[b], gt_class_ids[b])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(anchor_class_match).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_429": {
                "variable": {
                    "value": "anchor_target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "mutils.gt_anchor_matching(self.cf, self.np_anchors, gt_boxes[b], gt_class_ids[b])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(anchor_target_deltas).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_232": {
                "input": {
                    "value": "pre_nms_batch_ixs == b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_239": {
                "input": {
                    "value": "bix_class_ids == class_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "(batch_keep, b_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_498": {
                "tensors": {
                    "value": "list(o)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_500": {
                "tensors": {
                    "value": "list(o)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "tensors": {
                    "value": "(ix_rois, ix_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "(ix_rois, ix_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "tensors": {
                    "value": "(b_keep, class_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_331": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "seg_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_331": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/retina_unet.py": {
        "torch": {
            "nonzero_136": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_137": {
                "variable": {
                    "value": "neg_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "keep_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((keep_ix / fg_probs.shape[1]).unsqueeze(1), (keep_ix % fg_probs.shape[1]).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_219": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "pre_nms_scores.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_222": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.reshape(cf.rpn_bbox_std_dev, [1, cf.dim * 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_229": {
                "variable": {
                    "value": "pre_nms_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutils.apply_box_deltas_2D(pre_nms_anchors / scale, pre_nms_deltas * std_dev) * scale if cf.dim == 2 else mutils.apply_box_deltas_3D(pre_nms_anchors / scale, pre_nms_deltas * std_dev) * scale",
                            "IfExp"
                        ],
                        [
                            "mutils.clip_to_window(cf.window, refined_rois)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_266": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pre_nms_rois[keep], pre_nms_batch_ixs[keep].unsqueeze(1).float(), pre_nms_class_ids[keep].unsqueeze(1).float(), pre_nms_scores[keep].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_144": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_pred_logits[pos_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_pos.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "roi_probs_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_pred_logits[neg_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_156": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg[neg_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.LongTensor([0] * neg_ix.shape[0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_177": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_177": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_183": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_deltas[indices]",
                            "Subscript"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "pred_deltas",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_deltas[:pred_deltas.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "target_deltas",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_374": {
                "variable": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.np_anchors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_398": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_447": {
                "variable": {
                    "value": "seg_loss_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.final_conv(fpn_outs[0])",
                            "Call"
                        ],
                        [
                            "seg_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "var_seg[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_471": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_508": {
                "variable": {
                    "value": "batch_ixs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "class_logits.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_508": {
                "variable": {
                    "value": "batch_ixs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_509": {
                "variable": {
                    "value": "flat_class_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits.view(-1, class_logits.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_175": {
                "input": {
                    "value": "anchor_matches > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_429": {
                "variable": {
                    "value": "anchor_class_match",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_class_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([-1] * self.np_anchors.shape[0])",
                            "Call"
                        ],
                        [
                            "mutils.gt_anchor_matching(self.cf, self.np_anchors, gt_boxes[b], gt_class_ids[b])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(anchor_class_match).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_430": {
                "variable": {
                    "value": "anchor_target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "mutils.gt_anchor_matching(self.cf, self.np_anchors, gt_boxes[b], gt_class_ids[b])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(anchor_target_deltas).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_232": {
                "input": {
                    "value": "pre_nms_batch_ixs == b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_239": {
                "input": {
                    "value": "bix_class_ids == class_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "(batch_keep, b_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_446": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.final_conv(fpn_outs[0])",
                            "Call"
                        ],
                        [
                            "seg_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_503": {
                "tensors": {
                    "value": "list(o)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_505": {
                "tensors": {
                    "value": "list(o)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "tensors": {
                    "value": "(ix_rois, ix_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "(ix_rois, ix_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "tensors": {
                    "value": "(b_keep, class_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_331": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.final_conv(fpn_outs[0])",
                            "Call"
                        ],
                        [
                            "seg_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_331": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/ufrcnn.py": {
        "torch": {
            "nonzero_187": {
                "variable": {
                    "value": "pos_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_match == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_188": {
                "variable": {
                    "value": "neg_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_match == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "batch_normalized_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_normalized_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_normalized_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_447": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pooled, dim=0)",
                            "Call"
                        ],
                        [
                            "pooled[box_to_level, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_451": {
                "variable": {
                    "value": "box_to_level",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_to_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(box_to_level, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sort(box_to_level)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_454": {
                "variable": {
                    "value": "(_, box_to_level)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_to_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(box_to_level, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sort(box_to_level)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_610": {
                "variable": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(class_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_618": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "class_ids.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_624": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.reshape(cf.rpn_bbox_std_dev, [1, cf.dim * 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_625": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "round_631": {
                "variable": {
                    "value": "refined_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refined_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutils.apply_box_deltas_2D(rois, deltas_specific * std_dev) * scale if cf.dim == 2 else mutils.apply_box_deltas_3D(rois, deltas_specific * std_dev) * scale",
                            "IfExp"
                        ],
                        [
                            "mutils.clip_to_window(cf.window, refined_rois)",
                            "Call"
                        ],
                        [
                            "torch.round(refined_rois)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_683": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(refined_rois[keep], batch_ixs[keep].unsqueeze(1), class_ids[keep].unsqueeze(1).float(), class_scores[keep].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "rpn_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_class(x)",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.permute(*axes)",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.contiguous()",
                            "Call"
                        ],
                        [
                            "rpn_class_logits.view(x.size()[0], -1, 2)",
                            "Call"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "rpn_class_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.linear_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cf.end_filts * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cf.head_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.linear_bbox",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cf.end_filts * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cf.head_classes * 2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_151": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_194": {
                "variable": {
                    "value": "pos_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_class_logits[pos_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.LongTensor([1] * pos_indices.shape[0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_204": {
                "variable": {
                    "value": "roi_probs_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_class_logits[neg_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_206": {
                "variable": {
                    "value": "neg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roi_logits_neg[neg_ix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.LongTensor([0] * neg_ix.shape[0]).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_226": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_match == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_226": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_232": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rpn_pred_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_pred_deltas[indices]",
                            "Subscript"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "rpn_pred_deltas",
                            "Method Argument"
                        ],
                        [
                            "rpn_pred_deltas",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rpn_target_deltas[:rpn_pred_deltas.size()[0], :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(sample_deltas)",
                            "Call"
                        ],
                        [
                            "torch.cat([target_deltas, zeros], dim=0)",
                            "Call"
                        ],
                        [
                            "zeros",
                            "variable"
                        ],
                        [
                            "torch.FloatTensor().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_246": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_class_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target_class_ids.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_265": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mrcnn_pred_deltas[positive_roi_ix, positive_roi_class_ids, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mrcnn_target_deltas[positive_roi_ix, :].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_286": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_masks[positive_ix, positive_class_ids, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_masks[positive_ix, :, :].detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_323": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.rpn_bbox_std_dev[None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_483": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([h, w, h, w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_486": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([h, w, h, w, z, z])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_499": {
                "variable": {
                    "value": "gt_class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "batch_gt_class_ids[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_507": {
                "variable": {
                    "value": "batch_element_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_proposals[:, -1] == b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_507": {
                "variable": {
                    "value": "batch_element_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_564": {
                "variable": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_565": {
                "variable": {
                    "value": "target_class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_class_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_569": {
                "tensors": {
                    "value": "sample_negative_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_570": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max((1, pos_indices.cpu().data.numpy().size))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_571": {
                "variable": {
                    "value": "target_class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_class_ids, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_572": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max((1, pos_indices.cpu().data.numpy().size))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "cf.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_573": {
                "variable": {
                    "value": "target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_deltas, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_680": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_794": {
                "variable": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.np_anchors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_822": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_897": {
                "variable": {
                    "value": "seg_loss_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.final_conv(fpn_outs[0])",
                            "Call"
                        ],
                        [
                            "seg_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "var_seg[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_928": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "batch['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(img).float().cuda()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_966": {
                "variable": {
                    "value": "batch_ixs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.repeat(np.arange(batch_rpn_rois.shape[0]), batch_rpn_rois.shape[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_968": {
                "variable": {
                    "value": "self.rpn_rois_batch_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rpn_rois, batch_ixs.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_981": {
                "variable": {
                    "value": "batch_mrcnn_class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "class_logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_982": {
                "variable": {
                    "value": "batch_mrcnn_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_983": {
                "variable": {
                    "value": "self.batch_mrcnn_class_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_mrcnn_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(class_logits_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_145": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_147": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cf.end_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_224": {
                "input": {
                    "value": "rpn_match == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_260": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_279": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_340": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_346": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_355": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_pad_boxes, boxes.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_357": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_pad_boxes, rpn_scores.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "rpn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rpn_scores, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_524": {
                "variable": {
                    "value": "negative_roi_bool",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([1] * proposals.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_528": {
                "variable": {
                    "value": "positive_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor().cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max >= (0.5 if cf.dim == 2 else 0.3)",
                            "Compare"
                        ]
                    ]
                }
            },
            "squeeze_528": {
                "variable": {
                    "value": "positive_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_530": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "positive_indices.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_543": {
                "variable": {
                    "value": "std_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cf.bbox_std_dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_555": {
                "variable": {
                    "value": "negative_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negative_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array([1] * proposals.shape[0])).cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max < (0.1 if cf.dim == 2 else 0.01)",
                            "Compare"
                        ]
                    ]
                }
            },
            "squeeze_555": {
                "variable": {
                    "value": "negative_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_575": {
                "variable": {
                    "value": "sample_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_positive_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "nonzero_636": {
                "input": {
                    "value": "keep_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_scores >= cf.model_min_confidence",
                            "Compare"
                        ]
                    ]
                }
            },
            "from_numpy_856": {
                "variable": {
                    "value": "rpn_match",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rpn_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([-1] * self.np_anchors.shape[0])",
                            "Call"
                        ],
                        [
                            "mutils.gt_anchor_matching(self.cf, self.np_anchors, gt_boxes[b])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rpn_match).cuda()",
                            "Call"
                        ],
                        [
                            "rpn_match",
                            "Method Argument"
                        ],
                        [
                            "rpn_match",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_857": {
                "variable": {
                    "value": "rpn_target_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rpn_target_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0])",
                            "Call"
                        ],
                        [
                            "mutils.gt_anchor_matching(self.cf, self.np_anchors, gt_boxes[b])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rpn_target_deltas).float().cuda()",
                            "Call"
                        ],
                        [
                            "rpn_target_deltas",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_149": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_149": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_261": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_282": {
                "input": {
                    "value": "target_class_ids > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_415": {
                "input": {
                    "value": "ix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ix in range(batch_scores.shape[0])",
                            "Call"
                        ],
                        [
                            "roi_level == level",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(ix)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "ix in range(img_shape[0])",
                            "Call"
                        ],
                        [
                            "ix in range(len(gt_boxes[b]))",
                            "Call"
                        ],
                        [
                            "ix in enumerate(rois)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_527": {
                "input": {
                    "value": "positive_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor().cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max >= (0.5 if cf.dim == 2 else 0.3)",
                            "Compare"
                        ]
                    ]
                }
            },
            "nonzero_554": {
                "input": {
                    "value": "negative_roi_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array([1] * proposals.shape[0])).cuda()",
                            "Call"
                        ],
                        [
                            "roi_iou_max < (0.1 if cf.dim == 2 else 0.01)",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_577": {
                "variable": {
                    "value": "sample_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_negative_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_578": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max((1, pos_indices.cpu().data.numpy().size))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_580": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "negative_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.max((1, pos_indices.cpu().data.numpy().size))",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "negative_count + raw_sampled_indices.size()[0]",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "cf.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_638": {
                "input": {
                    "value": "keep_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_scores >= cf.model_min_confidence",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_958": {
                "tensors": {
                    "value": "list(o)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_976": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_339": {
                "tensors": {
                    "value": "(boxes, scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_345": {
                "tensors": {
                    "value": "(boxes, scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_501": {
                "ndarray": {
                    "value": "batch_gt_boxes[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_517": {
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutils.bbox_overlaps_2D(proposals, gt_boxes)",
                            "Call"
                        ],
                        [
                            "mutils.bbox_overlaps_3D(proposals, gt_boxes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_537": {
                "input": {
                    "value": "positive_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "overlaps[positive_indices, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_646": {
                "input": {
                    "value": "pre_nms_batch_ixs == b",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softmax_896": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.final_conv(fpn_outs[0])",
                            "Call"
                        ],
                        [
                            "seg_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_653": {
                "input": {
                    "value": "bix_class_ids == class_id",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_675": {
                "tensors": {
                    "value": "(batch_keep, b_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_361": {
                "tensors": {
                    "value": "(boxes, rpn_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_661": {
                "tensors": {
                    "value": "(ix_rois, ix_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_663": {
                "tensors": {
                    "value": "(ix_rois, ix_scores.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_668": {
                "tensors": {
                    "value": "(b_keep, class_keep)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_752": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.final_conv(fpn_outs[0])",
                            "Call"
                        ],
                        [
                            "seg_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_752": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_403": {
                "input": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "predictor.py": {
        "torch": {
            "load_143": {
                "f": {
                    "value": "weight_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_path in enumerate(weight_paths)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/exp_utils.py": {
        "torch": {
            "load_198": {
                "variable": {
                    "value": "checkpoint_params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_path, 'params.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_189": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': net.state_dict(), 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_dir, 'params.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'params.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/model_utils.py": {
        "torch": {
            "log_130": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_height / height",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_131": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_width / width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dy, dx, dh, dw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_338": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y1, x1, y2, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_369": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y1, x1, y2, x2, z1, z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_379": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes[:, 0].clamp(float(window[0]), float(window[2])), boxes[:, 1].clamp(float(window[1]), float(window[3])), boxes[:, 2].clamp(float(window[0]), float(window[2])), boxes[:, 3].clamp(float(window[1]), float(window[3]))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_391": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes[:, 0].clamp(float(window[0]), float(window[2])), boxes[:, 1].clamp(float(window[1]), float(window[3])), boxes[:, 2].clamp(float(window[0]), float(window[2])), boxes[:, 3].clamp(float(window[1]), float(window[3])), boxes[:, 4].clamp(float(window[4]), float(window[5])), boxes[:, 5].clamp(float(window[4]), float(window[5]))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_653": {
                "variable": {
                    "value": "unique_bool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(first_element, unique_bool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_668": {
                "variable": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor1, tensor2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_688": {
                "variable": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(ohem_poolsize * int(negative_count), order.size()[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_688": {
                "variable": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_690": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "pool_indices.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_140": {
                "variable": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_depth / depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dy, dx, dz, dh, dw, dd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_331": {
                "input": {
                    "value": "deltas[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_332": {
                "input": {
                    "value": "deltas[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_359": {
                "input": {
                    "value": "deltas[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_360": {
                "input": {
                    "value": "deltas[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_361": {
                "input": {
                    "value": "deltas[:, 5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_445": {
                "input": {
                    "value": "b1_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1.chunk(4, dim=1)",
                            "Call"
                        ],
                        [
                            "boxes1.chunk(6, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_446": {
                "input": {
                    "value": "b1_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1.chunk(4, dim=1)",
                            "Call"
                        ],
                        [
                            "boxes1.chunk(6, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_447": {
                "input": {
                    "value": "b1_y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1.chunk(4, dim=1)",
                            "Call"
                        ],
                        [
                            "boxes1.chunk(6, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_448": {
                "input": {
                    "value": "b1_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1.chunk(4, dim=1)",
                            "Call"
                        ],
                        [
                            "boxes1.chunk(6, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_449": {
                "*size": {
                    "value": "y1.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_452": {
                "input": {
                    "value": "y2 - y1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_482": {
                "input": {
                    "value": "b1_y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1.chunk(4, dim=1)",
                            "Call"
                        ],
                        [
                            "boxes1.chunk(6, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_483": {
                "input": {
                    "value": "b1_x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1.chunk(4, dim=1)",
                            "Call"
                        ],
                        [
                            "boxes1.chunk(6, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_484": {
                "input": {
                    "value": "b1_y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1.chunk(4, dim=1)",
                            "Call"
                        ],
                        [
                            "boxes1.chunk(6, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_485": {
                "input": {
                    "value": "b1_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1.chunk(4, dim=1)",
                            "Call"
                        ],
                        [
                            "boxes1.chunk(6, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_486": {
                "input": {
                    "value": "b1_z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1.chunk(6, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_487": {
                "input": {
                    "value": "b1_z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes1.chunk(6, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_488": {
                "*size": {
                    "value": "y1.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_491": {
                "input": {
                    "value": "y2 - y1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_660": {
                "input": {
                    "value": "torch.FloatTensor([2.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_663": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_751": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_762": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_779": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_849": {
                "input": {
                    "value": "((2 * intersect + smooth) / (denom + smooth))[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_882": {
                "input": {
                    "value": "((2 * intersect + smooth) / (denom + smooth))[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_759": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_770": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_774": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_855": {
                "input": {
                    "value": "((2 * intersect + smooth) / (denom + smooth))[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_888": {
                "input": {
                    "value": "((2 * intersect + smooth) / (denom + smooth))[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_754": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm3d_765": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_776": {
                "variable": {
                    "value": "relu_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_756": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_767": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}