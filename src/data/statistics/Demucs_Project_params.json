{
    "demucs/__main__.py": {
        "torch": {
            "Adam_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_65": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_117": {
                "variable": {
                    "value": "saved",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.checkpoints / f'{name}.th'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "augment",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "FlipSign()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_143": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_145": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_190": {
                "variable": {
                    "value": "dmodel",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_model(args.models / args.test)",
                            "Call"
                        ],
                        [
                            "ConvTasNet(audio_channels=args.audio_channels, X=args.X)",
                            "Call"
                        ],
                        [
                            "Demucs(audio_channels=args.audio_channels, channels=args.channels, context=args.context, depth=args.depth, glu=args.glu, growth=args.growth, kernel_size=args.kernel_size, lstm_layers=args.lstm_layers, rescale=args.rescale, rewrite=args.rewrite, sources=4, stride=args.conv_stride, upsample=args.upsample)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[th.cuda.current_device()]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "th.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_74": {
                "device": {
                    "value": "args.rank % th.cuda.device_count()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "saved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.load(checkpoint, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "SavedState()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.checkpoints / f'{name}.th.tmp'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_count_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "demucs/audio.py": {
        "torch": {
            "stack_155": {
                "variable": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "wavs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.fromfile(filename, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(wav)",
                            "Call"
                        ],
                        [
                            "wav.view(-1, self.channels()).t()",
                            "Call"
                        ],
                        [
                            "torch.stack(wavs, dim=0)",
                            "Call"
                        ],
                        [
                            "wav.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "wav[0]",
                            "Subscript"
                        ],
                        [
                            "wav.as_strided(size=(channels, wav.shape[1]), stride=(0, 1))",
                            "Call"
                        ],
                        [
                            "wav[..., :target_size]",
                            "Subscript"
                        ],
                        [
                            "wav[:channels, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "demucs/augment.py": {
        "torch": {
            "randint_40": {
                "variable": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(batch, sources, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "wav.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "wav",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wav.gather(2, left), wav.gather(2, right)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_54": {
                "variable": {
                    "value": "signs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(batch, sources, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "wav.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_85": {
                "variable": {
                    "value": "permutations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.rand(groups, group_size, streams, 1, 1, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_26": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "[batch, sources, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "wav.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_28": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time - self.shift",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "wav.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_85": {
                "*size": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch // group_size",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "group_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.group_size or batch",
                            "BoolOp"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "streams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wav.size()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wav.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "demucs/model.py": {
        "torch": {
            "LSTM_18": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "input_size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_48": {
                "start": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_117": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels + audio_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "sources * audio_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GLU_121": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_129": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio_channels",
                            "variable"
                        ],
                        [
                            "channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "*args": {
                    "value": "*encode",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "*args": {
                    "value": "*decode",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_131": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_scale * channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_143": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch_scale * channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_146": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels",
                            "variable"
                        ],
                        [
                            "sources * audio_channels",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_149": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "int(growth * channels)",
                            "Call"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels",
                            "variable"
                        ],
                        [
                            "sources * audio_channels",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "demucs/raw.py": {
        "torch": {
            "DataLoader_135": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MusDBSet(mus, channels=channels, samplerate=samplerate)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "workers",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda x: x[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_107": {
                "tensors": {
                    "value": "streams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm.tqdm(loader)",
                            "Call"
                        ],
                        [
                            "(streams - ref.mean()) / ref.std()",
                            "BinOp"
                        ],
                        [
                            "entries[entry]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "slice(None)",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "ndarray": {
                    "value": "content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file.read(to_read)",
                            "Call"
                        ],
                        [
                            "np.frombuffer(content, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "demucs/separate.py": {
        "torch": {
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "demucs/tasnet.py": {
        "torch": {
            "arange_56": {
                "variable": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "output_subframes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size // subframe_length",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "signal.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_56": {
                "variable": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "subframes_per_frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_length // subframe_length",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "subframe_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_step // subframe_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randint_419": {
                "variable": {
                    "value": "mixture",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(M, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_422": {
                "variable": {
                    "value": "encoder.conv1d_U.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "encoder.conv1d_U.weight.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_436": {
                "variable": {
                    "value": "est_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(B, K, C, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_128": {
                "variable": {
                    "value": "est_source",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "est_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(mixture_w, est_mask)",
                            "Call"
                        ],
                        [
                            "conv_tasnet(mixture)",
                            "Call"
                        ],
                        [
                            "self.decoder(mixture_w, est_mask)",
                            "Call"
                        ],
                        [
                            "F.pad(est_source, (0, T_origin - T_conv))",
                            "Call"
                        ],
                        [
                            "self.basis_signals(source_w)",
                            "Call"
                        ],
                        [
                            "est_source.view(m, c, k, self.audio_channels, -1).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "overlap_and_add(est_source, self.L // 2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, T_origin - T_conv)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_141": {
                "variable": {
                    "value": "self.conv1d_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "audio_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "audio_channels",
                            "Method Argument"
                        ],
                        [
                            "audio_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "mixture_w.size()",
                            "Call"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "L",
                            "Method Argument"
                        ],
                        [
                            "L",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "L // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "mixture_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1d_U(mixture)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.basis_signals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "mixture_w.size()",
                            "Call"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "audio_channels * L",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_173": {
                "variable": {
                    "value": "source_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(mixture_w, 1) * est_mask",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(source_w, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_205": {
                "variable": {
                    "value": "bottleneck_conv1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "mixture_w.size()",
                            "Call"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_224": {
                "variable": {
                    "value": "temporal_conv_net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*repeats",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_226": {
                "variable": {
                    "value": "mask_conv1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "B",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "C * N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "layer_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_263": {
                "variable": {
                    "value": "conv1x1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_264": {
                "variable": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_270": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_299": {
                "variable": {
                    "value": "depthwise_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(P - 1) * dilation if causal else (P - 1) * dilation // 2",
                            "IfExp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** x",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_309": {
                "variable": {
                    "value": "prelu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_312": {
                "variable": {
                    "value": "pointwise_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_367": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_368": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_382": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "var_383": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_392": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_393": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, channel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_409": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_409": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_415": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_243": {
                "variable": {
                    "value": "est_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network(mixture_w)",
                            "Call"
                        ],
                        [
                            "score.view(M, self.C, N, K)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_315": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "depthwise_conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_317": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "depthwise_conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_172": {
                "input": {
                    "value": "mixture_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder(mixture)",
                            "Call"
                        ],
                        [
                            "self.encoder(mixture)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1d_U(mixture))",
                            "Call"
                        ],
                        [
                            "mixture_w",
                            "Method Argument"
                        ],
                        [
                            "mixture_w",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_245": {
                "variable": {
                    "value": "est_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.network(mixture_w)",
                            "Call"
                        ],
                        [
                            "score.view(M, self.C, N, K)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_223": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Identity_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_359": {
                "num_features": {
                    "value": "channel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel_size",
                            "Method Argument"
                        ],
                        [
                            "channel_size",
                            "Method Argument"
                        ],
                        [
                            "channel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_384": {
                "input": {
                    "value": "var + EPS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_410": {
                "input": {
                    "value": "var + EPS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "demucs/test.py": {
        "torch": {
            "from_numpy_59": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "track.audio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_59": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "references",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.from_numpy(track.targets[name].audio) for name in source_names]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "track.targets[name].audio",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "demucs/train.py": {
        "torch": {
            "DistributedSampler_30": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // world_size",
                            "BinOp"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size // world_size",
                            "BinOp"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "demucs/utils.py": {
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[count, count * metric]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mix.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mix.size()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mix.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_164": {
                "variable": {
                    "value": "(klass, args, kwargs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "load_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "variable"
                        ],
                        [
                            "gzip.open(path, 'rb')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "(klass, args, kwargs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "save_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "variable"
                        ],
                        [
                            "gzip.open(path, 'wb', compresslevel=5)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_126": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(mix, (max_shift, max_shift))",
                            "Call"
                        ],
                        [
                            "mix",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(max_shift, max_shift)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_139": {
                "variable": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(mix, (max_shift, max_shift))",
                            "Call"
                        ],
                        [
                            "mix",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(delta // 2, delta - delta // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "device_count_22": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run_slurm.py": {
        "torch": {
            "device_count_24": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}