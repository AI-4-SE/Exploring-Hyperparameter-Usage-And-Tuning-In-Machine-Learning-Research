{
    "src/systems/audio_systems.py": {
        "sklearn": {},
        "torch": {
            "SGD_103": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_141": {
                "variable": {
                    "value": "(_, neighbor_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_dps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.memory_bank.get_all_dot_products(embs)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "neighbor_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "neighbor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.train_ordered_labels[neighbor_idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(neighbor_labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_148": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbor_labels.cpu() == labels.cpu()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "num_correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(neighbor_labels.cpu() == labels.cpu()).item()",
                            "Call"
                        ],
                        [
                            "torch.tensor(num_correct, dtype=float, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(batch_size, dtype=float, device=self.device)",
                            "Call"
                        ],
                        [
                            "self.config.optim_params.batch_size",
                            "Attribute"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_correct'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_165": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_total'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_166": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_252": {
                "variable": {
                    "value": "encoder_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "variable": {
                    "value": "emb_dict[optimizer_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "optimizer_idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "emb_dict['optimizer_idx']",
                            "Subscript"
                        ],
                        [
                            "emb_dict['optimizer_idx'][0]",
                            "Subscript"
                        ],
                        [
                            "emb_dict['optimizer_idx']",
                            "Subscript"
                        ],
                        [
                            "emb_dict['optimizer_idx'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_355": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_correct'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_355": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_356": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_total'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_356": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_402": {
                "variable": {
                    "value": "encoder_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_473": {
                "variable": {
                    "value": "emb_dict[optimizer_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "optimizer_idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "emb_dict['optimizer_idx']",
                            "Subscript"
                        ],
                        [
                            "emb_dict['optimizer_idx'][0]",
                            "Subscript"
                        ],
                        [
                            "emb_dict['optimizer_idx']",
                            "Subscript"
                        ],
                        [
                            "emb_dict['optimizer_idx'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_514": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_correct'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_514": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_515": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_total'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_515": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_573": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_642": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_813": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_896": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "encoder_model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "encoder_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(mlp_dim, mlp_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_164": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elem[key] for elem in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_261": {
                "variable": {
                    "value": "view_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "view_parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.view.parameters()",
                            "Call"
                        ],
                        [
                            "self.view.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_283": {
                "variable": {
                    "value": "view",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "view",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.view(inputs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(view, view_min, view_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "view_min",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "view_max",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_354": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elem[key] for elem in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_354": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_411": {
                "variable": {
                    "value": "view_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "view_parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.view.parameters()",
                            "Call"
                        ],
                        [
                            "self.view.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_434": {
                "variable": {
                    "value": "view1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "view1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.view(inputs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(view1, view_min, view_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "view_min",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "view_max",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_435": {
                "variable": {
                    "value": "view2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "view2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.view(inputs2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(view2, view_min, view_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "view_min",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "view_max",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_513": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elem[key] for elem in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_513": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_553": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.encoder.children())[:cut_ix]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_613": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_615": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_628": {
                "variable": {
                    "value": "embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.encoder(inputs, layer=layer)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(embs, 2)",
                            "Call"
                        ],
                        [
                            "self.encoder(inputs)",
                            "Call"
                        ],
                        [
                            "embs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.encoder(inputs, layer=layer)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(embs, 2)",
                            "Call"
                        ],
                        [
                            "self.encoder(inputs)",
                            "Call"
                        ],
                        [
                            "embs.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_637": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_676": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[elem[key] for elem in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_676": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_792": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.encoder.children())[:cut_ix]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_859": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_861": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_882": {
                "variable": {
                    "value": "embs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.encoder(inputs, layer=layer)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(embs, 2)",
                            "Call"
                        ],
                        [
                            "self.encoder(inputs)",
                            "Call"
                        ],
                        [
                            "embs.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.encoder(inputs, layer=layer)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(embs, 2)",
                            "Call"
                        ],
                        [
                            "self.encoder(inputs)",
                            "Call"
                        ],
                        [
                            "embs.view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_891": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_930": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[elem[key] for elem in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_930": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_263": {
                "variable": {
                    "value": "view_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "view_parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.view.parameters()",
                            "Call"
                        ],
                        [
                            "self.view.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.viewmaker_learning_rate or self.config.optim_params.learning_rate",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_413": {
                "variable": {
                    "value": "view_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "view_parameters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.view.parameters()",
                            "Call"
                        ],
                        [
                            "self.view.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.viewmaker_learning_rate or self.config.optim_params.learning_rate",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_649": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_878": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.viewmaker(inputs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(inputs, view_min, view_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "view_min",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "view_max",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ],
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_903": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "mlp_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_model.fc.weight.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mlp_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_model.fc.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_346": {
                "data": {
                    "value": "num_correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(neighbor_labels.cpu() == labels.cpu()).item()",
                            "Call"
                        ],
                        [
                            "torch.tensor(num_correct, dtype=float, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "data": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(batch_size, dtype=float, device=self.device)",
                            "Call"
                        ],
                        [
                            "self.config.optim_params.batch_size",
                            "Attribute"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_505": {
                "data": {
                    "value": "num_correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(neighbor_labels.cpu() == labels.cpu()).item()",
                            "Call"
                        ],
                        [
                            "torch.tensor(num_correct, dtype=float, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_506": {
                "data": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(batch_size, dtype=float, device=self.device)",
                            "Call"
                        ],
                        [
                            "self.config.optim_params.batch_size",
                            "Attribute"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/systems/image_systems.py": {
        "sklearn": {
            "f1_score_639": {
                "variable": {
                    "value": "val_f1_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "val_true_labels[:, c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "val_pred_labels[:, c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_32": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img_embs.size(0)",
                            "Call"
                        ],
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "img.size(0)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.data_loader_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_215": {
                "variable": {
                    "value": "(_, neighbor_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_dps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.memory_bank.get_all_dot_products(img_embs)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_220": {
                "variable": {
                    "value": "neighbor_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "neighbor_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.train_ordered_labels[neighbor_idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(neighbor_labels).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_222": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbor_labels.cpu() == labels.cpu()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "emb_dict[optimizer_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "optimizer_idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "emb_dict['optimizer_idx']",
                            "Subscript"
                        ],
                        [
                            "emb_dict['optimizer_idx'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_278": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_correct'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_278": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_279": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_total'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_279": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_309": {
                "variable": {
                    "value": "encoder_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder_params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "list(self.model.parameters()) + [self.t]",
                            "BinOp"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_510": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_733": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "encoder_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(mlp_dim, mlp_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.491, 0.482, 0.446]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "imgs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.247, 0.243, 0.261]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "imgs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_318": {
                "variable": {
                    "value": "view_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "view_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.viewmaker.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.viewmaker_learning_rate or 0.001",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "AdamW_406": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder_params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "list(self.model.parameters()) + [self.t]",
                            "BinOp"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_408": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder_params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "list(self.model.parameters()) + [self.t]",
                            "BinOp"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_485": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.encoder.children())[:-1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_565": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_567": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds.cpu() == label.cpu()",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_572": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_574": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds == label.long().cpu()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_625": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_correct'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_625": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_626": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_total'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_626": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_634": {
                "variable": {
                    "value": "val_pred_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_pred_labels'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_635": {
                "variable": {
                    "value": "val_true_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_true_labels'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_664": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_iterator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_666": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_iterator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_703": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.encoder.children())[:-1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_274": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elem[key] for elem in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_274": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_321": {
                "variable": {
                    "value": "view_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "view_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.viewmaker.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.viewmaker_learning_rate or self.config.optim_params.learning_rate",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_555": {
                "input": {
                    "value": "torch.sigmoid(logits).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "label.view(-1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_558": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(img, valid)",
                            "Call"
                        ],
                        [
                            "self.forward(img, valid)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_580": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_620": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[elem[key] for elem in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_620": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "mlp_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_model.fc.weight.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mlp_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_model.fc.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_117": {
                "*size": {
                    "value": "shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(batch_size, self.config.model_params.noise_dim)",
                            "Tuple"
                        ],
                        [
                            "(batch_size, self.pretrain_config.model_params.noise_dim)",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_264": {
                "data": {
                    "value": "num_correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(neighbor_labels.cpu() == labels.cpu()).item()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds.cpu() == label.cpu(), dim=0)",
                            "Call"
                        ],
                        [
                            "num_correct.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds == label.long().cpu()).item()",
                            "Call"
                        ],
                        [
                            "num_correct.mean()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs], dim=1).sum(1)",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_correct'] for out in outputs])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "data": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img_embs.size(0)",
                            "Call"
                        ],
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "img.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_388": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_452": {
                "data": {
                    "value": "num_correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(neighbor_labels.cpu() == labels.cpu()).item()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds.cpu() == label.cpu(), dim=0)",
                            "Call"
                        ],
                        [
                            "num_correct.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds == label.long().cpu()).item()",
                            "Call"
                        ],
                        [
                            "num_correct.mean()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs], dim=1).sum(1)",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_correct'] for out in outputs])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_453": {
                "data": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img_embs.size(0)",
                            "Call"
                        ],
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "img.size(0)",
                            "Call"
                        ],
                        [
                            "img.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_526": {
                "*size": {
                    "value": "shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(batch_size, self.config.model_params.noise_dim)",
                            "Tuple"
                        ],
                        [
                            "(batch_size, self.pretrain_config.model_params.noise_dim)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "sigmoid_555": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(img, valid)",
                            "Call"
                        ],
                        [
                            "self.forward(img, valid)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_565": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(img, valid)",
                            "Call"
                        ],
                        [
                            "self.forward(img, valid)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_572": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(img, valid)",
                            "Call"
                        ],
                        [
                            "self.forward(img, valid)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_588": {
                "data": {
                    "value": "num_correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(neighbor_labels.cpu() == labels.cpu()).item()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds.cpu() == label.cpu(), dim=0)",
                            "Call"
                        ],
                        [
                            "num_correct.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds == label.long().cpu()).item()",
                            "Call"
                        ],
                        [
                            "num_correct.mean()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs], dim=1).sum(1)",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_correct'] for out in outputs])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_589": {
                "data": {
                    "value": "num_total",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([out['val_num_total'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "torch.stack([out['val_num_total'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_total'] for out in outputs])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_590": {
                "data": {
                    "value": "num_correct / float(num_total)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_601": {
                "data": {
                    "value": "num_correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(neighbor_labels.cpu() == labels.cpu()).item()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds.cpu() == label.cpu(), dim=0)",
                            "Call"
                        ],
                        [
                            "num_correct.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds == label.long().cpu()).item()",
                            "Call"
                        ],
                        [
                            "num_correct.mean()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs], dim=1).sum(1)",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_correct'] for out in outputs])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_602": {
                "data": {
                    "value": "num_total",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([out['val_num_total'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "torch.stack([out['val_num_total'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_total'] for out in outputs])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_603": {
                "data": {
                    "value": "num_correct / float(num_total)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_611": {
                "data": {
                    "value": "num_correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(neighbor_labels.cpu() == labels.cpu()).item()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds.cpu() == label.cpu(), dim=0)",
                            "Call"
                        ],
                        [
                            "num_correct.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds == label.long().cpu()).item()",
                            "Call"
                        ],
                        [
                            "num_correct.mean()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs], dim=1).sum(1)",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_correct'] for out in outputs])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_612": {
                "data": {
                    "value": "num_total",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([out['val_num_total'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ],
                        [
                            "torch.stack([out['val_num_total'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_total'] for out in outputs])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_613": {
                "data": {
                    "value": "num_correct / float(num_total)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/eval_cifar10_c.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.cifar.CIFAR10(CIFAR_DIR, train=False, download=True, transform=image_transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_69": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda', args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_99": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_87": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "predict(encoder, model, images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/run_audio.py": {
        "torch": {
            "manual_seed_103": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_104": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/run_image.py": {
        "torch": {
            "manual_seed_89": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_90": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/run_meta_transfer.py": {
        "torch": {
            "manual_seed_89": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_90": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/run_sensor.py": {
        "torch": {
            "manual_seed_80": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_81": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/audio_mnist.py": {
        "torch": {
            "from_numpy_96": {
                "variable": {
                    "value": "spectrum",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_101": {
                "input": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/datasets/cifar10.py": {
        "torch": {}
    },
    "src/datasets/datasets.py": {
        "torch": {}
    },
    "src/datasets/fluent_speech.py": {
        "torch": {
            "from_numpy_132": {
                "variable": {
                    "value": "spectrum",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_137": {
                "input": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/datasets/google_speech.py": {
        "torch": {
            "from_numpy_99": {
                "variable": {
                    "value": "spectrum",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_104": {
                "input": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/datasets/librispeech.py": {
        "torch": {
            "from_numpy_157": {
                "variable": {
                    "value": "spectrum",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_301": {
                "variable": {
                    "value": "spectrum",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_162": {
                "input": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_306": {
                "input": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/datasets/meta_datasets/aircraft.py": {
        "torch": {}
    },
    "src/datasets/meta_datasets/cu_birds.py": {
        "torch": {}
    },
    "src/datasets/meta_datasets/dtd.py": {
        "torch": {}
    },
    "src/datasets/meta_datasets/fashionmnist.py": {
        "torch": {}
    },
    "src/datasets/meta_datasets/fungi.py": {
        "torch": {}
    },
    "src/datasets/meta_datasets/mnist.py": {
        "torch": {}
    },
    "src/datasets/meta_datasets/mscoco.py": {
        "torch": {}
    },
    "src/datasets/meta_datasets/traffic_sign.py": {
        "torch": {}
    },
    "src/datasets/meta_datasets/vgg_flower.py": {
        "torch": {}
    },
    "src/datasets/mscoco.py": {
        "torch": {}
    },
    "src/datasets/pamap2.py": {
        "torch": {
            "tensor_96": {
                "variable": {
                    "value": "spectrogram",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "spectrogram.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "measurements.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/voxceleb1.py": {
        "torch": {
            "from_numpy_110": {
                "variable": {
                    "value": "spectrum",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_115": {
                "input": {
                    "value": "spectrum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "librosa.feature.melspectrogram(padded, sample_rate, hop_length=hop_length_dict[self.input_size], n_mels=self.input_size)",
                            "Call"
                        ],
                        [
                            "transforms(spectrum)",
                            "Call"
                        ],
                        [
                            "librosa.power_to_db(spectrum ** 2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(spectrum).float()",
                            "Call"
                        ],
                        [
                            "spectrum.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "spectrum + noise",
                            "BinOp"
                        ],
                        [
                            "normalize(spectrum)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/mlp.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden_size, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_12": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/resnet.py": {
        "torch": {
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_122": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_127": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "low_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/resnet_small.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512 * block.expansion * (4 if input_size == 64 else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_104": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/transfer.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/viewmaker.py": {
        "torch": {
            "InstanceNorm2d_50": {
                "variable": {
                    "value": "self.in1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_52": {
                "variable": {
                    "value": "self.in2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_54": {
                "variable": {
                    "value": "self.in3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_65": {
                "variable": {
                    "value": "self.in4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_67": {
                "variable": {
                    "value": "self.in5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "bound_multiplier",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bound_multiplier",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.tensor(bound_multiplier, device=x.device)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_115": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pixels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_159": {
                "variable": {
                    "value": "self.reflection_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "reflection_padding",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_160": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_178": {
                "variable": {
                    "value": "self.in1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_180": {
                "variable": {
                    "value": "self.in2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_202": {
                "variable": {
                    "value": "self.reflection_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "reflection_padding",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_203": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "(x, noise)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_125": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x, size=(self.downsample_to, self.downsample_to), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "x_orig",
                            "Name"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.downsample_to, self.downsample_to)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_143": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tanh(y_pixels)",
                            "Call"
                        ],
                        [
                            "delta * max_magnitude / (avg_magnitude + eps)",
                            "BinOp"
                        ],
                        [
                            "self.get_delta(y_pixels)",
                            "Call"
                        ],
                        [
                            "dct.idct_2d(delta)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(delta, size=x_orig.shape[-2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x_orig.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_148": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + delta",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(result, 0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_209": {
                "variable": {
                    "value": "x_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_in",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "torch.nn.functional.interpolate(x_in, mode='nearest', scale_factor=self.upsample)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_86": {
                "*size": {
                    "value": "shp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(batch_size, num, filter_size, filter_size)",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/objectives/adversarial.py": {
        "torch": {}
    },
    "src/objectives/infonce.py": {
        "torch": {
            "randint_30": {
                "variable": {
                    "value": "noise_indx",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "self.data_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, self.k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_34": {
                "input": {
                    "value": "witness_norm / self.t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_36": {
                "input": {
                    "value": "witness_score / self.t - witness_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/objectives/memory_bank.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "mb_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.einsum('abc,abc->ab', differences, differences)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_16": {
                "variable": {
                    "value": "self._bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_31": {
                "input": {
                    "value": "self._bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idxs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "input": {
                    "value": "vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vec.view(vec_shape)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(self._bank, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "prods",
                    "type": "Name",
                    "possible_values": [
                        [
                            "memory_vecs * vec",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_46": {
                "equation": {
                    "value": "abc,abc->ab",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "differences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._bank.unsqueeze(0) - emb_batch.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_52": {
                "input": {
                    "value": "self._bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "index_select_64": {
                "variable": {
                    "value": "memory_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "idxs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_71": {
                "variable": {
                    "value": "memory_vecs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "flat_idxs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "idxs.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/objectives/simclr.py": {
        "torch": {
            "sum_20": {
                "variable": {
                    "value": "witness_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.outputs1 * self.outputs2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "outputs12",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.outputs1, self.outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_26": {
                "input": {
                    "value": "witness_norm / self.t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_27": {
                "input": {
                    "value": "witness_score / self.t - witness_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/systems/sensor_systems.py": {
        "torch": {
            "SGD_99": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_137": {
                "variable": {
                    "value": "(_, neighbor_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_dps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.memory_bank.get_all_dot_products(embs)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_141": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbor_labels.cpu() == labels.cpu()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "num_correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(neighbor_labels.cpu() == labels.cpu()).item()",
                            "Call"
                        ],
                        [
                            "torch.tensor(num_correct, dtype=float, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds == label.long().cpu()).item()",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_correct'] for out in outputs])",
                            "Call"
                        ],
                        [
                            "torch.sum(preds == label.long().cpu()).item()",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_correct'] for out in outputs])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(batch_size, dtype=float, device=self.device)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_158": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_correct'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_159": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_total'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_159": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_251": {
                "variable": {
                    "value": "encoder_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_320": {
                "variable": {
                    "value": "emb_dict[optimizer_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "optimizer_idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "emb_dict['optimizer_idx']",
                            "Subscript"
                        ],
                        [
                            "emb_dict['optimizer_idx'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_358": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_correct'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_358": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_359": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out['val_num_total'] for out in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_359": {
                "variable": {
                    "value": "num_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_417": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_493": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_495": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds == label.long().cpu()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "argmax_605": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(logits, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_607": {
                "variable": {
                    "value": "num_correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds == label.long().cpu()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "load_686": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(base_dir, 'checkpoints', checkpoint_name)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "encoder_model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "encoder_model.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(mlp_dim, mlp_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_157": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elem[key] for elem in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_157": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_260": {
                "variable": {
                    "value": "view_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "view_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.view.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_283": {
                "variable": {
                    "value": "view1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "view1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.view(inputs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(view1, view_min, view_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "view_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "view_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_284": {
                "variable": {
                    "value": "view2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "view2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.view(inputs2)",
                            "Call"
                        ],
                        [
                            "torch.clamp(view2, view_min, view_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "view_min",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean - tot_std",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "view_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.train_dataset.normalize_mean + tot_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_357": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[elem[key] for elem in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_357": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_394": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.encoder.children())[:cut_ix]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_464": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "list(self.model.parameters()) + list(self.encoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "list(self.model.parameters()) + list(self.encoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_466": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "list(self.model.parameters()) + list(self.encoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "list(self.model.parameters()) + list(self.encoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_488": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(inputs1, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs1, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_526": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[elem[key] for elem in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_526": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_587": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "list(self.model.parameters()) + list(self.encoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "list(self.model.parameters()) + list(self.encoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_589": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "list(self.model.parameters()) + list(self.encoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ],
                        [
                            "list(self.model.parameters()) + list(self.encoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "self.model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_600": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(inputs1, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs1, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_638": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[elem[key] for elem in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_638": {
                "variable": {
                    "value": "metrics[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_262": {
                "variable": {
                    "value": "view_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "view_parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.view.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.config.optim_params.viewmaker_learning_rate or self.config.optim_params.learning_rate",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.config.optim_params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config.optim_params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_493": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(inputs1, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs1, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_501": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_605": {
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.forward(inputs1, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs1, train=train)",
                            "Call"
                        ],
                        [
                            "self.forward(inputs, train=train)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_613": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "mlp_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_model.linear.weight.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mlp_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_model.linear.weight.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_349": {
                "data": {
                    "value": "num_correct",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(neighbor_labels.cpu() == labels.cpu()).item()",
                            "Call"
                        ],
                        [
                            "torch.tensor(num_correct, dtype=float, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.stack([out['val_num_correct'] for out in outputs]).sum()",
                            "Call"
                        ],
                        [
                            "torch.sum(preds == label.long().cpu()).item()",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_correct'] for out in outputs])",
                            "Call"
                        ],
                        [
                            "torch.sum(preds == label.long().cpu()).item()",
                            "Call"
                        ],
                        [
                            "sum([out['val_num_correct'] for out in outputs])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_350": {
                "data": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(batch_size, dtype=float, device=self.device)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/setup.py": {
        "torch": {
            "device_count_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/utils.py": {
        "torch": {
            "save_38": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_75": {
                "input": {
                    "value": "torch.sum(x ** 2, dim=dim).unsqueeze(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_75": {
                "input": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}