{
    "criteria.py": {
        "torch": {}
    },
    "dataloaders/dataloader.py": {
        "torch": {}
    },
    "dataloaders/transforms.py": {
        "torch": {
            "is_tensor_32": {
                "obj": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "enhancer.enhance(brightness_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(contrast_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(saturation_factor)",
                            "Call"
                        ],
                        [
                            "Image.merge('HSV', (h, s, v)).convert(input_mode)",
                            "Call"
                        ],
                        [
                            "img.convert('RGB')",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np_img, 'RGB').convert(input_mode)",
                            "Call"
                        ],
                        [
                            "t(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img.transpose((2, 0, 1)).copy())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img.copy())",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_216": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose((2, 0, 1)).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "inferenceCode.py": {
        "torch": {
            "load_106": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/home/ebad/spadRGBD/results/rgbd8/model_best.pth.tar'",
                            "Constant"
                        ],
                        [
                            "'/home/ebad/spadRGBD/results/d40/model_best.pth.tar'",
                            "Constant"
                        ]
                    ]
                }
            },
            "synchronize_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inferenceCode_B.py": {
        "torch": {
            "load_103": {
                "variable": {
                    "value": "scripted_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/home/ebad/spadRGBD/modelrgbd40.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "set_printoptions_39": {
                "profile": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NYUDataset(valdir, type='val', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ],
                        [
                            "KITTIDataset(valdir, type='val', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NYUDataset(traindir, type='train', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ],
                        [
                            "KITTIDataset(traindir, type='train', modality=args.modality, sparsifier=sparsifier)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda work_id: np.random.seed(work_id)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "empty_cache_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.evaluate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "chkpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.resume",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics.py": {
        "torch": {
            "max_44": {
                "variable": {
                    "value": "maxRatio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output / target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_7": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pow_38": {
                "input": {
                    "value": "abs_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(output - target).abs()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_54": {
                "input": {
                    "value": "abs_inv_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inv_output - inv_target).abs()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model_trace.py": {
        "torch": {
            "load_82": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/home/ebad/spadRGBD/results/rgbd40/model_best.pth.tar'",
                            "Constant"
                        ]
                    ]
                }
            },
            "trace_110": {
                "variable": {
                    "value": "scripted_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "checkpoint['model']",
                            "Subscript"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_115": {
                "obj": {
                    "value": "scripted_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.jit.trace(model, input_tensor.cuda()).eval()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "/home/ebad/spadRGBD/modelrgbd40.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Sequential_87": {
                "variable": {
                    "value": "upconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "collections.OrderedDict([('unpool', Unpool(in_channels)), ('conv', nn.Conv2d(in_channels, in_channels // 2, kernel_size=5, stride=1, padding=2, bias=False)), ('batchnorm', nn.BatchNorm2d(in_channels // 2)), ('relu', nn.ReLU())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "2048",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_193": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channels // 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_198": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv_transpose2d_21": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.unpool(x)",
                            "Call"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.upper_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "collections.OrderedDict([('conv1', nn.Conv2d(in_channels, out_channels, kernel_size=5, stride=1, padding=2, bias=False)), ('batchnorm1', nn.BatchNorm2d(out_channels)), ('relu', nn.ReLU()), ('conv2', nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1, bias=False)), ('batchnorm2', nn.BatchNorm2d(out_channels))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.bottom_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "collections.OrderedDict([('conv', nn.Conv2d(in_channels, out_channels, kernel_size=5, stride=1, padding=2, bias=False)), ('batchnorm', nn.BatchNorm2d(out_channels))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_170": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "2048",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "collections.OrderedDict([(module_name, nn.ConvTranspose2d(in_channels, in_channels // 2, kernel_size, stride, padding, output_padding, bias=False)), ('batchnorm', nn.BatchNorm2d(in_channels // 2)), ('relu', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_72": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(decoder[6])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kernel_size % 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_123": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "save_71": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(output_directory, 'checkpoint-' + str(epoch) + '.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}