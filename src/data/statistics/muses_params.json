{
    "dataset.py": {
        "torch": {
            "from_numpy_318": {
                "variable": {
                    "value": "out_prop_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(out_prop_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_319": {
                "variable": {
                    "value": "out_prop_reg_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(out_prop_reg_targets, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_320": {
                "variable": {
                    "value": "out_prop_type",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(out_prop_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_335": {
                "variable": {
                    "value": "ft_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ft_full_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(self.ft_path, orig_video_id + self.ft_file_ext)",
                            "Call"
                        ],
                        [
                            "osp.join(self.ft_path, video_id + self.ft_file_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_342": {
                "variable": {
                    "value": "ft_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ft_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(ft_full_path)",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.load(ft_full_path)",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='bytes')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_380": {
                "variable": {
                    "value": "ft_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ft_full_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(self.ft_path, orig_video_id + self.ft_file_ext)",
                            "Call"
                        ],
                        [
                            "osp.join(self.ft_path, video_id + self.ft_file_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_387": {
                "variable": {
                    "value": "ft_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ft_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(ft_full_path)",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.load(ft_full_path)",
                            "Call"
                        ],
                        [
                            "pickle.load(f, encoding='bytes')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "padded_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.window_size - real_len, ft_tensor.shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "slice_tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "slice_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(slice_tensor, padded_ft)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_410": {
                "ndarray": {
                    "value": "np.array(rel_prop_list)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1024, 256]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Sequential_48": {
                "variable": {
                    "value": "self.Act_MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_mlp(self.act_net_dims)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.Comp_MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*make_mlp(self.comp_net_dims)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.activity_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "act_fc_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.act_net_dims[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_class + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.completeness_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "loc_fc_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.comp_net_dims[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.regressor_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "loc_fc_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.comp_net_dims[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * self.num_class",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "variable": {
                    "value": "yx_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "yx_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[1, len(y_offset) * 2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_177": {
                "variable": {
                    "value": "offset_replicator",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0], 1, x.shape[2], x.shape[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_216": {
                "variable": {
                    "value": "self.branches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "branches",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[TALayer(input_channels, per_branch_out_chn, kernel_sizes[i], unit_sizes[i]) for i in range(len(unit_sizes))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand([out_channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_185": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(shape[0], shape[1], 1, shape[2])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_186": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base_offset * offset_replicator",
                            "BinOp"
                        ],
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_330": {
                "ndarray": {
                    "value": "rois_with_batch_ind.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_146": {
                "*size": {
                    "value": "[out_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_223": {
                "tensors": {
                    "value": "branch_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[l(x) for l in self.branches]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_225": {
                "tensors": {
                    "value": "[x.unsqueeze(0) for x in branch_outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_225": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ops/dcn/deform_conv.py": {
        "torch": {
            "zeros_like_159": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "grad_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_161": {
                "variable": {
                    "value": "grad_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_162": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_163": {
                "variable": {
                    "value": "grad_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_228": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_281": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 2 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_354": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_399": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_415": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "deform_conv(x, offset, self.weight, self.stride, self.padding, self.dilation, self.groups, self.deformable_groups)",
                            "Call"
                        ],
                        [
                            "out[:, :, :out.size(2) - pad_h, :out.size(3) - pad_w].contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_416": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_417": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_249": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_250": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_358": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "grad_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_87": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "ops/model_ops.py": {
        "torch": {
            "cat_65": {
                "variable": {
                    "value": "stpp_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_parts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "out_act_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_out, self.act_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "out_comp_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_out, self.comp_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "src.size()[0]",
                            "Subscript"
                        ],
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "slopes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "src.size()[0]",
                            "Subscript"
                        ],
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sort_190": {
                "variable": {
                    "value": "(sorted_losses, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(n_sample)",
                            "Call"
                        ],
                        [
                            "losses.view(-1, group_size).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_208": {
                "variable": {
                    "value": "grad_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ctx.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_221": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_250": {
                "variable": {
                    "value": "self.smooth_l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "class_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.diag(prep[:, :, 0]).view(-1, 1), torch.diag(prep[:, :, 1]).view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "out_reg_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_out, self.reg_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_53": {
                "variable": {
                    "value": "ticks",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "stage_len + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stage_len / n_part",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_255": {
                "input": {
                    "value": "prep[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_256": {
                "input": {
                    "value": "prep[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "ops/roi_pool/roi_pool.py": {
        "torch": {}
    },
    "ops/utils.py": {
        "torch": {}
    },
    "setup.py": {
        "torch": {
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_net.py": {
        "torch": {
            "manual_seed_30": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "777",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "777",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_96": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_53": {
                "device": {
                    "value": "gpu_id",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "act_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_out, num_class + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "comp_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_out, num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "reg_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_out, num_class * 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_net.py": {
        "torch": {
            "manual_seed_24": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "777",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "777",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VideoDataSet(dataset_configs, prop_file=dataset_configs['train_prop_file'], ft_path=dataset_configs['train_ft_path'], epoch_multiplier=dataset_configs['training_epoch_multiplier'], test_mode=False, crop_windows=dataset_configs.get('crop_windows', False), window_size=dataset_configs.get('window_size', None))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataSet(dataset_configs, prop_file=dataset_configs['test_prop_file'], ft_path=dataset_configs['test_ft_path'], epoch_multiplier=dataset_configs['testing_epoch_multiplier'], reg_stats=train_loader.dataset.stats, test_mode=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_124": {
                "variable": {
                    "value": "activity_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "policies",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.get_optim_policies()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_378": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.snapshot_pref + '_'.join((args.dataset, 'epoch', str(epoch), filename))",
                            "BinOp"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_84": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_155": {
                "obj": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'best_loss': 1000, 'reg_stats': torch.from_numpy(train_loader.dataset.stats)}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "latest_ckpt_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.snapshot_pref + '_'.join((args.dataset, 'latest', 'checkpoint.pth.tar'))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_153": {
                "ndarray": {
                    "value": "train_loader.dataset.stats",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}