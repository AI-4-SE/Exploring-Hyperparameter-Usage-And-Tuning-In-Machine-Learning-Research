{
    "gailtf/algo/behavior_clone.py": {
        "tensorflow": {
            "reduce_mean_45": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(ac - pi.ac)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_45": {
                "x": {
                    "value": "ac - pi.ac",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "gailtf/algo/trpo_mpi.py": {
        "tensorflow": {
            "Graph_185": {
                "variable": {
                    "value": "original_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_187": {
                "variable": {
                    "value": "param_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "original_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_433": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_434": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_436": {
                "variable": {
                    "value": "lrmult",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lrmult",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_454": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_458": {
                "variable": {
                    "value": "vf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(pi.vpred - ret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_706": {
                "variable": {
                    "value": "original_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_707": {
                "variable": {
                    "value": "param_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "original_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "import_meta_graph_193": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "saved_model_path + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clear_devices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "import_meta_graph_711": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "saved_model_path + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clear_devices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_by_value_456": {
                "t": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(pi.pd.logp(ac) - oldpi.pd.logp(ac))",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - clip_param",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + clip_param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_457": {
                "input_tensor": {
                    "value": "tf.minimum(surr1, surr2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_458": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_457": {
                "x": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * atarg",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "surr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_467": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gailtf/baselines/common/distributions.py": {
        "tensorflow": {
            "constant_133": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_134": {
                "variable": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "available_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "available_action",
                            "Method Argument"
                        ],
                        [
                            "available_action",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_135": {
                "variable": {
                    "value": "available_act",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(available_action, zero)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(available_action, zero)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_136": {
                "variable": {
                    "value": "available_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "available_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where)",
                            "Call"
                        ],
                        [
                            "tf.where(where)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_138": {
                "variable": {
                    "value": "index_for_available_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "available_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self.logits, available_act)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(self.logits, available_act)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(available_logits, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(available_logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_147": {
                "variable": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.logits.get_shape().as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_154": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_155": {
                "variable": {
                    "value": "ea1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other.logits - U.max(other.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_162": {
                "variable": {
                    "value": "ea0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_174": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "not_equal_175": {
                "variable": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "available_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "available_action",
                            "Method Argument"
                        ],
                        [
                            "available_action",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_176": {
                "variable": {
                    "value": "available_act",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "where",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(available_action, zero)",
                            "Call"
                        ],
                        [
                            "tf.not_equal(available_action, zero)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_180": {
                "variable": {
                    "value": "available_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "available_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(where)",
                            "Call"
                        ],
                        [
                            "tf.where(where)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_184": {
                "variable": {
                    "value": "available_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "available_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self.logits, available_act)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(self.logits, available_act)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(available_logits, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(available_logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "available_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "available_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self.logits, available_act)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(self.logits, available_act)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(available_logits, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(available_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.entropy()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_198": {
                "variable": {
                    "value": "index_for_available_act",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(ent, tf.constant(0.1))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f2",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f1",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_215": {
                "variable": {
                    "value": "self.low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": [
                        [
                            "low",
                            "Method Argument"
                        ],
                        [
                            "low",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_238": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_241": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(axis=len(flat.shape) - 1, num_or_size_splits=2, value=flat)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_264": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_47": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_148": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "one_hot_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_168": {
                "input_tensor": {
                    "value": "-tf.nn.softmax(self.logits) * tf.nn.log_softmax(self.logits)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_222": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x - self.low, axis=len(x.get_shape()) - 1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_224": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_228": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "round_268": {
                "x": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_277": {
                "x": {
                    "value": "math_ops.less(u, self.ps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "tensor": {
                    "value": "tf.multinomial(available_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_194": {
                "x": {
                    "value": "tf.reshape(tf.random_uniform([], maxval=tf.count_nonzero(available_action, dtype=tf.float32) - 1), [])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_199": {
                "x": {
                    "value": "ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.entropy(), [])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_220": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_230": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_270": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_274": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_276": {
                "input": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_277": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_302": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_168": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_191": {
                "logits": {
                    "value": "available_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(self.logits, available_act)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(self.logits, available_act)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(available_logits, 0)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(available_logits)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_194": {
                "tensor": {
                    "value": "tf.random_uniform([], maxval=tf.count_nonzero(available_action, dtype=tf.float32) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_199": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "split_216": {
                "value": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ],
                        [
                            "flat",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "high - low + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_220": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_230": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_272": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_159": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_165": {
                "x": {
                    "value": "z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_168": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_248": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_256": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_270": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unstack_222": {
                "value": {
                    "value": "x - self.low",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(x.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_247": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_248": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_252": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_194": {
                "input": {
                    "value": "available_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "available_action",
                            "Method Argument"
                        ],
                        [
                            "available_action",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gailtf/baselines/common/misc_util.py": {
        "tensorflow": {
            "set_random_seed_76": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gailtf/baselines/common/mpi_adam.py": {
        "tensorflow": {
            "Variable_57": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(3).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(2, 5).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_62": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "stepsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "float"
                        ],
                        [
                            "stepsize",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_random_seed_55": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_65": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_69": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_70": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.sin(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_59": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(3).astype('float32'))",
                            "Call"
                        ],
                        [
                            "stepsize * np.sqrt(1 - self.beta2 ** self.t) / (1 - self.beta1 ** self.t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_59": {
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(2, 5).astype('float32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gailtf/baselines/common/mpi_running_mean_std.py": {
        "tensorflow": {
            "get_variable_8": {
                "variable": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsum",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsumsq",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_25": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._sum / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.to_float(self._sumsq / self._count) - tf.square(self.mean), 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_26": {
                "x": {
                    "value": "tf.to_float(self._sumsq / self._count) - tf.square(self.mean)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_11": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_16": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_21": {
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_26": {
                "x": {
                    "value": "self._sumsq / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_32": {
                "ref": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_33": {
                "ref": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsumsq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='var')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_34": {
                "ref": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newcount",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[], dtype=tf.float64, name='count')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gailtf/baselines/common/tests/test_tf_util.py": {
        "tensorflow": {
            "Variable_12": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "42.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_16": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "other",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "gailtf/baselines/common/tf_util.py": {
        "tensorflow": {
            "cond_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(condition, 'bool')",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : then_expression",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : else_expression",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ConfigProto_225": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cpu",
                            "Method Argument"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cpu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_337": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/w'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_338": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_347": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/V'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(x.get_shape()[1]), size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_349": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/g'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_350": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_353": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_622": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_667": {
                "variable": {
                    "value": "inds0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inds0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inds0, tf.int64)",
                            "Call"
                        ],
                        [
                            "inds0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_668": {
                "variable": {
                    "value": "inds1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inds1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inds1, tf.int64)",
                            "Call"
                        ],
                        [
                            "inds1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_669": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_671": {
                "variable": {
                    "value": "Xflat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_725": {
                "variable": {
                    "value": "lengths_b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lengths_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(lengths_b)",
                            "Call"
                        ],
                        [
                            "lengths_b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_19": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_24": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_33": {
                "x": {
                    "value": "var(x, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_38": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_43": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_47": {
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "arrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_191": {
                "condition": {
                    "value": "tf.abs(x) < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(x) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (tf.abs(x) - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_230": {
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_262": {
                "variable": {
                    "value": "set_endpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_272": {
                "logdir": {
                    "value": "dir_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dir_path",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "get_session().graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_279": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_280": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_287": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Saver_288": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_322": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size[0], filter_size[1], int(x.get_shape()[3]), num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-w_bound, w_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_324": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_340": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_424": {
                "variable": {
                    "value": "self.update_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_625": {
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(grad if grad is not None else tf.zeros_like(v), [numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_637": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_644": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_652": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(v, [numel(v)]) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "gather_672": {
                "params": {
                    "value": "Xflat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "inds0 * ncols + inds1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_697": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES if trainable_only else tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "IfExp",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope if isinstance(scope, str) else scope.name",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_748": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(X), tf.int64)",
                            "Call"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_758": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, intprod(x.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_766": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_29": {
                "x": {
                    "value": "x - meanx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_65": {
                "x": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condition",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_n_80": {
                "inputs": {
                    "value": "[sum(tf.square(p)) for p in params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "shape_91": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variables_initializer_244": {
                "var_list": {
                    "value": "new_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set(tf.global_variables()) - ALREADY_INITIALIZED",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_302": {
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=0, keepdims=True)))",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "self._call(*args)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_308": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_354": {
                "x": {
                    "value": "sum(tf.square(v), axis=0, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_355": {
                "tensor": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g / tf.sqrt(sum(tf.square(v), axis=0, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_363": {
                "x": {
                    "value": "pkeep + tf.random_uniform(tf.shape(x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_491": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_491": {
                "variable": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": []
                },
                "main": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "feed_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "dict(zip(self.nondata_inputs, nondata_vals))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "feed_dict",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_collection_536": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_541": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_669": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_705": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_727": {
                "input": {
                    "value": "lengths_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(lengths_b)",
                            "Call"
                        ],
                        [
                            "lengths_b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_92": {
                "x": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(X))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_149": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_167": {
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'(unnamed)'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_169": {
                "x": {
                    "value": "super().get()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_192": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_193": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_322": {
                "minval": {
                    "value": "-w_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "w_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(6.0 / (fan_in + fan_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_328": {
                "name": {
                    "value": "summary_tag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "tf.transpose(tf.reshape(w, [filter_size[0], filter_size[1], -1, 1]), [2, 0, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_images": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_333": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_348": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_349": {
                "value": {
                    "value": "init_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_350": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_517": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "not self.first_time",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_norm_624": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_734": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_194": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_norm_210": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_329": {
                "a": {
                    "value": "tf.reshape(w, [filter_size[0], filter_size[1], -1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_354": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_626": {
                "tensor": {
                    "value": "grad if grad is not None else tf.zeros_like(v)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_642": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_80": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_329": {
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[filter_size[0], filter_size[1], -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_363": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_642": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(X), tf.int64)",
                            "Call"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_652": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_626": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ],
                        [
                            "zip(shapes, var_list)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gailtf/baselines/logger.py": {
        "tensorflow": {
            "as_bytes_108": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gailtf/baselines/ppo1/cnn_policy.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.dense(x, 256, 'lin', U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_52": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_54": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.dense(x, 512, 'lin', U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gailtf/baselines/ppo1/mlp_policy.py": {
        "tensorflow": {
            "conv2d_53": {
                "variable": {
                    "value": "mconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.reshape(minimap, [-1, self.msize, self.msize, 5])",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_60": {
                "variable": {
                    "value": "mpool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=tf.reshape(minimap, [-1, self.msize, self.msize, 5]), filters=32, kernel_size=[5, 5], padding='same', kernel_initializer=U.normc_initializer(0.01), activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "mconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mpool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=mconv1, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "vffcmconv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_69": {
                "variable": {
                    "value": "mpool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=mpool1, filters=64, kernel_size=[5, 5], padding='same', kernel_initializer=U.normc_initializer(0.01), activation=tf.nn.leaky_relu, name='vffcmconv2')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "mpool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mpool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=mconv2, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 16 * 16 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "variable": {
                    "value": "sconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.reshape(screen, [-1, self.ssize, self.ssize, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_79": {
                "variable": {
                    "value": "spool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=tf.reshape(screen, [-1, self.ssize, self.ssize, 10]), filters=48, kernel_size=[5, 5], padding='same', kernel_initializer=U.normc_initializer(0.01), activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_80": {
                "variable": {
                    "value": "sconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "spool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=sconv1, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "U.normc_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_87": {
                "variable": {
                    "value": "spool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=spool1, filters=80, kernel_size=[5, 5], padding='same', kernel_initializer=U.normc_initializer(0.01), activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "spool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "spool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=sconv2, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 16 * 16 * 80]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_90": {
                "variable": {
                    "value": "info_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layers.flatten(info)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "aa_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layers.flatten(available_action)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_99": {
                "variable": {
                    "value": "l1_action",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layers.flatten(last_action)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "input_to_rnn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "l1_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(layers.flatten(last_action), 256, tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 16, 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_101": {
                "variable": {
                    "value": "action_lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "HIDDEN_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unstack_103": {
                "variable": {
                    "value": "inputs_rnn",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_to_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(l1_action, [-1, 16, 16])",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "static_rnn_104": {
                "variable": {
                    "value": "(rnn_outputs, rnn_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "action_lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=HIDDEN_SIZE, forget_bias=1.0, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs_rnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unstack(input_to_rnn, num=16, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_106": {
                "variable": {
                    "value": "l2_action",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rnn_state[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_108": {
                "variable": {
                    "value": "last_acs_ph_lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "l2_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(rnn_state[-1], 128, tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mpool2_flat, spool2_flat, info_fc, aa_fc, last_acs_ph_lstm]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_113": {
                "variable": {
                    "value": "vf_last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "U.dense(last_out, 1024, 'vf_last_out', weight_init=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, pdtype.param_shape()[0] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_170": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_172": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_99": {
                "structure": {
                    "value": "last_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.get_placeholder(shape=(None, 524), dtype=tf.float32, name='last_action_one_hot')",
                            "Call"
                        ],
                        [
                            "last_action",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "minimap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz[:, 0:5 * self.msize * self.msize]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.msize, self.msize, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "screen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz[:, 5 * self.msize * self.msize:5 * self.msize * self.msize + 10 * self.ssize * self.ssize]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.ssize, self.ssize, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_90": {
                "structure": {
                    "value": "info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz[:, 5 * self.msize * self.msize + 10 * self.ssize * self.ssize:5 * self.msize * self.msize + 10 * self.ssize * self.ssize + self.isize]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flatten_94": {
                "structure": {
                    "value": "available_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ob[:, 5 * self.msize * self.msize + 10 * self.ssize * self.ssize + self.isize:5 * self.msize * self.msize + 10 * self.ssize * self.ssize + self.isize + self.available_action_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gailtf/baselines/ppo1/mlp_policy_backup.py": {
        "tensorflow": {
            "clip_by_value_27": {
                "variable": {
                    "value": "obz",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(ob - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_30": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "U.dense(last_out, hid_size, 'vffc%i' % (i + 1), weight_init=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "U.dense(last_out, hid_size, 'polfc%i' % (i + 1), weight_init=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, pdtype.param_shape()[0] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_73": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_75": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gailtf/baselines/ppo1/mlp_policy_cnn.py": {
        "tensorflow": {
            "clip_by_value_28": {
                "variable": {
                    "value": "obz",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(ob - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-20.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "20.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "conv1_minimap",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.reshape(minimap, [-1, self.msize, self.msize, 5])",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "polmconv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_56": {
                "variable": {
                    "value": "pool1_minimap",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1_minimap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=tf.reshape(minimap, [-1, self.msize, self.msize, 5]), filters=10, kernel_size=5, strides=1, padding='same', activation=tf.nn.leaky_relu, name='polmconv1')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "polmpool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_62": {
                "variable": {
                    "value": "conv2_minimap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1_minimap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv1_minimap, pool_size=4, strides=4, name='polmpool1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "polmconv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_63": {
                "variable": {
                    "value": "pool2_minimap",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_minimap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool1_minimap, 10, 5, 1, 'same', activation=tf.nn.relu, name='polmconv2')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "polmpool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "flat_minimap",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool2_minimap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv2_minimap, 2, 2, name='polmpool2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8 * 8 * 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "conv1_screen",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.reshape(screen, [-1, self.ssize, self.ssize, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "polsconv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_79": {
                "variable": {
                    "value": "pool1_screen",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1_screen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=tf.reshape(screen, [-1, self.ssize, self.ssize, 10]), filters=20, kernel_size=5, strides=1, padding='same', activation=tf.nn.leaky_relu, name='polsconv1')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "polspool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_85": {
                "variable": {
                    "value": "conv2_screen",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1_screen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv1_screen, pool_size=4, strides=4, name='polspool1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "polsconv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pooling2d_86": {
                "variable": {
                    "value": "pool2_screen",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_screen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool1_screen, 20, 5, 1, 'same', activation=tf.nn.relu, name='polsconv2')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "polspool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "flat_screen",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool2_screen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(conv2_screen, 2, 2, name='polspool2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8 * 8 * 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_93": {
                "variable": {
                    "value": "info_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layers.flatten(info)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "poldense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_98": {
                "variable": {
                    "value": "aa_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layers.flatten(available_action)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "poldense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[flat_minimap, flat_screen, info_fc, aa_fc]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "polconcat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_31": {
                "variable": {
                    "value": "last_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "U.dense(last_out, hid_size, 'vffc%i' % (i + 1), weight_init=U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_109": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, pdtype.param_shape()[0] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_144": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_146": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "minimap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz[:, 0:5 * self.msize * self.msize]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.msize, self.msize, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "tensor": {
                    "value": "screen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz[:, 5 * self.msize * self.msize:5 * self.msize * self.msize + 10 * self.ssize * self.ssize]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.ssize, self.ssize, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_93": {
                "structure": {
                    "value": "info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz[:, 5 * self.msize * self.msize + 10 * self.ssize * self.ssize:5 * self.msize * self.msize + 10 * self.ssize * self.ssize + self.isize]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flatten_98": {
                "structure": {
                    "value": "available_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz[:, 5 * self.msize * self.msize + 10 * self.ssize * self.ssize + self.isize:5 * self.msize * self.msize + 10 * self.ssize * self.ssize + self.isize + self.available_action_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_initializer_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gailtf/baselines/ppo1/pposgd_simple.py": {
        "tensorflow": {
            "placeholder_140": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "lrmult",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lrmult",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_155": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_159": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_158": {
                "x": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio * atarg",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "surr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.clip(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_168": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gailtf/baselines/trpo_mpi/nosharing_cnn_policy.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "stochastic",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.dense(x, 128, 'lin', U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.dense(x, 128, 'lin', U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_52": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_54": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gailtf/baselines/trpo_mpi/trpo_mpi.py": {
        "tensorflow": {
            "placeholder_150": {
                "variable": {
                    "value": "atarg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_164": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_180": {
                "variable": {
                    "value": "klgrads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meankl",
                            "variable"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in all_var_list if v.name.split('/')[1].startswith('pol')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_181": {
                "variable": {
                    "value": "flat_tangent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_tan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_189": {
                "variable": {
                    "value": "gvp",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[U.sum(g * tangent) for (g, tangent) in zipsame(klgrads, tangents)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "square_162": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "tensor": {
                    "value": "flat_tangent[start:start + sz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "assign_192": {
                "ref": {
                    "value": "oldv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gailtf/common/statistics.py": {
        "tensorflow": {
            "merge_30": {
                "variable": {
                    "value": "self.summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.scalar_summaries + self.histogram_summaries",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.scalar.summary'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_21": {
                "variable": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.scalar.summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', None, name=k + '.scalar.summary')",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', None, name=k + '.histogram.summary')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.histogram.summary'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_26": {
                "variable": {
                    "value": "sm",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "k + '.histogram.summary'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float32', None, name=k + '.scalar.summary')",
                            "Call"
                        ],
                        [
                            "tf.placeholder('float32', None, name=k + '.histogram.summary')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gailtf/common/tf_util.py": {
        "tensorflow": {
            "softplus_5": {
                "features": {
                    "value": "-a",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_8": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gailtf/network/adversary.py": {
        "tensorflow": {
            "reduce_mean_35": {
                "variable": {
                    "value": "generator_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.nn.sigmoid(generator_logits) < 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_37": {
                "variable": {
                    "value": "expert_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.nn.sigmoid(expert_logits) > 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_42": {
                "variable": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, self.generator_last_action_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(generator_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=generator_logits, labels=tf.zeros_like(generator_logits))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(generator_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_44": {
                "variable": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, self.expert_last_action_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(expert_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_45": {
                "variable": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "expert_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=expert_logits, labels=tf.ones_like(expert_logits))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(expert_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_47": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[generator_logits, expert_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logit_bernoulli_entropy(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.generator_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "observations_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.generator_acs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 524)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "actions_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "self.generator_last_action_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 524)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "last_actions_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.expert_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + self.observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "expert_observations_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.expert_acs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 524)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "expert_actions_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.expert_last_action_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 524)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "expert_last_actions_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_91": {
                "variable": {
                    "value": "mconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.reshape(minimap, [-1, self.msize, self.msize, 5])",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_97": {
                "variable": {
                    "value": "mpool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=tf.reshape(minimap, [-1, self.msize, self.msize, 5]), filters=32, kernel_size=[5, 5], padding='same', activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "mconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mpool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=mconv1, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_104": {
                "variable": {
                    "value": "mpool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=mpool1, filters=64, kernel_size=[5, 5], padding='same', activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "mpool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mpool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=mconv2, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 16 * 16 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_107": {
                "variable": {
                    "value": "sconv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.reshape(screen, [-1, self.ssize, self.ssize, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_113": {
                "variable": {
                    "value": "spool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=tf.reshape(screen, [-1, self.ssize, self.ssize, 10]), filters=48, kernel_size=[5, 5], padding='same', activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_114": {
                "variable": {
                    "value": "sconv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "spool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=sconv1, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pooling2d_120": {
                "variable": {
                    "value": "spool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "sconv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=spool1, filters=80, kernel_size=[5, 5], padding='same', activation=tf.nn.leaky_relu)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "spool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "spool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=sconv2, pool_size=[2, 2], strides=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 16 * 16 * 80]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_132": {
                "variable": {
                    "value": "acs_ph_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acs_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "acs_ph",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_133": {
                "variable": {
                    "value": "acs_ph_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acs_ph_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(acs_ph)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(acs_ph_temp, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_146": {
                "variable": {
                    "value": "last_acs_ph_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_acs_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_acs_ph",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_147": {
                "variable": {
                    "value": "last_acs_ph_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_acs_ph_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(last_acs_ph)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(last_acs_ph_temp, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_152": {
                "variable": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mpool2_flat, spool2_flat, info_fc, aa_fc, acs_ph_dense_output, last_acs_ph_dense_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_160": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_35": {
                "x": {
                    "value": "tf.nn.sigmoid(generator_logits) < 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_float_37": {
                "x": {
                    "value": "tf.nn.sigmoid(expert_logits) > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_42": {
                "input": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, self.generator_last_action_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_44": {
                "input": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, self.expert_last_action_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_123": {
                "structure": {
                    "value": "info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz[:, 5 * self.msize * self.msize + 10 * self.ssize * self.ssize:5 * self.msize * self.msize + 10 * self.ssize * self.ssize + self.isize]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flatten_127": {
                "structure": {
                    "value": "available_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_ph[:, 5 * self.msize * self.msize + 10 * self.ssize * self.ssize + self.isize:5 * self.msize * self.msize + 10 * self.ssize * self.ssize + self.isize + self.available_action_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flatten_142": {
                "structure": {
                    "value": "acs_ph_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(acs_ph)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(acs_ph_temp, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_148": {
                "structure": {
                    "value": "last_acs_ph_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(last_acs_ph)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(last_acs_ph_temp, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_35": {
                "x": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, self.generator_last_action_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_37": {
                "x": {
                    "value": "expert_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.expert_obs_ph, self.expert_acs_ph, self.expert_last_action_ph, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_57": {
                "x": {
                    "value": "1 - tf.nn.sigmoid(generator_logits) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "tensor": {
                    "value": "minimap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz[:, 0:5 * self.msize * self.msize]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.msize, self.msize, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "tensor": {
                    "value": "screen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obz[:, 5 * self.msize * self.msize:5 * self.msize * self.msize + 10 * self.ssize * self.ssize]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.ssize, self.ssize, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "x": {
                    "value": "generator_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_graph(self.generator_obs_ph, self.generator_acs_ph, self.generator_last_action_ph, reuse=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}