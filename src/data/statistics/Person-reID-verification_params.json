{
    "evaluate_gpu.py": {
        "torch": {
            "zeros_12": {
                "variable": {
                    "value": "cam_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_17": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "query",
                    "type": "Name",
                    "possible_values": [
                        [
                            "qf.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_117": {
                "variable": {
                    "value": "mq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mquery_feature[mquery_index, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_rerank.py": {
        "torch": {}
    },
    "model.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "add_block",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*add_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*classifier",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_63": {
                "variable": {
                    "value": "model_ft.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_98": {
                "variable": {
                    "value": "model_ft.features.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "model_ft.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_118": {
                "variable": {
                    "value": "model_ft.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.add_block(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.model.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.classifier.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x0, x1), 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_148": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(self.part, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_149": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_193": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(self.part, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_174": {
                "variable": {
                    "value": "part[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_bottleneck",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "num_bottleneck",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "num_bottleneck",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "model/drop0.75-lr0.08-a1/model.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "add_block",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*add_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*classifier",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_63": {
                "variable": {
                    "value": "model_ft.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_98": {
                "variable": {
                    "value": "model_ft.features.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "model_ft.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_118": {
                "variable": {
                    "value": "model_ft.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.add_block(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.model.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.classifier.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x0, x1), 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_148": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(self.part, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_149": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_193": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(self.part, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_174": {
                "variable": {
                    "value": "part[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_bottleneck",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "num_bottleneck",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "num_bottleneck",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "model/drop0.75-lr0.08-a1/train.py": {
        "torch": {
            "is_available_131": {
                "variable": {
                    "value": "use_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_317": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_353": {
                "variable": {
                    "value": "exp_lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_ft",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optim.SGD([{'params': base_params, 'lr': 0.1 * opt.lr}, {'params': model.model.fc.parameters(), 'lr': opt.lr}, {'params': model.classifier.parameters(), 'lr': opt.lr}, {'params': model_verif.classifier.parameters(), 'lr': opt.lr}], weight_decay=0.0005, momentum=0.9, nesterov=True)",
                            "Call"
                        ],
                        [
                            "optim.SGD([{'params': base_params, 'lr': 0.001}, {'params': model.model.fc.parameters(), 'lr': 0.01}, {'params': model.classifier0.parameters(), 'lr': 0.01}, {'params': model.classifier1.parameters(), 'lr': 0.01}, {'params': model.classifier2.parameters(), 'lr': 0.01}, {'params': model.classifier3.parameters(), 'lr': 0.01}, {'params': model.classifier4.parameters(), 'lr': 0.01}, {'params': model.classifier5.parameters(), 'lr': 0.01}], weight_decay=0.0005, momentum=0.9, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[40, 60]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_322": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': base_params, 'lr': 0.1 * opt.lr}, {'params': model.model.fc.parameters(), 'lr': opt.lr}, {'params': model.classifier.parameters(), 'lr': opt.lr}, {'params': model_verif.classifier.parameters(), 'lr': opt.lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_340": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': base_params, 'lr': 0.001}, {'params': model.model.fc.parameters(), 'lr': 0.01}, {'params': model.classifier0.parameters(), 'lr': 0.01}, {'params': model.classifier1.parameters(), 'lr': 0.01}, {'params': model.classifier2.parameters(), 'lr': 0.01}, {'params': model.classifier3.parameters(), 'lr': 0.01}, {'params': model.classifier4.parameters(), 'lr': 0.01}, {'params': model.classifier5.parameters(), 'lr': 0.01}]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_59": {
                "device": {
                    "value": "gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "dataset": {
                    "value": "image_datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_289": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('./model', name, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "labels_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "now_batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_210": {
                "variable": {
                    "value": "labels_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "now_batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_214": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_215": {
                "variable": {
                    "value": "(_, p_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pscore.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_216": {
                "variable": {
                    "value": "(_, n_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nscore.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_232": {
                "input": {
                    "value": "n_preds == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "model/drop0.75-lr0.08-a1/tripletfolder.py": {
        "torch": {}
    },
    "model/drop0.75_lr0.1_a1/model.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "add_block",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*add_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*classifier",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_63": {
                "variable": {
                    "value": "model_ft.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_98": {
                "variable": {
                    "value": "model_ft.features.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "model_ft.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_118": {
                "variable": {
                    "value": "model_ft.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.add_block(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.model.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.classifier.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1))",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x0, x1), 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.model.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.model.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.model.relu(x)",
                            "Call"
                        ],
                        [
                            "self.model.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.model.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_148": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(self.part, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_149": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_193": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(self.part, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_174": {
                "variable": {
                    "value": "part[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_bottleneck",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "num_bottleneck",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "num_bottleneck",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "model/drop0.75_lr0.1_a1/train.py": {
        "torch": {
            "is_available_131": {
                "variable": {
                    "value": "use_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_317": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_353": {
                "variable": {
                    "value": "exp_lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_ft",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optim.SGD([{'params': base_params, 'lr': 0.1 * opt.lr}, {'params': model.model.fc.parameters(), 'lr': opt.lr}, {'params': model.classifier.parameters(), 'lr': opt.lr}, {'params': model_verif.classifier.parameters(), 'lr': opt.lr}], weight_decay=0.0005, momentum=0.9, nesterov=True)",
                            "Call"
                        ],
                        [
                            "optim.SGD([{'params': base_params, 'lr': 0.001}, {'params': model.model.fc.parameters(), 'lr': 0.01}, {'params': model.classifier0.parameters(), 'lr': 0.01}, {'params': model.classifier1.parameters(), 'lr': 0.01}, {'params': model.classifier2.parameters(), 'lr': 0.01}, {'params': model.classifier3.parameters(), 'lr': 0.01}, {'params': model.classifier4.parameters(), 'lr': 0.01}, {'params': model.classifier5.parameters(), 'lr': 0.01}], weight_decay=0.0005, momentum=0.9, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[40, 60]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_322": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': base_params, 'lr': 0.1 * opt.lr}, {'params': model.model.fc.parameters(), 'lr': opt.lr}, {'params': model.classifier.parameters(), 'lr': opt.lr}, {'params': model_verif.classifier.parameters(), 'lr': opt.lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_340": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': base_params, 'lr': 0.001}, {'params': model.model.fc.parameters(), 'lr': 0.01}, {'params': model.classifier0.parameters(), 'lr': 0.01}, {'params': model.classifier1.parameters(), 'lr': 0.01}, {'params': model.classifier2.parameters(), 'lr': 0.01}, {'params': model.classifier3.parameters(), 'lr': 0.01}, {'params': model.classifier4.parameters(), 'lr': 0.01}, {'params': model.classifier5.parameters(), 'lr': 0.01}]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_59": {
                "device": {
                    "value": "gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "dataset": {
                    "value": "image_datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_289": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('./model', name, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "labels_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "now_batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_210": {
                "variable": {
                    "value": "labels_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "now_batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_214": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_215": {
                "variable": {
                    "value": "(_, p_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pscore.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_216": {
                "variable": {
                    "value": "(_, n_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nscore.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_232": {
                "input": {
                    "value": "n_preds == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "model/drop0.75_lr0.1_a1/tripletfolder.py": {
        "torch": {}
    },
    "random_erasing.py": {
        "torch": {}
    },
    "test.py": {
        "torch": {
            "is_available_109": {
                "variable": {
                    "value": "use_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_128": {
                "variable": {
                    "value": "inv_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "img.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_device_64": {
                "device": {
                    "value": "gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, ff)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "dataset": {
                    "value": "image_datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "dataset": {
                    "value": "image_datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('./model', name, 'net_%s.pth' % opt.which_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_163": {
                "variable": {
                    "value": "fnorm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(n, 1024).zero_().cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(n, 512).zero_().cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(n, 2048, 6).zero_().cuda()",
                            "Call"
                        ],
                        [
                            "ff.div(fnorm.expand_as(ff))",
                            "Call"
                        ],
                        [
                            "ff.view(ff.size(0), -1)",
                            "Call"
                        ],
                        [
                            "ff.div(fnorm.expand_as(ff))",
                            "Call"
                        ],
                        [
                            "ff + outputs",
                            "BinOp"
                        ],
                        [
                            "ff.data.cpu().float()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_159": {
                "input": {
                    "value": "ff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(n, 1024).zero_().cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(n, 512).zero_().cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(n, 2048, 6).zero_().cuda()",
                            "Call"
                        ],
                        [
                            "ff.div(fnorm.expand_as(ff))",
                            "Call"
                        ],
                        [
                            "ff.view(ff.size(0), -1)",
                            "Call"
                        ],
                        [
                            "ff.div(fnorm.expand_as(ff))",
                            "Call"
                        ],
                        [
                            "ff + outputs",
                            "BinOp"
                        ],
                        [
                            "ff.data.cpu().float()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "is_available_131": {
                "variable": {
                    "value": "use_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_317": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_353": {
                "variable": {
                    "value": "exp_lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_ft",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optim.SGD([{'params': base_params, 'lr': 0.1 * opt.lr}, {'params': model.model.fc.parameters(), 'lr': opt.lr}, {'params': model.classifier.parameters(), 'lr': opt.lr}, {'params': model_verif.classifier.parameters(), 'lr': opt.lr}], weight_decay=0.0005, momentum=0.9, nesterov=True)",
                            "Call"
                        ],
                        [
                            "optim.SGD([{'params': base_params, 'lr': 0.001}, {'params': model.model.fc.parameters(), 'lr': 0.01}, {'params': model.classifier0.parameters(), 'lr': 0.01}, {'params': model.classifier1.parameters(), 'lr': 0.01}, {'params': model.classifier2.parameters(), 'lr': 0.01}, {'params': model.classifier3.parameters(), 'lr': 0.01}, {'params': model.classifier4.parameters(), 'lr': 0.01}, {'params': model.classifier5.parameters(), 'lr': 0.01}], weight_decay=0.0005, momentum=0.9, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[40, 60]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_322": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': base_params, 'lr': 0.1 * opt.lr}, {'params': model.model.fc.parameters(), 'lr': opt.lr}, {'params': model.classifier.parameters(), 'lr': opt.lr}, {'params': model_verif.classifier.parameters(), 'lr': opt.lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_340": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': base_params, 'lr': 0.001}, {'params': model.model.fc.parameters(), 'lr': 0.01}, {'params': model.classifier0.parameters(), 'lr': 0.01}, {'params': model.classifier1.parameters(), 'lr': 0.01}, {'params': model.classifier2.parameters(), 'lr': 0.01}, {'params': model.classifier3.parameters(), 'lr': 0.01}, {'params': model.classifier4.parameters(), 'lr': 0.01}, {'params': model.classifier5.parameters(), 'lr': 0.01}]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_59": {
                "device": {
                    "value": "gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "dataset": {
                    "value": "image_datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_289": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join('./model', name, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "labels_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "now_batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_210": {
                "variable": {
                    "value": "labels_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "now_batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_214": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_215": {
                "variable": {
                    "value": "(_, p_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pscore.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_216": {
                "variable": {
                    "value": "(_, n_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "nscore.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "preds == labels.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_232": {
                "input": {
                    "value": "n_preds == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tripletfolder.py": {
        "torch": {}
    }
}