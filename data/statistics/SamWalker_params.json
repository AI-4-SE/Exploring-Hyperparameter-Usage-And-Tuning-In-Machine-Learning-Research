{
    "samwalkerplus/Samwalkerplus.py": {
        "torch": {
            "DataLoader_192": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UserItemRatingDataset(item_tensor=torch.LongTensor(range(m)))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_14": {
                "variable": {
                    "value": "self.embedding_user",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_users",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_15": {
                "variable": {
                    "value": "self.embedding_item",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_items",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.affine_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_19": {
                "variable": {
                    "value": "self.logistic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_32": {
                "variable": {
                    "value": "element_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "user_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_user(user_indices)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "item_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_item(item_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_33": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "element_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(user_embedding, item_embedding)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "self.r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tposuser",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(posuser)",
                            "Call"
                        ],
                        [
                            "tposuser.cuda()",
                            "Call"
                        ],
                        [
                            "tposuser",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "self.r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tpositem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(positem)",
                            "Call"
                        ],
                        [
                            "tpositem.cuda()",
                            "Call"
                        ],
                        [
                            "tpositem",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_63": {
                "variable": {
                    "value": "self.ct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.r1, self.r2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "self.cf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.r2, self.r1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(np.random.random(len(self.r1)) - 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(np.random.random(len(self.r1)) - 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.la1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(np.random.random((self.n, config['gen_dim'])) - 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.la2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(np.random.random((self.n, config['gen_dim'])) - 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_90": {
                "variable": {
                    "value": "expw1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "expw2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_92": {
                "variable": {
                    "value": "expla1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.la1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_93": {
                "variable": {
                    "value": "expla2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.la2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "fa0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_150": {
                "device": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_72": {
                "variable": {
                    "value": "expw1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_73": {
                "variable": {
                    "value": "expw2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_74": {
                "variable": {
                    "value": "expla1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.la1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_75": {
                "variable": {
                    "value": "expla2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.la2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_113": {
                "variable": {
                    "value": "mflp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(flpre[:, nst])",
                            "Call"
                        ],
                        [
                            "flp.cuda()",
                            "Call"
                        ],
                        [
                            "c * (torch.sparse.mm(slfw1, torch.sparse.mm(slfw2, flp)) - fa0 * flp + fa0.mm(mflp) + lfla1.mm(lfla2.t().mm(flp))) + (1 - c) * hnow",
                            "BinOp"
                        ],
                        [
                            "flp + eps",
                            "BinOp"
                        ],
                        [
                            "flp",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_186": {
                "*size": {
                    "value": "(n, batchsize)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_220": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.baselr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.basedecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_221": {
                "variable": {
                    "value": "tposuser",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "posuser",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(data[:][0])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "tpositem",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "positem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(data[:][1])",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_233": {
                "variable": {
                    "value": "bce",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_234": {
                "variable": {
                    "value": "optgen",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.samlr",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.samdecay",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_209": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "*size": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_274": {
                "input": {
                    "value": "cuid * (hrnow * torch.log((pregen + eps) / episa) + (1 - hrnow) * torch.log((1 - pregen + eps) / (1 - episa))) + cuid * torch.log(proa / (1 - proa)) - cuid * torch.log(cuid + eps) - (1 - cuid) * torch.log(1 - cuid + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_114": {
                "input": {
                    "value": "slfw2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "csr_matrix((lfw2, (positem, posuser)), shape=[m, n]).toarray()",
                            "Call"
                        ],
                        [
                            "torch.cuda.sparse.FloatTensor(self.cf, lfw2, torch.Size([self.m, self.n]))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "flp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(flpre[:, nst])",
                            "Call"
                        ],
                        [
                            "flp.cuda()",
                            "Call"
                        ],
                        [
                            "c * (torch.sparse.mm(slfw1, torch.sparse.mm(slfw2, flp)) - fa0 * flp + fa0.mm(mflp) + lfla1.mm(lfla2.t().mm(flp))) + (1 - c) * hnow",
                            "BinOp"
                        ],
                        [
                            "flp + eps",
                            "BinOp"
                        ],
                        [
                            "flp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_275": {
                "input": {
                    "value": "proa / (1 - proa)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_274": {
                "input": {
                    "value": "(1 - pregen + eps) / (1 - episa)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}