{
    "dataset/jsrt.py": {
        "sklearn": {
            "train_test_split_129": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_106": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetGenerator(path_to_img_dir=PATH_TO_IMAGES_DIR, path_to_dataset_file=[PATH_TO_TRAIN_FILE])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetGenerator(path_to_img_dir=PATH_TO_IMAGES_DIR, path_to_dataset_file=[PATH_TO_TEST_FILE])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_82": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask == 255",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.full_like(mask, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(mask_name)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(np.array(self.transform_seq_mask(mask)))",
                            "Call"
                        ],
                        [
                            "torch.where(mask == 255, torch.full_like(mask, -1), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask > 0, torch.full_like(mask, 2), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask == -1, torch.full_like(mask, 1), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_83": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.full_like(mask, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(mask_name)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(np.array(self.transform_seq_mask(mask)))",
                            "Call"
                        ],
                        [
                            "torch.where(mask == 255, torch.full_like(mask, -1), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask > 0, torch.full_like(mask, 2), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask == -1, torch.full_like(mask, 1), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_84": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask == -1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.full_like(mask, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(mask_name)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(np.array(self.transform_seq_mask(mask)))",
                            "Call"
                        ],
                        [
                            "torch.where(mask == 255, torch.full_like(mask, -1), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask > 0, torch.full_like(mask, 2), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask == -1, torch.full_like(mask, 1), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_82": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(mask_name)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(np.array(self.transform_seq_mask(mask)))",
                            "Call"
                        ],
                        [
                            "torch.where(mask == 255, torch.full_like(mask, -1), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask > 0, torch.full_like(mask, 2), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask == -1, torch.full_like(mask, 1), mask)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_like_83": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(mask_name)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(np.array(self.transform_seq_mask(mask)))",
                            "Call"
                        ],
                        [
                            "torch.where(mask == 255, torch.full_like(mask, -1), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask > 0, torch.full_like(mask, 2), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask == -1, torch.full_like(mask, 1), mask)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_84": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(mask_name)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(np.array(self.transform_seq_mask(mask)))",
                            "Call"
                        ],
                        [
                            "torch.where(mask == 255, torch.full_like(mask, -1), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask > 0, torch.full_like(mask, 2), mask)",
                            "Call"
                        ],
                        [
                            "torch.where(mask == -1, torch.full_like(mask, 1), mask)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/origa.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_99": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetGenerator(path_to_img_dir=PATH_TO_IMAGES_DIR, path_to_dataset_file=[PATH_TO_TRAIN_FILE])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetGenerator(path_to_img_dir=PATH_TO_IMAGES_DIR, path_to_dataset_file=[PATH_TO_TEST_FILE])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/tubcxr.py": {
        "sklearn": {
            "train_test_split_122": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_99": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetGenerator(path_to_img_dir=PATH_TO_IMAGES_DIR, path_to_dataset_file=[PATH_TO_TRAIN_FILE])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DatasetGenerator(path_to_img_dir=PATH_TO_IMAGES_DIR, path_to_dataset_file=[PATH_TO_TEST_FILE])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "sklearn": {
            "cosine_similarity_164": {
                "variable": {
                    "value": "sim_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "te_hash.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "tr_hash.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_195": {
                "y_true": {
                    "value": "te_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor().cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((te_label, label.cuda()), 0)",
                            "Call"
                        ],
                        [
                            "te_label.cpu().numpy().tolist()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "te_label_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor().cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((te_label_pd, c_cls.data), 0)",
                            "Call"
                        ],
                        [
                            "te_label_pd.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_57": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_52": {
                "variable": {
                    "value": "lr_scheduler_model",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=0.001, betas=(0.9, 0.999), eps=1e-08, weight_decay=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_117": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CKPT_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/pycode/YNet/model/best_model.pkl'",
                            "str"
                        ],
                        [
                            "'/data/pycode/YNet/model/best_model.pkl'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "tr_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_label, label.cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "tr_hash",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr_hash, h_feat.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "te_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(te_label, label.cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "te_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(te_mask, mask.cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "te_hash",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(te_hash, h_feat.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_153": {
                "variable": {
                    "value": "s_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(s_mask, dim=1)",
                            "Call"
                        ],
                        [
                            "s_mask.max(1, keepdim=True)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "te_mask_pd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(te_mask_pd, s_mask.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_156": {
                "variable": {
                    "value": "c_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(c_cls, dim=1)",
                            "Call"
                        ],
                        [
                            "c_cls.max(1, keepdim=True)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "te_label_pd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(te_label_pd, c_cls.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "enable_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "CKPT_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/pycode/YNet/model/best_model.pkl'",
                            "str"
                        ],
                        [
                            "'/data/pycode/YNet/model/best_model.pkl'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "plot.py": {
        "sklearn": {
            "average_precision_score_233": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "te_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor().cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((te_label, label.cuda()), 0)",
                            "Call"
                        ],
                        [
                            "te_label.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "te_label_pd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor().cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((te_label_pd, c_cls.data), 0)",
                            "Call"
                        ],
                        [
                            "te_label_pd.cpu().numpy()[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "precision_recall_curve_237": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "te_label.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "te_label_pd.ravel()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_88": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CKPT_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/pycode/YNet/model/best_model.pkl'",
                            "str"
                        ],
                        [
                            "'/data/pycode/YNet/model/best_model.pkl'",
                            "str"
                        ]
                    ]
                }
            },
            "mean_99": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation['conv8'].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.mean(feature, dim=0).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "normalize_output(feature)",
                            "Call"
                        ],
                        [
                            "np.uint8(255 * feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_133": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_134": {
                "variable": {
                    "value": "lr_scheduler_model",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=0.001, betas=(0.9, 0.999), eps=1e-08, weight_decay=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_136": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_204": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CKPT_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/data/pycode/YNet/model/best_model.pkl'",
                            "str"
                        ],
                        [
                            "'/data/pycode/YNet/model/best_model.pkl'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "te_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(te_label, label.cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_219": {
                "variable": {
                    "value": "c_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(c_cls, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "te_label_pd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(te_label_pd, c_cls.data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "enable_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sota/CAM.py": {
        "sklearn": {
            "PCA_86": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "pca_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "whiten": {
                    "value": "whiten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "rand_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sota/CroW.py": {
        "sklearn": {},
        "torch": {
            "rand_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_67": {
                "variable": {
                    "value": "channel_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nonzeros.sum(dim=1, keepdim=True) / nonzeros",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sota/DPSH.py": {
        "sklearn": {},
        "torch": {
            "rand_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_58": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256 * 6 * 6, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.hash_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "code_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MSELoss_82": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "L1Loss_83": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_87": {
                "variable": {
                    "value": "squared_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mse_loss(h1, h2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_90": {
                "variable": {
                    "value": "mean_positive_pair_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_pair_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (1 - y) * squared_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_92": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squared_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(self.mse_loss(h1, h2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_95": {
                "variable": {
                    "value": "mean_negative_pair_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negative_pair_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * y * torch.max(zeros, marginMat - squared_loss)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_49": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_56": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_93": {
                "input": {
                    "value": "squared_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(self.mse_loss(h1, h2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_94": {
                "input": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(squared_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_99": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_99": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_100": {
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_100": {
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sota/DRH.py": {
        "sklearn": {},
        "torch": {
            "rand_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlock(in_channels=3, out_channels=16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear_input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "resnet.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "resnet.linear_input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "code_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MSELoss_125": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "L1Loss_126": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "squared_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mse_loss(h1, h2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_133": {
                "variable": {
                    "value": "mean_positive_pair_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_pair_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (1 - y) * squared_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_135": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squared_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(self.mse_loss(h1, h2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_138": {
                "variable": {
                    "value": "mean_negative_pair_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negative_pair_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * y * torch.max(zeros, marginMat - squared_loss)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.downsample_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "input": {
                    "value": "out + identity",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_136": {
                "input": {
                    "value": "squared_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(self.mse_loss(h1, h2), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_137": {
                "input": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(squared_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_142": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_142": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_143": {
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_143": {
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "sota/DSH.py": {
        "sklearn": {},
        "torch": {
            "rand_92": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, kernel_size=5, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64 * 31 * 31, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_80": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_84": {
                "variable": {
                    "value": "squared_loss_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mse_loss(H_q, H_p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_85": {
                "variable": {
                    "value": "squared_loss_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mse_loss(H_q, H_n)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squared_loss_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(self.mse_loss(H_q, H_n), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_87": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(squared_loss_neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_88": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(zeros, margin_val - squared_loss_neg + squared_loss_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_50": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_54": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "64 * 31 * 31",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_binary",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "util/Evaluation.py": {
        "sklearn": {
            "roc_curve_74": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "gt.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "gt.cpu().numpy()[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "pred.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "pred.cpu().numpy()[:, 1]",
                            "Subscript"
                        ],
                        [
                            "np.where(pred_np > threshold[idx], 1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_75": {
                "variable": {
                    "value": "auc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "confusion_matrix_79": {
                "variable": {
                    "value": "(tn, fp, fn, tp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "gt.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "gt.cpu().numpy()[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "pred.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "pred.cpu().numpy()[:, 1]",
                            "Subscript"
                        ],
                        [
                            "np.where(pred_np > threshold[idx], 1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_24": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_np[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred_np[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "auc_25": {
                "variable": {
                    "value": "auc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_52": {
                "y_true": {
                    "value": "gt_np[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred_np[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "rand_86": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "net/YNet.py": {
        "torch": {
            "rand_307": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x.max(1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_40": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x, 2, 1) + caped_eps.expand(x.size()[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_40": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_147": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_160": {
                "variable": {
                    "value": "alpha_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-pos_pair_ + 1 + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_161": {
                "variable": {
                    "value": "alpha_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_pair_ + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "loss_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(-self.scale * alpha_p * (pos_pair_ - margin_p))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_165": {
                "variable": {
                    "value": "loss_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(self.scale * alpha_n * (neg_pair_ - margin_n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_166": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + loss_p * loss_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_172": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_189": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_191": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_192": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_193": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_203": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_204": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_207": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_215": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_216": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * 8 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "code_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_226": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "code_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_229": {
                "variable": {
                    "value": "self.toplayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_231": {
                "variable": {
                    "value": "self.latlayer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "variable": {
                    "value": "self.latlayer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_234": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_235": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_236": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_242": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_273": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_274": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(h1, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_151": {
                "variable": {
                    "value": "sim_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(feats)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_250": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "norm_39": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(2, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "torch.div(x.transpose(0, 1), x.max(1)[0]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "range(n_h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_147": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_153": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_164": {
                "input": {
                    "value": "-self.scale * alpha_p * (pos_pair_ - margin_p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_165": {
                "input": {
                    "value": "self.scale * alpha_n * (neg_pair_ - margin_n)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "upsample_269": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(2, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "torch.div(x.transpose(0, 1), x.max(1)[0]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "range(n_h)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "t_151": {
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_180": {
                "input": {
                    "value": "1 - self.alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_199": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_of_35": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(2, 3, 256, 256)",
                            "Call"
                        ],
                        [
                            "torch.div(x.transpose(0, 1), x.max(1)[0]).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "range(n_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_122": {
                "input": {
                    "value": "region_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fea[:, :, st_x:ed_x, st_y:ed_y].max(dim=3)[0].max(dim=2)[0]",
                            "Subscript"
                        ],
                        [
                            "region_fea / torch.norm(region_fea, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}