{
    "omnizart/base.py": {
        "tensorflow": {
            "load_model_64": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(MODULE_PATH, default_path)",
                            "Call"
                        ],
                        [
                            "os.path.abspath(model_path) if model_path is not None else None",
                            "IfExp"
                        ],
                        [
                            "os.path.join(MODULE_PATH, default_path)",
                            "Call"
                        ],
                        [
                            "os.path.join(model_path, cand_dirs[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "custom_objects",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "model_from_yaml_101": {
                "yaml_string": {
                    "value": "open(arch_path).read()",
                    "type": "Call",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "custom_objects",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_346": {
                "tensors": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/beat/app.py": {
        "tensorflow": {
            "shape_353": {
                "variable": {
                    "value": "shape_list",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bce",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target * tf.math.log(pred + epsilon)",
                            "BinOp"
                        ],
                        [
                            "bce * weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_354": {
                "variable": {
                    "value": "beat_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_list[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bce.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_355": {
                "variable": {
                    "value": "db_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape_list[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "down_beat_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_356": {
                "variable": {
                    "value": "db_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "db_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill(shape_list[:2], down_beat_weight)",
                            "Call"
                        ],
                        [
                            "tf.cast(db_weight, bce.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bce.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_357": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[beat_weight, db_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_190": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "settings.training.init_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_360": {
                "input_tensor": {
                    "value": "-bce",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_349": {
                "x": {
                    "value": "pred + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_350": {
                "x": {
                    "value": "1 - pred + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "EarlyStopping_206": {
                "patience": {
                    "value": "settings.training.early_stop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_207": {
                "filepath": {
                    "value": "model_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "jpath(settings.model.save_path, model_name)",
                            "Call"
                        ]
                    ]
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/callbacks.py": {
        "tensorflow": {}
    },
    "omnizart/chord/app.py": {
        "tensorflow": {
            "sigmoid_cross_entropy_with_logits_306": {
                "variable": {
                    "value": "exp_cc_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(chord_change, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "chord_change_logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "one_hot_311": {
                "variable": {
                    "value": "one_hot_chord",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "chord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "chord.reshape(np.prod(chord.shape))[:-pad_end]",
                            "Subscript"
                        ]
                    ]
                },
                "depth": {
                    "value": "out_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "26",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ExponentialDecay_180": {
                "variable": {
                    "value": "learninig_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "settings.training.init_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "settings.training.steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "settings.training.learning_rate_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learninig_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.schedules.ExponentialDecay(settings.training.init_learning_rate, decay_steps=settings.training.steps, decay_rate=settings.training.learning_rate_decay, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "clipvalue": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_309": {
                "input_tensor": {
                    "value": "exp_cc_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.cast(chord_change, tf.float32), logits=chord_change_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_312": {
                "onehot_labels": {
                    "value": "one_hot_chord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(chord, depth=out_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "label_smoothing": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "EarlyStopping_200": {
                "patience": {
                    "value": "settings.training.early_stop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_201": {
                "filepath": {
                    "value": "model_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "jpath(settings.model.save_path, model_name)",
                            "Call"
                        ]
                    ]
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_307": {
                "x": {
                    "value": "chord_change",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/cli/__init__.py": {
        "tensorflow": {
            "set_verbosity_14": {
                "level": {
                    "value": "tf_logger.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/drum/app.py": {
        "tensorflow": {
            "abs_357": {
                "variable": {
                    "value": "recon_error",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "target * 100 - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_358": {
                "variable": {
                    "value": "recon_error_soft",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "recon_error <= soft_loss_range",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(recon_error)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "recon_error - soft_loss_range",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_364": {
                "variable": {
                    "value": "recon_error_soft_reduced",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "recon_error_soft",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(recon_error <= soft_loss_range, tf.zeros_like(recon_error), recon_error - soft_loss_range)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_365": {
                "variable": {
                    "value": "note_priority_arr",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "NOTE_PRIORITY_ARRAY",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "recon_error.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_199": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "settings.training.init_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_367": {
                "input_tensor": {
                    "value": "recon_error_soft_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "recon_error_soft_reduced * note_priority_arr",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_360": {
                "input": {
                    "value": "recon_error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.abs(target * 100 - pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "EarlyStopping_214": {
                "patience": {
                    "value": "settings.training.early_stop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_215": {
                "filepath": {
                    "value": "model_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "jpath(settings.model.save_path, model_name)",
                            "Call"
                        ]
                    ]
                },
                "monitor": {
                    "value": "val_accuracy",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/models/chord_model.py": {
        "tensorflow": {
            "cumsum_201": {
                "variable": {
                    "value": "block_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "chord_changes",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_203": {
                "variable": {
                    "value": "block_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "modify_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda x: tf.cond(pred=tf.equal(x[0], 0), true_fn=lambda : x, false_fn=lambda : x - 1)",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "block_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cumsum(chord_changes, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(modify_ids, block_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_206": {
                "variable": {
                    "value": "max_steps",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "num_blocks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(input_tensor=block_ids, axis=1) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "map_fn_212": {
                "variable": {
                    "value": "chord_blocks",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "segment_mean_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda x: tf.pad(tensor=tf.math.segment_mean(data=x[0], segment_ids=x[1]), paddings=tf.convert_to_tensor([[0, max_steps - x[2]], [0, 0]]))",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "(hidden_states, block_ids, num_blocks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_222": {
                "variable": {
                    "value": "graph",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_31": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation_func",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1D_32": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_units[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNormalization_34": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_91": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_92": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[2048",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_93": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "inp_reshape",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.freq_size, self.segment_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_100": {
                "variable": {
                    "value": "inp_permute",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "inp_reshape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(inp, shape=[-1, self.freq_size, self.segment_width])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inp, [-1, self.freq_size, self.segment_width])",
                            "Call"
                        ],
                        [
                            "inp_reshape + (positional_encoding(batch_size=shape_list(inp_reshape)[0], timesteps=self.freq_size, n_units=self.segment_width) * 0.01 + 0.01)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "forward_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.feed_forward(attn_output)",
                            "Call"
                        ],
                        [
                            "self.feed_forward(attn_output)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_1(inp)",
                            "Call"
                        ],
                        [
                            "self.conv_2(outputs)",
                            "Call"
                        ],
                        [
                            "self.dropout(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inp",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(a=forward_output, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, shape=[-1, self.n_steps, self.freq_size * self.segment_width])",
                            "Call"
                        ],
                        [
                            "self.dropout(outputs)",
                            "Call"
                        ],
                        [
                            "self.dense(outputs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(forward_output, shape=[-1, self.n_steps, self.freq_size * self.segment_width])",
                            "Call"
                        ],
                        [
                            "self.dropout(outputs)",
                            "Call"
                        ],
                        [
                            "self.out_dense(outputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_steps, self.freq_size * self.segment_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_166": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_167": {
                "variable": {
                    "value": "self.out_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[2048",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_168": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "inp_reshape",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.freq_size, self.segment_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_180": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "forward_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.feed_forward(attn_output)",
                            "Call"
                        ],
                        [
                            "self.feed_forward(attn_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_steps, self.freq_size * self.segment_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_fn_218": {
                "fn": {
                    "value": "gather_chords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda x: tf.gather(params=x[0], indices=x[1])",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "(compressed_seq, block_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "compressed_seq.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_273": {
                "variable": {
                    "value": "self.layer_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(num_attn_blocks)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_291": {
                "variable": {
                    "value": "self.logit_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_292": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_301": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.layer_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "weighted_hidden_enc",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_list(segment_encodings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_308": {
                "variable": {
                    "value": "chord_change_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logit_dense(weighted_hidden_enc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_309": {
                "variable": {
                    "value": "chord_change_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "slope * chord_change_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_406": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_407": {
                "variable": {
                    "value": "self.out_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "out_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "26",
                            "MethodArgument"
                        ],
                        [
                            "26",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_421": {
                "variable": {
                    "value": "layer_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.zeros(self.num_attn_blocks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_422": {
                "variable": {
                    "value": "weighted_hiddens_dec",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape_list(segment_encodings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_431": {
                "variable": {
                    "value": "chord_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.out_dense(weighted_hiddens_dec)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_537": {
                "variable": {
                    "value": "self.loss_tracker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_202": {
                "pred": {
                    "value": "tf.equal(x[0], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : x",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : x - 1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_max_205": {
                "input_tensor": {
                    "value": "block_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cumsum(chord_changes, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(modify_ids, block_ids)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_208": {
                "tensor": {
                    "value": "tf.math.segment_mean(data=x[0], segment_ids=x[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "paddings": {
                    "value": "tf.convert_to_tensor([[0, max_steps - x[2]], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_217": {
                "params": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_223": {
                "name": {
                    "value": "BinaryRound",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_620": {
                "shape": {
                    "value": "(16, 60, 100, 504)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_421": {
                "shape": {
                    "value": "self.num_attn_blocks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_619": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_202": {
                "x": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "segment_mean_209": {
                "data": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_210": {
                "value": {
                    "value": "[[0, max_steps - x[2]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_226": {
                "x": {
                    "value": "tf.round(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "round_229": {
                "x": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "shape": {
                    "value": "num_attn_blocks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "add_n_588": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(var) for var in trainable_vars if 'bias' not in var.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "round_226": {
                "x": {
                    "value": "inp",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "add_n_560": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(var) for var in trainable_vars if 'bias' not in var.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "l2_loss_588": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "l2_loss_560": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/models/patch_cnn.py": {
        "tensorflow": {
            "Input_5": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(patch_size, patch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_19": {
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(patch_size, patch_size, 1))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(8, 5, activation='relu')(inputs)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(0.25)(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(16, 3, activation='relu')(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(0.25)(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(2, 2)(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Flatten()(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(128, activation='relu')(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(0.25)(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(64, activation='relu')(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(0.25)(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(2, activation='softmax')(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_7": {
                "filters": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_8": {
                "rate": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_9": {
                "filters": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_10": {
                "rate": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPooling2D_11": {
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_13": {
                "units": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_14": {
                "rate": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_15": {
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "rate": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_17": {
                "units": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/models/pyramid_net.py": {
        "tensorflow": {
            "VarianceScaling_70": {
                "variable": {
                    "value": "conv_init",
                    "type": "Name",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AveragePooling2D_72": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_73": {
                "variable": {
                    "value": "self.batch_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_74": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, 0], [0, diff]]",
                            "List"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "conv_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.initializers.VarianceScaling(scale=0.1, seed=int(time.time()))",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_77": {
                "variable": {
                    "value": "self.batch_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_79": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, 0], [0, diff]]",
                            "List"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "conv_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.initializers.VarianceScaling(scale=0.1, seed=int(time.time()))",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_82": {
                "variable": {
                    "value": "self.batch_norm_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivergence_162": {
                "variable": {
                    "value": "self.kl_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_163": {
                "variable": {
                    "value": "self.loss_tracker",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_174": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.kernel_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.HeNormal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNormalization_182": {
                "variable": {
                    "value": "self.batch_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_norm_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "variable": {
                    "value": "self.relu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "relu_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2D_184": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "max_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_185": {
                "variable": {
                    "value": "self.batch_norm_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_norm_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_212": {
                "variable": {
                    "value": "self.relu_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "relu_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AveragePooling2D_213": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(1, 11)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "avg_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_214": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "flatten",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_215": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "out_classes * 19",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Reshape_216": {
                "variable": {
                    "value": "self.reshape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target_shape": {
                    "value": "(19, out_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_315": {
                "variable": {
                    "value": "perturb",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(unsup_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_351": {
                "x": {
                    "value": "1e-06 + tf.reduce_sum(tensor ** 2, range(1, len(tensor.shape)), keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_29": {
                "variable": {
                    "value": "in_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "floor_32": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.prob",
                            "Attribute"
                        ],
                        [
                            "random_tensor + tf.random.uniform(in_shape, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "uniform_34": {
                "variable": {
                    "value": "alpha_values",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "self.min_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self.max_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_35": {
                "variable": {
                    "value": "beta_values",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "self.min_beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxval": {
                    "value": "self.max_beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_110": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self.avgpool(inputs)",
                            "Call"
                        ],
                        [
                            "tf.pad(out, padding)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, 0], [0, diff]]",
                            "List"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stop_gradient_306": {
                "input": {
                    "value": "unsup_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self(unsup_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_310": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._compute_supervised_loss(super_label, super_pred)",
                            "Call"
                        ],
                        [
                            "loss + self._compute_unsupervised_loss(unsup_feat) * self.semi_loss_weight",
                            "BinOp"
                        ],
                        [
                            "self._compute_supervised_loss(super_label, super_pred)",
                            "Call"
                        ],
                        [
                            "self.compiled_loss(label, pred)",
                            "Call"
                        ],
                        [
                            "self.kl_loss(unsup_pred_copy, adv_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_322": {
                "variable": {
                    "value": "perturb",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(dist, [perturb], aggregation_method=2)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_max_350": {
                "input_tensor": {
                    "value": "tf.abs(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "range(1, len(tensor.shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "uniform_31": {
                "shape": {
                    "value": "in_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_315": {
                "input": {
                    "value": "unsup_feat",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "abs_350": {
                "x": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor / tf.sqrt(1e-06 + tf.reduce_sum(tensor ** 2, range(1, len(tensor.shape)), keepdims=True))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_351": {
                "input_tensor": {
                    "value": "tensor ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "range(1, len(tensor.shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_38": {
                "input": {
                    "value": "inputs * rand_forward - inputs * rand_backward",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "HeNormal_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_321": {
                "ys": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kl_loss(unsup_pred_copy, perturb_pred)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[perturb]",
                    "type": "List",
                    "possible_values": []
                },
                "aggregation_method": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/models/rnn.py": {
        "tensorflow": {
            "Input_7": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(timesteps, input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_19": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[beat_out, down_beat_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Input_24": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(timesteps, input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_41": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[beat_out, down_beat_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normal_46": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 1200, 178]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_20": {
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.normal([3, 1200, 178])",
                            "Call"
                        ],
                        [
                            "tf.keras.Input(shape=(timesteps, input_dim))",
                            "Call"
                        ],
                        [
                            "tf.keras.Input(shape=(timesteps, input_dim))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "tf.stack([beat_out, down_beat_out], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack([beat_out, down_beat_out], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_42": {
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.normal([3, 1200, 178])",
                            "Call"
                        ],
                        [
                            "tf.keras.Input(shape=(timesteps, input_dim))",
                            "Call"
                        ],
                        [
                            "tf.keras.Input(shape=(timesteps, input_dim))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "tf.stack([beat_out, down_beat_out], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.stack([beat_out, down_beat_out], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNormalization_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_16": {
                "units": {
                    "value": "timesteps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_17": {
                "units": {
                    "value": "timesteps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNormalization_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_32": {
                "filters": {
                    "value": "attn_hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_38": {
                "units": {
                    "value": "timesteps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_39": {
                "units": {
                    "value": "timesteps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1200",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Bidirectional_11": {
                "layer": {
                    "value": "tf.keras.layers.LSTM(hidden_dim, return_sequences=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bidirectional_28": {
                "layer": {
                    "value": "tf.keras.layers.LSTM(lstm_hidden_dim, return_sequences=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_12": {
                "units": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "25",
                            "MethodArgument"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_29": {
                "units": {
                    "value": "lstm_hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "25",
                            "MethodArgument"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/models/spectral_norm_net.py": {
        "tensorflow": {
            "reshape_63": {
                "variable": {
                    "value": "w_reshaped",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v_ / (tf.reduce_sum(v_ ** 2) ** 0.5 + self.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reshaped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.w, [-1, self.w_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPooling2D_177": {
                "variable": {
                    "value": "max_pooling",
                    "type": "Name",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "flatten_f",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_sa(x, channels // 8, kernel=(1, 1), strides=(1, 1), scope='f_attn_conv')",
                            "Call"
                        ],
                        [
                            "max_pooling(out_f)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_f[1] * shape_f[2], shape_f[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "flatten_g",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_sa(x, channels // 8, kernel=(1, 1), strides=(1, 1), scope='g_attn_conv')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_g[1] * shape_g[2], shape_g[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_193": {
                "variable": {
                    "value": "attn_out",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "flatten_g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(out_g, shape=[-1, shape_g[1] * shape_g[2], shape_g[3]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "flatten_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(out_f, shape=[-1, shape_f[1] * shape_f[2], shape_f[3]])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_194": {
                "variable": {
                    "value": "attn_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(flatten_g, flatten_f, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "flatten_h",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv_sa(x, channels // 2, kernel=(1, 1), strides=(1, 1), scope='h_attn_conv')",
                            "Call"
                        ],
                        [
                            "max_pooling(out_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_h[1] * shape_h[2], shape_h[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "variable": {
                    "value": "attn_out_2",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "attn_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.activations.softmax(attn_out)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "flatten_h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(out_h, shape=[-1, shape_h[1] * shape_h[2], shape_h[3]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_out_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(attn_matrix, flatten_h)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, ori_shape[1], ori_shape[2], ori_shape[3] // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_203": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_311": {
                "variable": {
                    "value": "inp_wrap",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(120, 120, mini_beat_per_seg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_tensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_316": {
                "variable": {
                    "value": "pad_out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(pad_out)[:, :, :1], pad_out[:, :, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_317": {
                "variable": {
                    "value": "pad_out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_tensor, pad_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "tf_diff2_concat",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_340": {
                "variable": {
                    "value": "flat_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "down_sample(x)",
                            "Call"
                        ],
                        [
                            "conv_sa(out_2, channels, kernel=(1, 1), strides=(1, 1), spectral_norm=spectral_norm, scope=f'{scope}_shortcut')",
                            "Call"
                        ],
                        [
                            "transpose_residual_block(x_att, channels=channels, spectral_norm=spectral_norm, scope=f'md_resbk_{i}')",
                            "Call"
                        ],
                        [
                            "transpose_residual_block(out_2, channels=channels, spectral_norm=spectral_norm, scope=f'md_resbk_{i}')",
                            "Call"
                        ],
                        [
                            "transpose_residual_block(out_2, channels=channels, spectral_norm=spectral_norm, to_down=False, scope=f'md_resbk_{i}')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.math.reduce_prod(shape_list(out_2)[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_353": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(attn_out_2, shape=[-1, ori_shape[1], ori_shape[2], ori_shape[3] // 2])",
                            "Call"
                        ],
                        [
                            "conv_sa(out, channels, kernel=(1, 1), strides=(1, 1), scope='out_attn_conv')",
                            "Call"
                        ],
                        [
                            "conv_sa(x, channels, kernel=(3, 3), strides=(1, 1), pad=1, pad_type='reflect', spectral_norm=spectral_norm, scope=f'{scope}_res1')",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.ELU()(out)",
                            "Call"
                        ],
                        [
                            "conv_sa(out, channels, kernel=(3, 3), strides=(1, 1), pad=1, pad_type='reflect', spectral_norm=spectral_norm, scope=f'{scope}_res2')",
                            "Call"
                        ],
                        [
                            "down_sample(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.ELU()(x)",
                            "Call"
                        ],
                        [
                            "conv_sa(out, channels, kernel=(3, 3), strides=(1, 1), pad=1, pad_type='reflect', spectral_norm=spectral_norm, scope=f'{scope}_res1')",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.ELU()(out)",
                            "Call"
                        ],
                        [
                            "conv_sa(out, channels, kernel=(3, 3), strides=(1, 1), pad=1, pad_type='reflect', spectral_norm=spectral_norm, scope=f'{scope}_res2')",
                            "Call"
                        ],
                        [
                            "down_sample(out)",
                            "Call"
                        ],
                        [
                            "residual_block(pad_out, channels=channels, spectral_norm=spectral_norm, scope='init_resbk')",
                            "Call"
                        ],
                        [
                            "transpose_residual_block(out, channels=channels, spectral_norm=spectral_norm, scope='fd_resbk')",
                            "Call"
                        ],
                        [
                            "dense_5 * 70 + 50",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(out, shape=[-1, out_classes, mini_beat_per_seg])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, out_classes, mini_beat_per_seg]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2D_112": {
                "variable": {
                    "value": "conv_2d",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(4",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "f'{scope}_conv_in_sn'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "name_scope_145": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ],
                        [
                            "'attention'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'transblock'",
                            "MethodArgument"
                        ],
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AveragePooling2D_171": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_175": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ],
                        [
                            "'attention'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'transblock'",
                            "MethodArgument"
                        ],
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_211": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ],
                        [
                            "'attention'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'transblock'",
                            "MethodArgument"
                        ],
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_248": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ],
                        [
                            "'attention'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'transblock'",
                            "MethodArgument"
                        ],
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_310": {
                "name": {
                    "value": "transcription_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_355": {
                "inputs": {
                    "value": "inp_wrap",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(120, 120, mini_beat_per_seg), name='input_tensor')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(attn_out_2, shape=[-1, ori_shape[1], ori_shape[2], ori_shape[3] // 2])",
                            "Call"
                        ],
                        [
                            "conv_sa(out, channels, kernel=(1, 1), strides=(1, 1), scope='out_attn_conv')",
                            "Call"
                        ],
                        [
                            "conv_sa(x, channels, kernel=(3, 3), strides=(1, 1), pad=1, pad_type='reflect', spectral_norm=spectral_norm, scope=f'{scope}_res1')",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.ELU()(out)",
                            "Call"
                        ],
                        [
                            "conv_sa(out, channels, kernel=(3, 3), strides=(1, 1), pad=1, pad_type='reflect', spectral_norm=spectral_norm, scope=f'{scope}_res2')",
                            "Call"
                        ],
                        [
                            "down_sample(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.ELU()(x)",
                            "Call"
                        ],
                        [
                            "conv_sa(out, channels, kernel=(3, 3), strides=(1, 1), pad=1, pad_type='reflect', spectral_norm=spectral_norm, scope=f'{scope}_res1')",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.ELU()(out)",
                            "Call"
                        ],
                        [
                            "conv_sa(out, channels, kernel=(3, 3), strides=(1, 1), pad=1, pad_type='reflect', spectral_norm=spectral_norm, scope=f'{scope}_res2')",
                            "Call"
                        ],
                        [
                            "down_sample(out)",
                            "Call"
                        ],
                        [
                            "residual_block(pad_out, channels=channels, spectral_norm=spectral_norm, scope='init_resbk')",
                            "Call"
                        ],
                        [
                            "transpose_residual_block(out, channels=channels, spectral_norm=spectral_norm, scope='fd_resbk')",
                            "Call"
                        ],
                        [
                            "dense_5 * 70 + 50",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(out, shape=[-1, out_classes, mini_beat_per_seg])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "v_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u_ / (tf.reduce_sum(u_ ** 2) ** 0.5 + self.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w_reshaped)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "u_",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.v",
                            "Attribute"
                        ],
                        [
                            "v_ / (tf.reduce_sum(v_ ** 2) ** 0.5 + self.eps)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "w_reshaped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.w, [-1, self.w_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_76": {
                "a": {
                    "value": "u_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.u",
                            "Attribute"
                        ],
                        [
                            "u_ / (tf.reduce_sum(u_ ** 2) ** 0.5 + self.eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_111": {
                "name": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ],
                        [
                            "'attention'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'transblock'",
                            "MethodArgument"
                        ],
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_159": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "conv_sa(x, channels, kernel=(1, 1), strides=(1, 1), spectral_norm=spectral_norm, scope=f'{scope}_shortcut')",
                            "Call"
                        ],
                        [
                            "down_sample(x)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_161": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "conv_sa(x, channels, kernel=(1, 1), strides=(1, 1), spectral_norm=spectral_norm, scope=f'{scope}_shortcut')",
                            "Call"
                        ],
                        [
                            "down_sample(x)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_165": {
                "filters": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(4",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "f'{scope}_conv'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "name_scope_212": {
                "name": {
                    "value": "res1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_225": {
                "name": {
                    "value": "res2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_238": {
                "name": {
                    "value": "shortcut",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_250": {
                "name": {
                    "value": "res1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_263": {
                "name": {
                    "value": "res2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_312": {
                "value": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_314": {
                "tensor": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp_wrap * tf.constant(100)",
                            "BinOp"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tf_diff2_pady",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_341": {
                "units": {
                    "value": "2 ** 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "mdl_nn_mlp_o1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_342": {
                "units": {
                    "value": "2 ** 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "mdl_nn_mlp_o2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_345": {
                "units": {
                    "value": "2 ** 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "mdl_nn_mlp_o3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_348": {
                "units": {
                    "value": "2 ** 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "mdl_nn_mlp_of2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_349": {
                "units": {
                    "value": "out_classes * mini_beat_per_seg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "mdl_nn_mlp_of3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TruncatedNormal_39": {
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TruncatedNormal_47": {
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_203": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_279": {
                "name": {
                    "value": "shortcut",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_70": {
                "a": {
                    "value": "w_reshaped",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.w, [-1, self.w_shape[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_316": {
                "input": {
                    "value": "pad_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_tensor - padded_input",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.zeros_like(pad_out)[:, :, :1], pad_out[:, :, 1:]], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([input_tensor, pad_out], axis=-1, name='tf_diff2_concat')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_340": {
                "input_tensor": {
                    "value": "shape_list(out_2)[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "input_tensor": {
                    "value": "v_ ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "input_tensor": {
                    "value": "u_ ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/models/t2t.py": {
        "tensorflow": {
            "convert_to_tensor_27": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_28": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_33": {
                "variable": {
                    "value": "cast_x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_112": {
                "variable": {
                    "value": "padded_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, height_padding], [0, width_padding], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, height_padding], [0, width_padding], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [memory_flange[0], memory_flange[1]], [memory_flange[0], memory_flange[1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "eye_122": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "block_shape[0] * block_shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, x_shape[2], x_shape[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(indices, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.eye(block_shape[0] * block_shape[1])",
                            "Call"
                        ],
                        [
                            "reshape_range(kernel, 0, 1, [block_shape[0], block_shape[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, block_stride[0], block_stride[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_blocks, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_146": {
                "variable": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_147": {
                "variable": {
                    "value": "x_new",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(x, [x_shape[0], x_shape[1], -1, x_shape[-1]]), [2, 0, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_202": {
                "variable": {
                    "value": "emb_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_210": {
                "variable": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, [x_shape[0], x_shape[1], -1, x_shape[-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_212": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_213": {
                "variable": {
                    "value": "scattered_x",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(x, [x_shape[0], x_shape[1], -1, x_shape[-1]]), [2, 0, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_t_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(x_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_214": {
                "variable": {
                    "value": "scattered_x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "scattered_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.scatter_nd(indices, x_t, x_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(scattered_x, [1, 2, 0, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_400": {
                "variable": {
                    "value": "pos_indice",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(timesteps), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_413": {
                "variable": {
                    "value": "pos_enc",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "pos_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[pos / np.power(10000, 2 * i / n_units) for i in np.arange(n_units, dtype=np.float32)] for pos in np.arange(timesteps, dtype=np.float32)])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(pos_enc, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros(shape=[1, n_units]), pos_enc[1:, :]], 0)",
                            "Call"
                        ],
                        [
                            "pos_enc_initializer(shape=(n_vectors, n_units))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_417": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "pos_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[pos / np.power(10000, 2 * i / n_units) for i in np.arange(n_units, dtype=np.float32)] for pos in np.arange(timesteps, dtype=np.float32)])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(pos_enc, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.zeros(shape=[1, n_units]), pos_enc[1:, :]], 0)",
                            "Call"
                        ],
                        [
                            "pos_enc_initializer(shape=(n_vectors, n_units))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "pos_indice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(timesteps), 0), [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "VarianceScaling_428": {
                "variable": {
                    "value": "pos_enc_initializer",
                    "type": "Name",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "fan_avg",
                    "type": "Constant",
                    "possible_values": []
                },
                "distribution": {
                    "value": "uniform",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_433": {
                "variable": {
                    "value": "orig",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_enc[center]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_22": {
                "tensor": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "target_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t_shape[:i] + shape + t_shape[j:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape[:-1] + [n, m // n]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_83": {
                "a": {
                    "value": "split_last_dimension(x, num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_prod_136": {
                "variable": {
                    "value": "num_blocks",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape_list(indices)[:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_138": {
                "x": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_149": {
                "a": {
                    "value": "x_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(x_t, indices)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 3, 0, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape[:-2] + [a * b]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_203": {
                "x": {
                    "value": "tf.equal(emb_sum, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "tensor": {
                    "value": "scattered_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.scatter_nd(indices, x_t, x_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(scattered_x, [1, 2, 0, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_261": {
                "variable": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_266": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_320": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_326": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "maybe_upcast(logits, activation_dtype, weight_dtype)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_375": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, height_padding], [0, width_padding], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, height_padding], [0, width_padding], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [memory_flange[0], memory_flange[1]], [memory_flange[0], memory_flange[1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_376": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, height_padding], [0, width_padding], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, height_padding], [0, width_padding], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [memory_flange[0], memory_flange[1]], [memory_flange[0], memory_flange[1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_388": {
                "variable": {
                    "value": "attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.compat.v1.to_float(embedding_to_padding(k_new)) * -1000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_395": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d')",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, v_shape[2], v_shape[3], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_416": {
                "variable": {
                    "value": "pos_enc",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros(shape=[1, n_units]), pos_enc[1:, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_438": {
                "variable": {
                    "value": "mix",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[left, orig, right]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_447": {
                "values": {
                    "value": "pos_enc_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Dense_475": {
                "variable": {
                    "value": "self.q_emb_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation_func",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_476": {
                "variable": {
                    "value": "self.k_emb_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation_func",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_477": {
                "variable": {
                    "value": "self.v_emb_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation_func",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_478": {
                "variable": {
                    "value": "self.out_dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation_func",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_479": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNormalization_480": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_487": {
                "variable": {
                    "value": "q_heads",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(q_emb, self.n_heads, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_488": {
                "variable": {
                    "value": "k_heads",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(k_emb, self.n_heads, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_489": {
                "variable": {
                    "value": "v_heads",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(v_emb, self.n_heads, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_491": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(q_emb, self.n_heads, 2), 0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(k_heads, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_511": {
                "variable": {
                    "value": "exp_attn_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_attn_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn_weights / shape_list(k_heads)[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.map_fn(tril_masking, scaled_attn_weights)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(input=scaled_attn_weights, diagonal=diag)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_514": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "exp_attn_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attn_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(exp_attn_weights)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(v_emb, self.n_heads, 2), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_522": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(outputs, self.n_heads, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "warning_40": {
                "msg": {
                    "value": "\"Cast for %s may induce copy from '%s' to '%s'\"",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'(eager Tensor)'",
                            "Constant"
                        ],
                        [
                            "x.name",
                            "Attribute"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_129": {
                "x": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_183": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_202": {
                "x": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "equal_203": {
                "x": {
                    "value": "emb_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(emb), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_shape[0], x_shape[1], -1, x_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_230": {
                "x": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "maybe_upcast(logits, activation_dtype, weight_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "dot_product_attention",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_333": {
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "cast_like(weights, q)",
                            "Call"
                        ],
                        [
                            "dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_367": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "local_self_attention_2d",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_400": {
                "input": {
                    "value": "tf.range(timesteps)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_443": {
                "variable": {
                    "value": "mix",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(tf.tile(mix[0], [n_left_pad]), [n_left_pad, n_units]), mix]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_445": {
                "variable": {
                    "value": "mix",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[mix, tf.reshape(tf.tile(mix[-1], [n_right_pad]), [n_right_pad, n_units])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_495": {
                "variable": {
                    "value": "rel_pos_enc_k",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(a=q_heads, perm=[1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rel_pos_enc_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "relative_positional_encoding(n_steps=tk, n_units=dk, max_dist=self.max_dist)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.transpose(a=q_heads, perm=[1, 0, 2]), rel_pos_enc_k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=rel_pos_enc_k, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_496": {
                "variable": {
                    "value": "rel_pos_enc_k",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "rel_pos_enc_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "relative_positional_encoding(n_steps=tk, n_units=dk, max_dist=self.max_dist)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.transpose(a=q_heads, perm=[1, 0, 2]), rel_pos_enc_k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=rel_pos_enc_k, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_501": {
                "variable": {
                    "value": "diag_vals",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_attn_weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LinearOperatorLowerTriangular_502": {
                "variable": {
                    "value": "tril_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tril": {
                    "value": "diag_vals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(scaled_attn_weights[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_dense_502": {
                "variable": {
                    "value": "tril_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "map_fn_505": {
                "variable": {
                    "value": "scaled_attn_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "fn": {
                    "value": "tril_masking",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda x: tf.where(tril_mask == 0, tril_paddings, x)",
                            "Lambda"
                        ]
                    ]
                },
                "elems": {
                    "value": "scaled_attn_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn_weights / shape_list(k_heads)[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.map_fn(tril_masking, scaled_attn_weights)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(input=scaled_attn_weights, diagonal=diag)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_508": {
                "variable": {
                    "value": "diag",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_attn_weights[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_diag_509": {
                "variable": {
                    "value": "scaled_attn_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_attn_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn_weights / shape_list(k_heads)[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.map_fn(tril_masking, scaled_attn_weights)",
                            "Call"
                        ],
                        [
                            "tf.linalg.set_diag(input=scaled_attn_weights, diagonal=diag)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "diag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros_like(scaled_attn_weights[:, :, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_518": {
                "variable": {
                    "value": "rel_pos_enc_v",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(a=exp_attn_weights, perm=[1, 0, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rel_pos_enc_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "relative_positional_encoding(n_steps=tv, n_units=dv, max_dist=self.max_dist)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.transpose(a=exp_attn_weights, perm=[1, 0, 2]), rel_pos_enc_v)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=rel_pos_enc_v, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_519": {
                "variable": {
                    "value": "rel_pos_enc_v",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "rel_pos_enc_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "relative_positional_encoding(n_steps=tv, n_units=dv, max_dist=self.max_dist)",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.transpose(a=exp_attn_weights, perm=[1, 0, 2]), rel_pos_enc_v)",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=rel_pos_enc_v, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_prod_144": {
                "input_tensor": {
                    "value": "x_shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "range_400": {},
            "split_487": {
                "value": {
                    "value": "q_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.q_emb_dense(q)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_488": {
                "value": {
                    "value": "k_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.k_emb_dense(k)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_489": {
                "value": {
                    "value": "v_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.v_emb_dense(v)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_491": {
                "a": {
                    "value": "k_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(k_emb, self.n_heads, 2), 0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_522": {
                "value": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(pos_enc, pos_indice)",
                            "Call"
                        ],
                        [
                            "outputs * n_units ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(exp_attn_weights, v_heads)",
                            "Call"
                        ],
                        [
                            "outputs + q",
                            "BinOp"
                        ],
                        [
                            "tf.concat(tf.split(outputs, self.n_heads, 0), 2)",
                            "Call"
                        ],
                        [
                            "self.out_dense(outputs)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_388": {
                "x": {
                    "value": "embedding_to_padding(k_new)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_416": {
                "shape": {
                    "value": "[1, n_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_495": {
                "a": {
                    "value": "q_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(q_emb, self.n_heads, 2), 0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_503": {
                "input": {
                    "value": "tril_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.linalg.LinearOperatorLowerTriangular(diag_vals).to_dense()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_504": {
                "condition": {
                    "value": "tril_mask == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tril_paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(tril_mask) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_518": {
                "a": {
                    "value": "exp_attn_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attn_weights)",
                            "Call"
                        ],
                        [
                            "self.dropout(exp_attn_weights)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_443": {
                "tensor": {
                    "value": "tf.tile(mix[0], [n_left_pad])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_left_pad, n_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_445": {
                "tensor": {
                    "value": "tf.tile(mix[-1], [n_right_pad])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_right_pad, n_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_443": {
                "input": {
                    "value": "mix[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_left_pad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_445": {
                "input": {
                    "value": "mix[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_right_pad]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/models/u_net.py": {
        "tensorflow": {
            "Input_69": {
                "variable": {
                    "value": "input_score",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(timesteps, feature_num, ch_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_score_48",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Input_218": {
                "variable": {
                    "value": "input_score",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(timesteps, feature_num, ch_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_score_48",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_138": {
                "inputs": {
                    "value": "input_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Input(shape=(timesteps, feature_num, ch_num), name='input_score_48')",
                            "Call"
                        ],
                        [
                            "Input(shape=(timesteps, feature_num, ch_num), name='input_score_48')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Conv2D(out_class, (1, 1), strides=(1, 1), padding='same', name='prediction')(de_l4)",
                            "Call"
                        ],
                        [
                            "Conv2D(out_class, (1, 1), strides=(1, 1), padding='same', name='prediction')(de_l4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_179": {
                "variable": {
                    "value": "self.q_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_q_conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_180": {
                "variable": {
                    "value": "self.k_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_k_conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_181": {
                "variable": {
                    "value": "self.v_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "gen_v_conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_182": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_289": {
                "inputs": {
                    "value": "input_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Input(shape=(timesteps, feature_num, ch_num), name='input_score_48')",
                            "Call"
                        ],
                        [
                            "Input(shape=(timesteps, feature_num, ch_num), name='input_score_48')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Conv2D(out_class, (1, 1), strides=(1, 1), padding='same', name='prediction')(de_l4)",
                            "Call"
                        ],
                        [
                            "Conv2D(out_class, (1, 1), strides=(1, 1), padding='same', name='prediction')(de_l4)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNormalization_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ],
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_30": {
                "filters": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ],
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_36": {
                "filters": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Add_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ],
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_52": {
                "filters": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ],
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2DTranspose_56": {
                "filters": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Add_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_70": {
                "filters": {
                    "value": "2 ** 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_106": {
                "filters": {
                    "value": "2 ** 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Add_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_114": {
                "filters": {
                    "value": "2 ** 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Add_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_121": {
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_122": {
                "filters": {
                    "value": "2 ** 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Add_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_130": {
                "filters": {
                    "value": "2 ** 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Add_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_136": {
                "filters": {
                    "value": "out_class",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "prediction",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_219": {
                "filters": {
                    "value": "2 ** 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_251": {
                "filters": {
                    "value": "2 ** 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Add_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_259": {
                "rate": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_260": {
                "filters": {
                    "value": "2 ** 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Add_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_269": {
                "rate": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_270": {
                "filters": {
                    "value": "2 ** 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Add_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_279": {
                "rate": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_280": {
                "filters": {
                    "value": "2 ** 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Add_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_286": {
                "rate": {
                    "value": "0.4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_287": {
                "filters": {
                    "value": "out_class",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "prediction",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_28": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_34": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_41": {
                "filters": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_50": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_54": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_59": {
                "filters": {
                    "value": "channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNormalization_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_102": {
                "filters": {
                    "value": "2 ** 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_104": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_111": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_119": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_127": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_134": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_246": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_248": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_257": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_266": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_276": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_285": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_92": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_94": {
                "filters": {
                    "value": "2 ** 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNormalization_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_98": {
                "filters": {
                    "value": "2 ** 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "2 ** ii",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_112": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_120": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_128": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_258": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_268": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Activation_278": {
                "activation": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/models/utils.py": {
        "tensorflow": {
            "convert_to_tensor_7": {
                "variable": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_14": {
                "variable": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(input_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_11": {
                "input": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(input_tensor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "omnizart/music/app.py": {
        "tensorflow": {
            "Adam_310": {
                "variable": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_515": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "EarlyStopping_325": {
                "patience": {
                    "value": "settings.training.early_stop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_acc",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_326": {
                "filepath": {
                    "value": "model_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "jpath(settings.model.save_path, model_name)",
                            "Call"
                        ]
                    ]
                },
                "monitor": {
                    "value": "val_accuracy",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LearningRateScheduler_327": {
                "schedule": {
                    "value": "lambda epoch, lr: lr_scheduler(epoch, lr, update_after=3, dec_every=3, dec_rate=0.25)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "log_516": {
                "x": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.math.sigmoid(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_517": {
                "input_tensor": {
                    "value": "ent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-prob * tf.math.log(prob)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BinaryCrossentropy_308": {
                "label_smoothing": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/music/losses.py": {
        "tensorflow": {
            "sigmoid_40": {
                "variable": {
                    "value": "sigmoid_p",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "prediction_tensor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_41": {
                "variable": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmoid_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(prediction_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_42": {
                "variable": {
                    "value": "pos_p_sub",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "target_tensor >= sigmoid_p",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "target_tensor - sigmoid_p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(sigmoid_p)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_43": {
                "variable": {
                    "value": "neg_p_sub",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "target_tensor > zeros",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(sigmoid_p)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sigmoid_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(prediction_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_49": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(weights, dtype=per_entry_cross_ent.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "per_entry_cross_ent.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "input_tensor": {
                    "value": "per_entry_cross_ent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-alpha * pos_p_sub ** gamma * tf.math.log(tf.clip_by_value(sigmoid_p, 1e-08, 1.0)) - (1 - alpha) * neg_p_sub ** gamma * tf.math.log(tf.clip_by_value(1.0 - sigmoid_p, 1e-08, 1.0))",
                            "BinOp"
                        ],
                        [
                            "per_entry_cross_ent * weights",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_74": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-target * tf.math.log(y_pred) - neg_target * tf.math.log(neg_y_pred)",
                            "BinOp"
                        ],
                        [
                            "loss * weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_value_63": {
                "t": {
                    "value": "v_in",
                    "type": "Name",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "x": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clip_value(tf.math.sigmoid(y_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_44": {
                "x": {
                    "value": "tf.clip_by_value(sigmoid_p, 1e-08, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_46": {
                "x": {
                    "value": "tf.clip_by_value(1.0 - sigmoid_p, 1e-08, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_69": {
                "x": {
                    "value": "neg_y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clip_value(1 - y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_45": {
                "t": {
                    "value": "sigmoid_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(prediction_tensor)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_46": {
                "t": {
                    "value": "1.0 - sigmoid_p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/patch_cnn/app.py": {
        "tensorflow": {
            "Adam_242": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "settings.training.init_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EarlyStopping_258": {
                "patience": {
                    "value": "settings.training.early_stop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_259": {
                "filepath": {
                    "value": "jpath(model_save_path, 'weights.h5')",
                    "type": "Call",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/vocal/app.py": {
        "tensorflow": {
            "Adam_293": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "settings.training.init_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EarlyStopping_308": {
                "patience": {
                    "value": "settings.training.early_stop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_309": {
                "filepath": {
                    "value": "model_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "jpath(settings.model.save_path, model_name)",
                            "Call"
                        ]
                    ]
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "omnizart/vocal_contour/app.py": {
        "tensorflow": {
            "to_categorical_393": {
                "y": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label_extractor.extract_label(data_pair[1], t_unit=t_unit)",
                            "Call"
                        ],
                        [
                            "np.pad(label, ((0, diff), (0, 0)), constant_values=0)",
                            "Call"
                        ],
                        [
                            "label[:flen]",
                            "Subscript"
                        ],
                        [
                            "self.hdf_refs[hdf_name]['label']",
                            "Subscript"
                        ],
                        [
                            "self._pad(label)",
                            "Call"
                        ],
                        [
                            "label[slice_start:slice_start + self.slice_hop]",
                            "Subscript"
                        ],
                        [
                            "label[:feat_len]",
                            "Subscript"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/vocal/test_app.py": {
        "tensorflow": {}
    }
}