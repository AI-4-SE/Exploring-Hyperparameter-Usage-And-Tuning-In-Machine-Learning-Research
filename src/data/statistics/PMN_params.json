{
    "result/compute_map.py": {
        "sklearn": {}
    },
    "utils/confusion_matrix.py": {
        "sklearn": {
            "load_iris_10": {
                "variable": {
                    "value": "iris",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_16": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SVC_21": {
                "variable": {
                    "value": "classifier",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "Constant",
                    "possible_values": []
                },
                "C": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "confusion_matrix_40": {
                "variable": {
                    "value": "cm",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "classifier.fit(X_train, y_train).predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_labels_42": {
                "*ys": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/hico_dataset.py": {
        "torch": {}
    },
    "datasets/hico_run_faster_rcnn.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/hico_train_val_test_data.py": {
        "torch": {
            "device_258": {
                "variable": {
                    "value": "devise",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/vcoco_dataset.py": {
        "torch": {}
    },
    "datasets/vcoco_run_faster_rcnn.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hico_eval.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "HicoDataset(data_const=data_const, subset='test', test=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.main_pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and args.gpu else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_36": {
                "variable": {
                    "value": "pg_checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and args.gpu else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hico_train.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['train']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'train': train_dataset, 'val': val_dataset}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['val']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'train': train_dataset, 'val': val_dataset}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.main_pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_64": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_65": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=0.9, weight_decay=0)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0, amsgrad=True)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.scheduler_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_54": {
                "variable": {
                    "value": "checkpoints",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_59": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(args.main_pretrained, map_location=device)",
                            "Call"
                        ],
                        [
                            "{'lr': args.lr, 'b_s': args.batch_size, 'bias': args.bias, 'bn': args.bn, 'dropout': args.d_p, 'o_c_l': args.o_c_l, 'b_l': args.b_l, 'last_h_c': args.last_h_c, 'a_n': args.a_n, 'classifier_mod': args.c_m, 'n_layers': args.n_layers, 'agg_first': args.agg_first, 'attn': args.attn, 'state_dict': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save_dir, args.exp_ver, save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.main_pretrained_hico",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() and args.gpu else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_44": {
                "variable": {
                    "value": "pg_checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained_hico",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() and args.gpu else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_49": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.main_pretrained_vcoco",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() and args.gpu else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_51": {
                "variable": {
                    "value": "pg_checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained_vcoco",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() and args.gpu else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/gcn.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, len(self.m.nonzero()), dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_64": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "X.permute(1, 0, 2).contiguous().view(k_n, -1)",
                            "Call"
                        ],
                        [
                            "self.A.mm(X).view(k_n, b_n, -1).permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.fc1(X)",
                            "Call"
                        ],
                        [
                            "X.permute(1, 0, 2).contiguous().view(k_n, -1)",
                            "Call"
                        ],
                        [
                            "self.A.mm(X).view(k_n, b_n, -1).permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "X[:, [0, 5, 6, 11, 12], :]",
                            "Subscript"
                        ],
                        [
                            "self.batchnorm(X)",
                            "Call"
                        ],
                        [
                            "F.relu(X)",
                            "Call"
                        ],
                        [
                            "self.batchnorm(X)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(X))",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_25": {
                "variable": {
                    "value": "self.batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.m.nonzero())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_54": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/no_frill_pose_net.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 17 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_num",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_13": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1.view(x1.shape[0], -1), x2.view(x2.shape[0], -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "model/pgception.py": {
        "torch": {
            "zeros_11": {
                "variable": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(keypoint_num, keypoint_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_15": {
                "variable": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(keypoint_num, keypoint_num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diag_20": {
                "variable": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(d, -0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_24": {
                "variable": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(d, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_33": {
                "variable": {
                    "value": "adj0",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "keypoint_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "17",
                            "Constant"
                        ],
                        [
                            "17",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mid_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mid_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.linear1(x1)",
                            "Call"
                        ],
                        [
                            "self.batchnorm1(x1)",
                            "Call"
                        ],
                        [
                            "F.relu(x1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_102": {
                "variable": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.linear2(x2)",
                            "Call"
                        ],
                        [
                            "self.batchnorm2(x2)",
                            "Call"
                        ],
                        [
                            "F.relu(x2)",
                            "Call"
                        ],
                        [
                            "self.dropout(x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_89": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_91": {
                "variable": {
                    "value": "self.batchnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_92": {
                "variable": {
                    "value": "self.batchnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(sum(self.out_channel_list[self.branch_list]), last_h_c, bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64 * 17, last_h_c, bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_179": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.block1(x1, x2)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "x.mean(1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.batchnorm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_20": {
                "input": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A.sum(1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_24": {
                "input": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A.sum(1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(self.out_channel_list[self.branch_list[:-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(self.out_channel_list[self.branch_list])",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_137": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_139": {
                "variable": {
                    "value": "self.batchnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.linear_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.out_channel_list[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "self.classifier_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64 * 5, last_h_c, bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_187": {
                "variable": {
                    "value": "x_part",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x_part",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.linear_part(x_part)",
                            "Call"
                        ],
                        [
                            "self.batchnorm_part(x_part)",
                            "Call"
                        ],
                        [
                            "F.relu(x_part)",
                            "Call"
                        ],
                        [
                            "self.dropout(x_part)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "in_features": {
                    "value": "sum(self.out_channel_list[self.branch_list])",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "last_h_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_124": {
                "num_features": {
                    "value": "last_h_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_125": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "p": {
                    "value": "drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "last_h_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "64 * 17",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "last_h_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_142": {
                "num_features": {
                    "value": "last_h_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "p": {
                    "value": "drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_145": {
                "in_features": {
                    "value": "last_h_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_150": {
                "variable": {
                    "value": "self.batchnorm_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "64 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "last_h_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_153": {
                "num_features": {
                    "value": "last_h_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_154": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_155": {
                "p": {
                    "value": "drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_156": {
                "in_features": {
                    "value": "last_h_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "model/vsgats/graph_head.py": {
        "torch": {}
    },
    "model/vsgats/grnn.py": {
        "torch": {
            "cat_17": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge.src['n_f'], edge.data['s_f'], edge.dst['n_f']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "feat_lang",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge.src['word2vec'], edge.dst['word2vec']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge.src['n_f'], edge.data['s_f'], edge.dst['n_f']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "feat_lang",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge.src['word2vec'], edge.data['s_f'], edge.dst['word2vec']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge.src['n_f'], edge.data['s_f'], edge.dst['n_f']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "feat_lang",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge.src['word2vec'], edge.dst['word2vec']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node.data['n_f'], node.data['z_f']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "feat_lang",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node.data['word2vec'], node.data['z_f_lang']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node.data['n_f'], node.data['z_f']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "feat_lang",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node.data['word2vec'], node.data['z_f_lang']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.mailbox['a_feat']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_132": {
                "variable": {
                    "value": "alpha_lang",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.mailbox['a_feat_lang']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_136": {
                "variable": {
                    "value": "z_f",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha * z_raw_f",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_139": {
                "variable": {
                    "value": "z_f_lang",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_lang * z_raw_f_lang",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/vsgats/model.py": {
        "torch": {
            "eye_239": {
                "variable": {
                    "value": "e_data",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_240": {
                "variable": {
                    "value": "n_data",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node.data['n_f_original'], node.data['new_n_f']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "feat_lang",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node.data['word2vec_original'], node.data['new_n_f_lang']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge.dst['new_n_f'], edge.dst['new_n_f_lang'], edge.data['s_f'], edge.src['new_n_f_lang'], edge.src['new_n_f']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/vsgats/s3d_g.py": {
        "torch": {
            "rand_148": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 64, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_21": {
                "variable": {
                    "value": "self.conv3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.sep_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "down",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "branch1_conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "branch2_conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_88": {
                "variable": {
                    "value": "branch3_pool",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "branch3_pool",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_0, out_1, out_2, out_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.feature_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('sepConv1', sep_conv(in_channel, 64, kernel_size=7, stride=2, padding=3, gate=gate)), ('maxPool1', nn.MaxPool3d(kernel_size=(1, 3, 3), stride=(1, 2, 2), padding=(0, 1, 1))), ('basicConv3d', BasicConv3d(64, 64, kernel_size=1, stride=1)), ('sep_conv2', sep_conv(64, 192, kernel_size=3, stride=1, padding=1, gate=gate)), ('maxPool2', nn.MaxPool3d(kernel_size=(1, 3, 3), stride=(1, 2, 2), padding=(0, 1, 1))), ('sepInc_3b', sep_inc(192, [64, 96, 128, 16, 32, 32], gate=gate)), ('sepInc_3c', sep_inc(256, [128, 128, 192, 32, 96, 64], gate=gate)), ('maxPool3', nn.MaxPool3d(kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))), ('sepInc_4b', sep_inc(480, [192, 96, 208, 16, 48, 64], gate=gate)), ('sepInc_4c', sep_inc(512, [160, 112, 224, 24, 64, 64], gate=gate)), ('sepInc_4d', sep_inc(512, [128, 128, 256, 24, 64, 64], gate=gate)), ('sepInc_4e', sep_inc(512, [112, 144, 288, 32, 64, 64], gate=gate)), ('sepInc_4f', sep_inc(528, [256, 160, 320, 32, 128, 128], gate=gate)), ('temp_conv', nn.Conv3d(832, 832, kernel_size=(initial_temporal_size / 4, 1, 1), stride=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.feature_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('sepInc_5b', sep_inc(832, [256, 160, 320, 32, 128, 128], gate=gate)), ('sepInc_5c', sep_inc(832, [384, 192, 384, 48, 128, 128], gate=gate)), ('avgPool', nn.AvgPool3d(kernel_size=(1, 7, 7), stride=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_24": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_58": {
                "variable": {
                    "value": "self.squeeze",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_59": {
                "variable": {
                    "value": "self.excitation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_60": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_106": {
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_109": {
                "kernel_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_112": {
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_118": {
                "in_channels": {
                    "value": "832",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "832",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(initial_temporal_size / 4, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool3d_125": {
                "kernel_size": {
                    "value": "(1, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/vsgats/utils.py": {
        "torch": {
            "ModuleList_36": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feat",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_calss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sigmoid_72": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "block",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([(f'L{i}', layer)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_48": {
                "variable": {
                    "value": "bn",
                    "type": "Name",
                    "possible_values": []
                },
                "num_features": {
                    "value": "layer_sizes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sigmoid_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_54": {
                "p": {
                    "value": "drop_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_21": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/vsgats/vcoco_model.py": {
        "torch": {
            "eye_245": {
                "variable": {
                    "value": "e_data",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_246": {
                "variable": {
                    "value": "n_data",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node.data['n_f_original'], node.data['new_n_f']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "feat_lang",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node.data['word2vec_original'], node.data['new_n_f_lang']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_35": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "feat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge.dst['new_n_f'], edge.dst['new_n_f_lang'], edge.data['s_f'], edge.src['new_n_f_lang'], edge.src['new_n_f']]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train_tune.py": {
        "torch": {
            "DataLoader_29": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['train']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'train': train_dataset, 'val': val_dataset}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['val']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'train': train_dataset, 'val': val_dataset}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_51": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_52": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=0.9, weight_decay=0)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1 / 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_43": {
                "variable": {
                    "value": "checkpoints",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/generalized_rcnn.py": {
        "torch": {}
    },
    "utils/roi_heads.py": {
        "torch": {
            "cat_27": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "[l[idxs] for (l, idxs) in zip(gt_labels, mask_matched_idxs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.arange(num_classes, device=device)",
                            "Call"
                        ],
                        [
                            "labels.view(1, -1).expand_as(scores)",
                            "Call"
                        ],
                        [
                            "labels[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "[r['labels'] for r in result]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "regression_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "self.box_coder.encode(matched_gt_boxes, proposals)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_30": {
                "variable": {
                    "value": "classification_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "[l[idxs] for (l, idxs) in zip(gt_labels, mask_matched_idxs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.arange(num_classes, device=device)",
                            "Call"
                        ],
                        [
                            "labels.view(1, -1).expand_as(scores)",
                            "Call"
                        ],
                        [
                            "labels[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "[r['labels'] for r in result]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "nonzero_35": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_35": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_40": {
                "variable": {
                    "value": "box_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "box_regression[sampled_pos_inds_subset, labels_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "regression_targets[sampled_pos_inds_subset]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "[l[idxs] for (l, idxs) in zip(gt_labels, mask_matched_idxs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.arange(num_classes, device=device)",
                            "Call"
                        ],
                        [
                            "labels.view(1, -1).expand_as(scores)",
                            "Call"
                        ],
                        [
                            "labels[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "[r['labels'] for r in result]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "arange_72": {
                "variable": {
                    "value": "index",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "rois",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[matched_idxs[:, None], boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "[l[idxs] for (l, idxs) in zip(gt_labels, mask_matched_idxs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.arange(num_classes, device=device)",
                            "Call"
                        ],
                        [
                            "labels.view(1, -1).expand_as(scores)",
                            "Call"
                        ],
                        [
                            "labels[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "labels.flatten()",
                            "Call"
                        ],
                        [
                            "[r['labels'] for r in result]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "mask_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[project_masks_on_boxes(m, p, i, discretization_size) for (m, p, i) in zip(gt_masks, proposals, mask_matched_idxs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(mask_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_120": {
                "variable": {
                    "value": "mask_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_logits[torch.arange(labels.shape[0], device=labels.device), labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "mask_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[project_masks_on_boxes(m, p, i, discretization_size) for (m, p, i) in zip(gt_masks, proposals, mask_matched_idxs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(mask_targets, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "xy_preds",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(rois), 3, num_keypoints)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "maps.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "end_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(rois), num_keypoints)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "maps.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "keypoint_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "heatmaps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lin_ind * valid",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(valid_loc & vis).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valid, dim=0).to(dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(valid).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_224": {
                "variable": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(valid_loc & vis).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(valid, dim=0).to(dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(valid).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_224": {
                "variable": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_233": {
                "variable": {
                    "value": "keypoint_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "keypoint_logits[valid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "keypoint_targets[valid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_264": {
                "variable": {
                    "value": "boxes_exp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expand_boxes(boxes, scale).to(dtype=torch.int64).tolist()",
                            "Call"
                        ],
                        [
                            "box_ops.clip_boxes_to_image(boxes, image_shape)",
                            "Call"
                        ],
                        [
                            "np.delete(boxes.cpu().detach().numpy(), [12, 26, 29, 30, 45, 66, 68, 69, 71, 83], axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(boxes).cuda()",
                            "Call"
                        ],
                        [
                            "boxes[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_275": {
                "variable": {
                    "value": "padded_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask.expand((1, 1, -1, -1))",
                            "Call"
                        ],
                        [
                            "misc_nn_ops.interpolate(mask, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "mask[0][0]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding,) * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_293": {
                "variable": {
                    "value": "im_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(im_h, im_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_475": {
                "variable": {
                    "value": "pred_scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_425": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img | neg_inds_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_425": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_189": {
                "input": {
                    "value": "maps[i][None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(roi_map_height, roi_map_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_315": {
                "tensors": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[paste_mask_in_image(m[0], b, im_h, im_w) for (m, b) in zip(masks, boxes)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(res, dim=0)[:, None]",
                            "Subscript"
                        ],
                        [
                            "masks.new_empty((0, 1, im_h, im_w))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_431": {
                "tensors": {
                    "value": "(proposal, gt_box)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_493": {
                "variable": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expand_boxes(boxes, scale).to(dtype=torch.int64).tolist()",
                            "Call"
                        ],
                        [
                            "box_ops.clip_boxes_to_image(boxes, image_shape)",
                            "Call"
                        ],
                        [
                            "np.delete(boxes.cpu().detach().numpy(), [12, 26, 29, 30, 45, 66, 68, 69, 71, 83], axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(boxes).cuda()",
                            "Call"
                        ],
                        [
                            "boxes[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "boxes.reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_494": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.delete(scores.cpu().detach().numpy(), [12, 26, 29, 30, 45, 66, 68, 69, 71, 83], axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scores).cuda()",
                            "Call"
                        ],
                        [
                            "scores[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "scores.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_507": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "class_logits.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_521": {
                "variable": {
                    "value": "inds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "scores > self.score_thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_521": {
                "variable": {
                    "value": "inds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_121": {
                "start": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_203": {
                "start": {
                    "value": "num_keypoints",
                    "type": "Name",
                    "possible_values": [
                        [
                            "maps.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nonzero_579": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[img_id] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_579": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_611": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "labels[img_id] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_611": {
                "variable": {
                    "value": "pos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/vis_tool.py": {
        "torch": {}
    },
    "vcoco_eval.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_33": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.main_pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and args.gpu else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_35": {
                "variable": {
                    "value": "pg_checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() and args.gpu else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "VcocoDataset(data_const=data_const, subset='vcoco_test', pg_only=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vcoco_train.py": {
        "torch": {
            "DataLoader_26": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['train']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'train': train_dataset, 'val': val_dataset}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['val']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'train': train_dataset, 'val': val_dataset}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.main_pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_63": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_64": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr, momentum=0.9, weight_decay=0)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0, amsgrad=True)",
                            "Call"
                        ],
                        [
                            "optim.Adam([{'params': base_params, 'lr': args.lr}, {'params': model.classifier[4].parameters(), 'lr': 3e-05}], weight_decay=0)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.scheduler_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_52": {
                "variable": {
                    "value": "checkpoints",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_72": {
                "variable": {
                    "value": "hico_checkpoints",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.hico",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': base_params, 'lr': args.lr}, {'params': model.classifier[4].parameters(), 'lr': 3e-05}]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(args.main_pretrained, map_location=device)",
                            "Call"
                        ],
                        [
                            "{'lr': args.lr, 'b_s': args.batch_size, 'bias': args.bias, 'bn': args.bn, 'dropout': args.d_p, 'o_c_l': args.o_c_l, 'b_l': args.b_l, 'last_h_c': args.last_h_c, 'a_n': args.a_n, 'classifier_mod': args.c_m, 'n_layers': args.n_layers, 'agg_first': args.agg_first, 'attn': args.attn, 'state_dict': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save_dir, args.exp_ver, save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}