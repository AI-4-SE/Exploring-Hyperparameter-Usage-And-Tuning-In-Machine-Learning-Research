{
    "architectures/decoder.py": {
        "tensorflow": {
            "zeros_initializer_21": {
                "variable": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "film4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._film_layer(film3, self.z_factors, scope='_film_layer_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_88": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spatial_input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "leaky_relu_89": {
                "variable": {
                    "value": "conv1_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(spatial_input, filters=n_filters, kernel_size=3, strides=1, padding='same')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_91": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "n_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "leaky_relu_92": {
                "variable": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=n_filters, kernel_size=3, strides=1, padding='same')",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_97": {
                "variable": {
                    "value": "film_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "film",
                    "type": "variable",
                    "possible_values": [
                        [
                            "film_layer(conv2_act, gamma_l2, beta_l2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_107": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_108": {
                "variable": {
                    "value": "fc_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.dense(incoming, units=n_units)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_109": {
                "variable": {
                    "value": "film_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu(fc)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_76": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'_film_layer'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "_film_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "film_fusion",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/layers/film_layer.py": {
        "tensorflow": {
            "shape_29": {
                "variable": {
                    "value": "in_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_30": {
                "variable": {
                    "value": "gamma_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_31": {
                "variable": {
                    "value": "beta_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_34": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, in_shape[1], in_shape[2], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_36": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, in_shape[1], in_shape[2], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'film'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_34": {
                "tensor": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(gamma, (gamma_shape[0], 1, 1, gamma_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(gamma_shape[0], 1, 1, gamma_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "tensor": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(beta, (beta_shape[0], 1, 1, beta_shape[-1])), (1, in_shape[1], in_shape[2], 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(beta_shape[0], 1, 1, beta_shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/layers/rounding_layer.py": {
        "tensorflow": {
            "round_34": {
                "variable": {
                    "value": "forward_pass",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'RoundLayer'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "architectures/layers/spectral_norm.py": {
        "tensorflow": {
            "reshape_27": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, w_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stop_gradient_43": {
                "variable": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_44": {
                "variable": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_46": {
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_38": {
                "variable": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u_hat, tf.transpose(w))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.l2_normalize(v_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(v_hat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_41": {
                "variable": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v_hat, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w / sigma",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(w_norm, w_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "w_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_46": {
                "a": {
                    "value": "u_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Name"
                        ],
                        [
                            "tf.nn.l2_normalize(u_)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(u_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_48": {
                "control_inputs": {
                    "value": "[u.assign(u_hat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_88": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_37": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(w, [-1, w_shape[-1]])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('kernel', shape=[self.kernel_size, self.kernel_size, inputs.get_shape()[-1], self.filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_91": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "spectral_norm(w, self.iteration)",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.stride, self.stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_89": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/layers/stn_spline.py": {
        "tensorflow": {
            "zeros_initializer_26": {
                "variable": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_122": {
                "variable": {
                    "value": "latent_code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "en_brick_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_encode_brick(en_brick_1, 4 * nf, is_training, scope='encode_brick_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "8 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "latent_code",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "latent_code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(en_brick_2, filters=8 * nf, kernel_size=3, strides=2, padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(latent_code)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(latent_code)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_124": {
                "variable": {
                    "value": "latent_code",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "latent_code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(en_brick_2, filters=8 * nf, kernel_size=3, strides=2, padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(latent_code)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(latent_code)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_132": {
                "variable": {
                    "value": "times",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.expand_dims(input_times, 1), tf.expand_dims(delta_times, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_135": {
                "variable": {
                    "value": "time_code",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "time_code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP(times, 128, 128, n_out, is_training, k_prob=0.8, name='MLP_in').build()",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(time_code)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_137": {
                "variable": {
                    "value": "latent_code_with_time",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(latent_code, time_code)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_143": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latent_code_with_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((latent_code, time_code), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2 * n_points",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.dense(latent_code_with_time, units=2 * n_points, kernel_initializer='zeros', bias_initializer='zeros')",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta, (-1, n_points, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, n_points, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reverse_77": {
                "variable": {
                    "value": "interpolated_sample_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "interpolated_sample_locations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate_spline(train_points=warped_cp_grid, train_values=self.initial_cp_grid, query_points=self.flt_grid, order=self.order)",
                            "Call"
                        ],
                        [
                            "interpolate_spline(train_points=self.initial_cp_grid, train_values=warped_cp_grid, query_points=self.flt_grid, order=self.order)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.interpolate_spline_batch, cp_offsets)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse(interpolated_sample_locations, axis=[-1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(interpolated_sample_locations, [self.vol_shape[1] - 1, self.vol_shape[0] - 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_79": {
                "variable": {
                    "value": "interpolated_sample_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "interpolated_sample_locations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate_spline(train_points=warped_cp_grid, train_values=self.initial_cp_grid, query_points=self.flt_grid, order=self.order)",
                            "Call"
                        ],
                        [
                            "interpolate_spline(train_points=self.initial_cp_grid, train_values=warped_cp_grid, query_points=self.flt_grid, order=self.order)",
                            "Call"
                        ],
                        [
                            "tf.map_fn(self.interpolate_spline_batch, cp_offsets)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.reverse(interpolated_sample_locations, axis=[-1])",
                            "Call"
                        ],
                        [
                            "tf.multiply(interpolated_sample_locations, [self.vol_shape[1] - 1, self.vol_shape[0] - 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "[self.vol_shape[1] - 1, self.vol_shape[0] - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "warped_volume",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "warped_volume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_interpolation(vol, interpolated_sample_locations)",
                            "Call"
                        ],
                        [
                            "tf.reshape(warped_volume, (-1,) + tuple(self.vol_shape) + (self.num_channels,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,) + tuple(self.vol_shape) + (self.num_channels,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.mgrid[:dims[0], :dims[1]].reshape((2, -1)).T, 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.mgrid[:dims[0], :dims[1], :dims[2]].reshape((3, -1)).T, 0)",
                            "Call"
                        ],
                        [
                            "grid / (1.0 * (np.array([[dims]]) - 1))",
                            "BinOp"
                        ],
                        [
                            "(grid - 1) * 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_153": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_155": {
                "variable": {
                    "value": "conv1_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_156": {
                "variable": {
                    "value": "conv1_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv1, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_158": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_160": {
                "variable": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_161": {
                "variable": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pooling2d_163": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_fn_75": {
                "fn": {
                    "value": "self.interpolate_spline_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "cp_offsets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_132": {
                "input": {
                    "value": "input_times",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_133": {
                "input": {
                    "value": "delta_times",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/mask_discriminator.py": {
        "tensorflow": {
            "zeros_initializer_21": {
                "variable": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.n_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_80": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(input_tensor, filters=self.n_filters, kernel_size=4, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(layer, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "self._conv_and_maybe_downsample_block(layer, n_filters=nf, stride=stride, scope=scp)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_115": {
                "variable": {
                    "value": "n_norm_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "n_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spectral_norm_conv2d(incoming, filters=n_filters, kernel_size=4, stride=stride, padding='same')",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_94": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(input_tensor, filters=self.n_filters, kernel_size=4, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(layer, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "self._conv_and_maybe_downsample_block(layer, n_filters=nf, stride=stride, scope=scp)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_95": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(input_tensor, filters=self.n_filters, kernel_size=4, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(layer, alpha=0.2)",
                            "Call"
                        ],
                        [
                            "self._conv_and_maybe_downsample_block(layer, n_filters=nf, stride=stride, scope=scp)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/mlp_in.py": {
        "tensorflow": {
            "zeros_initializer_20": {
                "variable": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_55": {
                "variable": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.incoming",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_57": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.flatten(self.incoming)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.n_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_58": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.dense(incoming, self.n_in, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_59": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.dense(incoming, self.n_in, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_61": {
                "variable": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.dense(incoming, self.n_in, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(input_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(input_layer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.n_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_62": {
                "variable": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.dense(input_layer, self.n_hidden, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(hidden_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hidden_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_63": {
                "variable": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.dense(input_layer, self.n_hidden, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(hidden_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hidden_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_65": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.dense(input_layer, self.n_hidden, kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(hidden_layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hidden_layer)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.n_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_66": {
                "variable": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.dense(hidden_layer, self.n_out, bias_initializer=b_init)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(output_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/modality_encoder.py": {
        "tensorflow": {
            "zeros_initializer_20": {
                "variable": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.input_data, self.encoded_anatomy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_120": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.input_data, self.encoded_anatomy], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_122": {
                "variable": {
                    "value": "conv_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=16, kernel_size=3, strides=2, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_123": {
                "variable": {
                    "value": "conv_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_131": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.input_data, self.encoded_anatomy], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_132": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.flatten(incoming)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_133": {
                "variable": {
                    "value": "fc_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.dense(flat, units=32)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_134": {
                "variable": {
                    "value": "fc_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(fc, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_142": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.input_data, self.encoded_anatomy], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "z_mean",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_143": {
                "variable": {
                    "value": "z_logvar",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.input_data, self.encoded_anatomy], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "z_logvar",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_119": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'encode_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'dense_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'z_distribution'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'encode_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'dense_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'z_distribution'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'encode_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'dense_brick'",
                            "MethodArgument"
                        ],
                        [
                            "'z_distribution'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_146": {
                "values": {
                    "value": "[tf.shape(incoming)[0], n_latent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_149": {
                "x": {
                    "value": "0.5 * z_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_146": {
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.input_data, self.encoded_anatomy], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "architectures/sdnet.py": {
        "tensorflow": {
            "zeros_initializer_24": {
                "variable": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "soft_anatomy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "coarse_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unet.build_output(unet_decoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "non_hart",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "non_heart_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.soft_anatomy[..., self.n_classes - 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[non_hart, heart]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "AnatomyEncoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "RoundingLayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "ModalityEncoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "ModalityEncoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "Segmentor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_206": {
                "indices": {
                    "value": "tf.argmax(self.pred_mask, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_204": {
                "logits": {
                    "value": "self.pred_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_206": {
                "input": {
                    "value": "self.pred_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/segmentor.py": {
        "tensorflow": {
            "zeros_initializer_20": {
                "variable": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_63": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_65": {
                "variable": {
                    "value": "conv1_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(self.input_data, filters=64, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "conv1_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv1, training=self.is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_68": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_70": {
                "variable": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=64, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv2, training=self.is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "self.output_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/small_unet.py": {
        "tensorflow": {
            "zeros_initializer_20": {
                "variable": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_123": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_125": {
                "variable": {
                    "value": "conv1_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_126": {
                "variable": {
                    "value": "conv1_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv1, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_128": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_130": {
                "variable": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(conv1t_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_131": {
                "variable": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pooling2d_133": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_147": {
                "variable": {
                    "value": "upsampled",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_148": {
                "variable": {
                    "value": "conv1t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upsampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(incoming, size=[new_height, new_width])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_150": {
                "variable": {
                    "value": "conv1t_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(upsampled, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "conv1t_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1t_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv1t, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_153": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1t_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1t_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_155": {
                "variable": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(conv1t_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_158": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_160": {
                "variable": {
                    "value": "conv3_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(conv2_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_161": {
                "variable": {
                    "value": "conv3_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv3_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_170": {
                "variable": {
                    "value": "code1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_172": {
                "variable": {
                    "value": "code1_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "code1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_173": {
                "variable": {
                    "value": "code1_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "code1_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(code1, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_175": {
                "variable": {
                    "value": "code2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "code1_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(code1_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_177": {
                "variable": {
                    "value": "code2_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "code2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(code1_act, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_178": {
                "variable": {
                    "value": "code2_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "code2_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(code2, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_187": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "Bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_122": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "concat_layer_out",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/transformer.py": {
        "tensorflow": {
            "zeros_initializer_23": {
                "variable": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "times",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.expand_dims(input_times, 1), tf.expand_dims(delta_times, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "time_code",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mlp_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP(times, 128, 128, n_out, self.is_training, k_prob=0.8, name='MLP_in').build()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "time_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-1, latent_shape[1], latent_shape[2], latent_shape[3] // n_fraction]",
                            "List"
                        ]
                    ]
                }
            },
            "sigmoid_89": {
                "variable": {
                    "value": "time_code",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "time_code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(mlp_in, shape=time_shape)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(time_code, name='time_code')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "time_code",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_90": {
                "variable": {
                    "value": "latent_code",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "latent_code",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder[-2]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.sigmoid(latent_code, name='latent_code')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "latent_code",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_92": {
                "variable": {
                    "value": "latent_code_with_time",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(latent_code, time_code)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_100": {
                "variable": {
                    "value": "decoded_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "unet.build_output(decoder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "RoundingLayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_82": {
                "input": {
                    "value": "input_times",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_83": {
                "input": {
                    "value": "delta_times",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "architectures/unet.py": {
        "tensorflow": {
            "zeros_initializer_20": {
                "variable": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_122": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_124": {
                "variable": {
                    "value": "conv1_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_125": {
                "variable": {
                    "value": "conv1_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv1, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_127": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv1_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_129": {
                "variable": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_130": {
                "variable": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pooling2d_132": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_145": {
                "variable": {
                    "value": "upsampled",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_146": {
                "variable": {
                    "value": "conv1t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upsampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(incoming, size=[new_height, new_width])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_148": {
                "variable": {
                    "value": "conv1t_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(upsampled, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_149": {
                "variable": {
                    "value": "conv1t_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1t_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv1t, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_151": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv1t_act, concat_layer_in]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_153": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([conv1t_act, concat_layer_in], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_155": {
                "variable": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(conv1_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(concat, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv2, training=is_training, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_158": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_160": {
                "variable": {
                    "value": "conv3_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(conv2_act, filters=nb_filters, kernel_size=3, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_161": {
                "variable": {
                    "value": "conv3_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv3_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_170": {
                "variable": {
                    "value": "code1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_172": {
                "variable": {
                    "value": "code1_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "code1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(incoming, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_173": {
                "variable": {
                    "value": "code1_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "code1_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(code1, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_175": {
                "variable": {
                    "value": "code2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "code1_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(code1_bn)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nb_filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_177": {
                "variable": {
                    "value": "code2_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "code2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.conv2d(code1_act, filters=nb_filters, kernel_size=1, strides=1, padding='same', kernel_initializer=he_init, bias_initializer=b_init)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_178": {
                "variable": {
                    "value": "code2_act",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "code2_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.batch_normalization(code2, training=is_training, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_187": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "n_channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(factor=2.0, mode='FAN_IN', uniform=False)",
                            "Call"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "b_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "Bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "concat_layer_out",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "config_file.py": {
        "tensorflow": {
            "DEFINE_string_25": {
                "name": {
                    "value": "RUN_ID",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "RUN_ID",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SDTNet'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_31": {
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "b_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "batch size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "n_anatomical_masks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of extracted anatomical masks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "n_frame_composing_masks",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number composing masks for next frame mask prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "nz_latent",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number latent variable for z code (encoder modality)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "CUDA_VISIBLE_DEVICE",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "CUDA_VISIBLE_DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "visible gpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_44": {
                "name": {
                    "value": "augment",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Perform data augmentation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_45": {
                "name": {
                    "value": "standardize",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Perform data standardization (z-score)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_52": {
                "name": {
                    "value": "num_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of threads for loading data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "skip_step",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "frequency of printing batch report",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "train_summaries_skip",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of skips before writing summaries for training steps (used to reduce its verbosity; put 1 to avoid this)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_56": {
                "name": {
                    "value": "tensorboard_verbose",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "if True: save also layers weights every N epochs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_62": {
                "name": {
                    "value": "acdc_data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "data_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./data/acdc_data'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "Path of data files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_list_65": {
                "name": {
                    "value": "input_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "[128, 128]",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "input size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "n_classes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of classes",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "idas/losses/tf_losses.py": {
        "tensorflow": {
            "reduce_sum_35": {
                "variable": {
                    "value": "n_tot",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_sum(tf.cast(y_true[..., c], tf.float32)) for c in range(num_classes)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reduce_sum(tf.cast(y_true[..., c], tf.float32)) for c in range(num_classes)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_40": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(y_true, (-1, num_classes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.multiply(y_true * tf.log(softmax + eps), weights), reduction_indices=[1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(tf.multiply(y_true * tf.log(y_pred + eps), weights), reduction_indices=[1])",
                            "UnaryOp"
                        ]
                    ]
                },
                "name": {
                    "value": "weighted_softmax_cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "n_tot",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_sum(tf.cast(y_true[..., c], tf.float32)) for c in range(num_classes)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reduce_sum(tf.cast(y_true[..., c], tf.float32)) for c in range(num_classes)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y_pred, (-1, num_classes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_64": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(y_true, (-1, num_classes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(tf.multiply(y_true * tf.log(softmax + eps), weights), reduction_indices=[1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(tf.multiply(y_true * tf.log(y_pred + eps), weights), reduction_indices=[1])",
                            "UnaryOp"
                        ]
                    ]
                },
                "name": {
                    "value": "weighted_cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "tf.cast(y_true[..., c], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "tensor": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "input_tensor": {
                    "value": "tf.multiply(y_true * tf.log(softmax + eps), weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "input_tensor": {
                    "value": "tf.cast(y_true[..., c], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.reshape(y_true, (-1, num_classes)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "input_tensor": {
                    "value": "tf.multiply(y_true * tf.log(y_pred + eps), weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_34": {
                "x": {
                    "value": "y_true[..., c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_43": {
                "x": {
                    "value": "y_true * tf.log(softmax + eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_tot / (n[c] + eps) for c in range(num_classes)]",
                            "ListComp"
                        ],
                        [
                            "[n_tot / (n[c] + eps) for c in range(num_classes)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cast_58": {
                "x": {
                    "value": "y_true[..., c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_66": {
                "x": {
                    "value": "y_true * tf.log(y_pred + eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[n_tot / (n[c] + eps) for c in range(num_classes)]",
                            "ListComp"
                        ],
                        [
                            "[n_tot / (n[c] + eps) for c in range(num_classes)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "log_43": {
                "x": {
                    "value": "softmax + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_66": {
                "x": {
                    "value": "y_pred + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "idas/metrics/tf_metrics.py": {
        "tensorflow": {
            "reduce_sum_48": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_50": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_51": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_54": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2.0 * intersection + smooth) / (a + b + smooth)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(score, name='dice_coe')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "dice_coe",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "idas/optimization/learning_rate.py": {
        "tensorflow": {
            "convert_to_tensor_123": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(learning_rate, name='learning_rate')",
                            "Call"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_125": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(global_step, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_126": {
                "variable": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(step_size, dtype)",
                            "Call"
                        ],
                        [
                            "20.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "name_scope_121": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_132": {
                "variable": {
                    "value": "double_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(step_size, dtype)",
                            "Call"
                        ],
                        [
                            "20.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "divide_133": {
                "variable": {
                    "value": "global_div_double_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(global_step, dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "double_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.multiply(2.0, step_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_134": {
                "variable": {
                    "value": "cycle",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.add(1.0, global_div_double_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_137": {
                "variable": {
                    "value": "double_cycle",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "cycle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.floor(math_ops.add(1.0, global_div_double_step))",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_138": {
                "variable": {
                    "value": "global_div_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(global_step, dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(step_size, dtype)",
                            "Call"
                        ],
                        [
                            "20.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "subtract_139": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_div_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.divide(global_step, step_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "double_cycle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.multiply(2.0, cycle)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.add(1.0, tmp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_143": {
                "variable": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.subtract(1.0, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_144": {
                "variable": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(learning_rate, name='learning_rate')",
                            "Call"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_145": {
                "variable": {
                    "value": "clr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.maximum(0.0, math_ops.subtract(1.0, x))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.subtract(max_lr, learning_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_148": {
                "variable": {
                    "value": "clr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.multiply(a1, a2)",
                            "Call"
                        ],
                        [
                            "math_ops.divide(clr, math_ops.cast(math_ops.pow(2, math_ops.cast(cycle - 1, tf.int32)), tf.float32))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(math_ops.pow(gamma, global_step), clr)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "math_ops.cast(math_ops.pow(2, math_ops.cast(cycle - 1, tf.int32)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_151": {
                "variable": {
                    "value": "clr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.pow(gamma, global_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "clr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.multiply(a1, a2)",
                            "Call"
                        ],
                        [
                            "math_ops.divide(clr, math_ops.cast(math_ops.pow(2, math_ops.cast(cycle - 1, tf.int32)), tf.float32))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(math_ops.pow(gamma, global_step), clr)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_152": {
                "x": {
                    "value": "clr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.multiply(a1, a2)",
                            "Call"
                        ],
                        [
                            "math_ops.divide(clr, math_ops.cast(math_ops.pow(2, math_ops.cast(cycle - 1, tf.int32)), tf.float32))",
                            "Call"
                        ],
                        [
                            "math_ops.multiply(math_ops.pow(gamma, global_step), clr)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(learning_rate, name='learning_rate')",
                            "Call"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "executing_eagerly_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_134": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "global_div_double_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.divide(global_step, double_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_140": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.subtract(global_div_step, double_cycle)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_143": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.abs(math_ops.add(1.0, tmp))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_148": {
                "x": {
                    "value": "cycle - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_151": {
                "x": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99994",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(global_step, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_148": {
                "x": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.cast(cycle - 1, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "idas/utils.py": {
        "tensorflow": {}
    }
}