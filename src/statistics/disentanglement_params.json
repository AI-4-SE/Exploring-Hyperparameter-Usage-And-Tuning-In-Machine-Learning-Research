{
    "disentanglement.py": {
        "sklearn": {
            "LogisticRegression_328": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "C": {
                    "value": "10000000000.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_367": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LinearSVC_421": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "C": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roc_auc_score_335": {
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_test == j",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "preds[:, j]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "to_categorical_213": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.utils.to_categorical(y)",
                            "Call"
                        ],
                        [
                            "y[indices, :]",
                            "Subscript"
                        ],
                        [
                            "i * np.ones(shape=(1,))",
                            "BinOp"
                        ],
                        [
                            "np.concatenate([y, i * np.ones(shape=(1,))], axis=0)",
                            "Call"
                        ],
                        [
                            "y[indices]",
                            "Subscript"
                        ],
                        [
                            "i * np.ones(shape=(1,))",
                            "BinOp"
                        ],
                        [
                            "np.concatenate([y, i * np.ones(shape=(1,))], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_seed_431": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Input_229": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(x.shape[1],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_231": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(x.shape[1],))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(y.shape[1], activation='softmax')(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_230": {
                "units": {
                    "value": "y.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_232": {
                "learning_rate": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ideal_generation.py": {
        "tensorflow": {
            "pad_sequences_86": {
                "variable": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sentences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_sequences_106": {
                "variable": {
                    "value": "x_val",
                    "type": "Name",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sentences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "constant_175": {
                "variable": {
                    "value": "z1",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "z_test[index[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, len(z_test[index[0]]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_176": {
                "variable": {
                    "value": "z2",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "z_test[index[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, len(z_test[index[1]]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_12": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "emb_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_13": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                },
                "recurrent_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_15": {
                "variable": {
                    "value": "self.vocab_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_16": {
                "variable": {
                    "value": "self.h_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_22": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.backend.sparse_categorical_crossentropy(x, predictions) * temp_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concatenate_26": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[tf.constant(1, shape=(x.shape[0], 1)), x[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_38": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(z.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_43": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(z.shape[0], 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_seed_55": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x, z)[-1]",
                            "Subscript"
                        ],
                        [
                            "model(x, z)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_49": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.vocab_prob(output)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concatenate_50": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[res, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_121": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x, z)[-1]",
                            "Subscript"
                        ],
                        [
                            "model(x, z)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_200": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1 - 0.2 * i) * z1 + 0.2 * i * z2",
                            "BinOp"
                        ],
                        [
                            "z1.numpy()",
                            "Call"
                        ],
                        [
                            "tf.constant(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_categorical_crossentropy_21": {
                "y_true": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.vocab_prob(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_20": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_26": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(x.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "modeling.py": {
        "tensorflow": {
            "Embedding_10": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "emb_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_11": {
                "variable": {
                    "value": "self.encoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "return_state": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                },
                "recurrent_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_13": {
                "variable": {
                    "value": "self.decoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                },
                "recurrent_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_15": {
                "variable": {
                    "value": "self.decoder_vocab_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_16": {
                "variable": {
                    "value": "self.encoder_z_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dense_17": {
                "variable": {
                    "value": "self.decoder_h_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "expand_dims_24": {
                "variable": {
                    "value": "temp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.backend.cast_to_floatx(tf.keras.backend.equal(x, 2))",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.expand_dims(temp_mask)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.repeat_elements(temp_mask, output.shape[2], axis=2)",
                            "Call"
                        ],
                        [
                            "1 - tf.keras.backend.cast_to_floatx(tf.keras.backend.equal(x, 0))",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.cast_to_floatx(tf.keras.backend.equal(x, 2))",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.expand_dims(temp_mask)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.repeat_elements(temp_mask, output.shape[2], axis=2)",
                            "Call"
                        ],
                        [
                            "1 - tf.keras.backend.cast_to_floatx(tf.keras.backend.equal(x, 0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_26": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "output * temp_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concatenate_31": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[tf.constant(1, shape=(x.shape[0], 1)), x[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_44": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.backend.sparse_categorical_crossentropy(x, predictions) * temp_mask",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.sparse_categorical_crossentropy(x, predictions) * temp_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_170": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(z.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_175": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(z.shape[0], 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_193": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "emb_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_202": {
                "variable": {
                    "value": "self.encoder_mean_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Dense_203": {
                "variable": {
                    "value": "self.encoder_logvar_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "z_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LSTM_204": {
                "variable": {
                    "value": "self.decoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                },
                "recurrent_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_206": {
                "variable": {
                    "value": "self.decoder_vocab_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_217": {
                "variable": {
                    "value": "temp_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.backend.cast_to_floatx(tf.keras.backend.equal(x, 2))",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.expand_dims(temp_mask)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.repeat_elements(temp_mask, output.shape[2], axis=2)",
                            "Call"
                        ],
                        [
                            "1 - tf.keras.backend.cast_to_floatx(tf.keras.backend.equal(x, 0))",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.cast_to_floatx(tf.keras.backend.equal(x, 2))",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.expand_dims(temp_mask)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.repeat_elements(temp_mask, output.shape[2], axis=2)",
                            "Call"
                        ],
                        [
                            "1 - tf.keras.backend.cast_to_floatx(tf.keras.backend.equal(x, 0))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_219": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "output * temp_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normal_224": {
                "variable": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "mean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concatenate_231": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[tf.constant(1, shape=(x.shape[0], 1)), x[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_265": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.backend.sparse_categorical_crossentropy(x, predictions) * temp_mask",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.sparse_categorical_crossentropy(x, predictions) * temp_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_453": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(z.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_461": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(z.shape[0], 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_126": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_181": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder_vocab_prob(output)",
                            "Call"
                        ],
                        [
                            "self.decoder_vocab_prob(output)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concatenate_182": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[res, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Bidirectional_195": {
                "variable": {
                    "value": "self.encoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layer": {
                    "value": "tf.keras.layers.LSTM(rnn_dim, return_state=False, return_sequences=True, kernel_initializer='lecun_normal', recurrent_initializer='lecun_normal')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_200": {
                "variable": {
                    "value": "self.encoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "return_state": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                },
                "recurrent_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_208": {
                "variable": {
                    "value": "self.decoder_h_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_291": {
                "variable": {
                    "value": "elbo",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "elbo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kl_loss + rec_loss",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.mean(elbo)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(elbo)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(elbo)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_292": {
                "variable": {
                    "value": "kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "kl_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kld_loss(mean, logvar)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(kl_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(kl_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(kl_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_293": {
                "variable": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_300": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.keras.backend.abs(kl_loss - C_target) * beta + rec_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_301": {
                "variable": {
                    "value": "elbo",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "elbo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kl_loss + rec_loss",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.mean(elbo)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(elbo)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(elbo)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_302": {
                "variable": {
                    "value": "kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "kl_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kld_loss(mean, logvar)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(kl_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(kl_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(kl_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_303": {
                "variable": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_399": {
                "variable": {
                    "value": "elbo",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "elbo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kl_loss + rec_loss",
                            "BinOp"
                        ],
                        [
                            "tf.keras.backend.mean(elbo)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(elbo)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(elbo)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_400": {
                "variable": {
                    "value": "kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "kl_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kld_loss(mean, logvar)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(kl_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(kl_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(kl_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_401": {
                "variable": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_456": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_475": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder_vocab_prob(output)",
                            "Call"
                        ],
                        [
                            "self.decoder_vocab_prob(output)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concatenate_476": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[res, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_23": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_categorical_crossentropy_43": {
                "y_true": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder_vocab_prob(output)",
                            "Call"
                        ],
                        [
                            "self.decoder_training(x, z)",
                            "Call"
                        ],
                        [
                            "self.decoder_vocab_prob(output)",
                            "Call"
                        ],
                        [
                            "self.decoder_training(x, z)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_60": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "self.reconstruction_loss(x, predictions)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.mean(rec_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concatenate_139": {
                "variable": {
                    "value": "all_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[all_mean, mean]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concatenate_164": {
                "variable": {
                    "value": "all_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[all_mean, mean]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_216": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "repeat_239": {
                "variable": {
                    "value": "new_z",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_z_layer(output)",
                            "Call"
                        ],
                        [
                            "self.encoding(x)",
                            "Call"
                        ],
                        [
                            "mean + tf.keras.backend.exp(0.5 * logvar) * epsilon",
                            "BinOp"
                        ]
                    ]
                },
                "repeats": {
                    "value": "dec_embeddings.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concatenate_240": {
                "variable": {
                    "value": "dec_input",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[dec_embeddings, new_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_256": {
                "a": {
                    "value": "tf.keras.backend.square(mean) + tf.keras.backend.exp(logvar) - 1 - logvar",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sparse_categorical_crossentropy_264": {
                "y_true": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder_vocab_prob(output)",
                            "Call"
                        ],
                        [
                            "self.decoder_training(x, z)",
                            "Call"
                        ],
                        [
                            "self.decoder_vocab_prob(output)",
                            "Call"
                        ],
                        [
                            "self.decoder_training(x, z)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_286": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.keras.backend.abs(kl_loss - C_value) * beta + rec_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concatenate_419": {
                "variable": {
                    "value": "all_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[all_mean, mean]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concatenate_447": {
                "variable": {
                    "value": "all_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[all_mean, mean]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_31": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(x.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_42": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_195": {
                "units": {
                    "value": "rnn_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "return_state": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                },
                "recurrent_initializer": {
                    "value": "lecun_normal",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_225": {
                "x": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_231": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(x.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_245": {
                "variable": {
                    "value": "new_z",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_z_layer(output)",
                            "Call"
                        ],
                        [
                            "self.encoding(x)",
                            "Call"
                        ],
                        [
                            "mean + tf.keras.backend.exp(0.5 * logvar) * epsilon",
                            "BinOp"
                        ]
                    ]
                },
                "repeats": {
                    "value": "dec_embeddings.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concatenate_246": {
                "variable": {
                    "value": "dec_input",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[dec_embeddings, new_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_249": {
                "variable": {
                    "value": "new_z",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_z_layer(output)",
                            "Call"
                        ],
                        [
                            "self.encoding(x)",
                            "Call"
                        ],
                        [
                            "mean + tf.keras.backend.exp(0.5 * logvar) * epsilon",
                            "BinOp"
                        ]
                    ]
                },
                "repeats": {
                    "value": "dec_embeddings.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_263": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_467": {
                "variable": {
                    "value": "new_z",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_z_layer(output)",
                            "Call"
                        ],
                        [
                            "self.encoding(x)",
                            "Call"
                        ],
                        [
                            "mean + tf.keras.backend.exp(0.5 * logvar) * epsilon",
                            "BinOp"
                        ]
                    ]
                },
                "repeats": {
                    "value": "dec_embeddings.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concatenate_468": {
                "variable": {
                    "value": "dec_input",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[dec_embeddings, new_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_471": {
                "variable": {
                    "value": "new_z",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_z_layer(output)",
                            "Call"
                        ],
                        [
                            "self.encoding(x)",
                            "Call"
                        ],
                        [
                            "mean + tf.keras.backend.exp(0.5 * logvar) * epsilon",
                            "BinOp"
                        ]
                    ]
                },
                "repeats": {
                    "value": "dec_embeddings.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_348": {
                "value": {
                    "value": "C_value * 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_300": {
                "x": {
                    "value": "kl_loss - C_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_256": {
                "x": {
                    "value": "mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoding(x_batch_test)",
                            "Call"
                        ],
                        [
                            "self.encoding(x_batch_test)",
                            "Call"
                        ],
                        [
                            "self.encoder_mean_layer(output)",
                            "Call"
                        ],
                        [
                            "self.encoding(x_batch_test)[-2]",
                            "Subscript"
                        ],
                        [
                            "self.encoding(x_batch_test)[-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_256": {
                "x": {
                    "value": "logvar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.encoder_logvar_layer(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_286": {
                "x": {
                    "value": "kl_loss - C_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "quality.py": {
        "tensorflow": {
            "Adam_29": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(s[6].split()[-1])",
                            "Call"
                        ],
                        [
                            "float(s[7].split()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Checkpoint_30": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.Adam(learning_rate=lr)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_model(mt, z_mode, emb_dim, rnn_dim, z_dim, vocab_size, lr, model_path)",
                            "Call"
                        ],
                        [
                            "LSTMAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=vocab_size)",
                            "Call"
                        ],
                        [
                            "LSTMVAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=vocab_size, z_mode=z_mode)",
                            "Call"
                        ],
                        [
                            "LSTMVAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=vocab_size, z_mode=z_mode, bi=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequences_49": {
                "variable": {
                    "value": "x_test",
                    "type": "Name",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sentences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_50": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(s[4].split()[-1])",
                            "Call"
                        ],
                        [
                            "int(s[5].split()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_58": {
                "variable": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "word2index['<bos>']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(x_batch_test.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_63": {
                "variable": {
                    "value": "new_z",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mean",
                            "Name"
                        ],
                        [
                            "(1 - 0.2 * i) * z1 + 0.2 * i * z2",
                            "BinOp"
                        ],
                        [
                            "z1.numpy()",
                            "Call"
                        ],
                        [
                            "tf.constant(z)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "dec_embeddings.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concatenate_64": {
                "variable": {
                    "value": "dec_input",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[dec_embeddings, new_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_67": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.decoder_vocab_prob(out)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.argmax(pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concatenate_70": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "arys": {
                    "value": "[output, pred]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_145": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mean",
                            "Name"
                        ],
                        [
                            "(1 - 0.2 * i) * z1 + 0.2 * i * z2",
                            "BinOp"
                        ],
                        [
                            "z1.numpy()",
                            "Call"
                        ],
                        [
                            "tf.constant(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_118": {
                "value": {
                    "value": "sentences[index[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, len(sentences[index[0]]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_119": {
                "value": {
                    "value": "sentences[index[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, len(sentences[index[1]]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "latest_checkpoint_31": {
                "checkpoint_dir": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(os.path.join(os.getcwd(), 'model'), args.mpath)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_121": {
                "value": {
                    "value": "sentences[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, len(sentences[0]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_122": {
                "value": {
                    "value": "sentences[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, len(sentences[1]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "quantity.py": {
        "tensorflow": {
            "Adam_18": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float(s[6].split()[-1])",
                            "Call"
                        ],
                        [
                            "float(s[7].split()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Checkpoint_19": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.Adam(learning_rate=lr)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_model(mt, z_mode, emb_dim, rnn_dim, z_dim, vocab_size, lr, model_path)",
                            "Call"
                        ],
                        [
                            "modeling.LSTMAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=vocab_size)",
                            "Call"
                        ],
                        [
                            "modeling.LSTMVAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=vocab_size, z_mode=z_mode)",
                            "Call"
                        ],
                        [
                            "modeling.LSTMVAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=vocab_size, z_mode=z_mode, bi=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequences_85": {
                "variable": {
                    "value": "x_test",
                    "type": "Name",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sentences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_86": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(s[4].split()[-1])",
                            "Call"
                        ],
                        [
                            "int(s[5].split()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "set_seed_88": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "latest_checkpoint_20": {
                "checkpoint_dir": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(os.path.join(os.getcwd(), 'model'), args.mpath)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "training.py": {
        "tensorflow": {
            "pad_sequences_35": {
                "variable": {
                    "value": "x_train",
                    "type": "Name",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sentences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_sequences_53": {
                "variable": {
                    "value": "x_val",
                    "type": "Name",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sentences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_sequences_71": {
                "variable": {
                    "value": "x_test",
                    "type": "Name",
                    "possible_values": []
                },
                "sequences": {
                    "value": "sentences",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "maxlen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ],
                        [
                            "len(sentence)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                },
                "truncating": {
                    "value": "post",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_seed_109": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Checkpoint_127": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.Adam(learning_rate=lr)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "modeling.LSTMAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=len(word2index))",
                            "Call"
                        ],
                        [
                            "modeling.LSTMVAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=len(word2index), z_mode=z_mode)",
                            "Call"
                        ],
                        [
                            "modeling.LSTMVAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=len(word2index), z_mode=z_mode, bi=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "CheckpointManager_128": {
                "variable": {
                    "value": "ckpt_man",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(optimizer=optimizer, model=model)",
                            "Call"
                        ],
                        [
                            "tf.train.Checkpoint(optimizer=optimizer, model=model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "ckpt_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(os.path.join(os.getcwd(), 'model'), args.mpath)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "checkpoint_name": {
                    "value": "ckpt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Checkpoint_149": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.Adam(learning_rate=lr)",
                            "Call"
                        ]
                    ]
                },
                "model": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "modeling.LSTMAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=len(word2index))",
                            "Call"
                        ],
                        [
                            "modeling.LSTMVAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=len(word2index), z_mode=z_mode)",
                            "Call"
                        ],
                        [
                            "modeling.LSTMVAE(emb_dim=emb_dim, rnn_dim=rnn_dim, z_dim=z_dim, vocab_size=len(word2index), z_mode=z_mode, bi=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "CheckpointManager_150": {
                "variable": {
                    "value": "ckpt_man",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(optimizer=optimizer, model=model)",
                            "Call"
                        ],
                        [
                            "tf.train.Checkpoint(optimizer=optimizer, model=model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "ckpt_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(os.path.join(os.getcwd(), 'model'), args.mpath)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "checkpoint_name": {
                    "value": "ckpt",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}