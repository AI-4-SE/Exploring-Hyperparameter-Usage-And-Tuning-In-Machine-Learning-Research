{
    "analyze-MSE.py": {
        "torch": {
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_157": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_359": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_475": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_75": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_193": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_324": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_436": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "analyze-ablation-hnn.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(pred_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_x",
                            "Method Argument"
                        ],
                        [
                            "pred_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(pred_t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_t_eval",
                            "Method Argument"
                        ],
                        [
                            "pred_t_eval",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_145": {
                "variable": {
                    "value": "pred_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(pred_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_x",
                            "Method Argument"
                        ],
                        [
                            "pred_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(pred_t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_t_eval",
                            "Method Argument"
                        ],
                        [
                            "pred_t_eval",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_159": {
                "variable": {
                    "value": "pred_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_x",
                            "Method Argument"
                        ],
                        [
                            "np_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}pend-{}{}-{}-p{}{}.tar'.format(args.save_dir, model_name, struct, args.solver, num_points, rad)",
                            "Call"
                        ],
                        [
                            "'{}/pend-{}{}-{}-p{}-stats{}.pkl'.format(args.save_dir, model_name, struct, args.solver, num_points, rad)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}.tar'.format(args.save_dir, args.name, label)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "analyze-cartpole-embed.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_279": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obs[0], obs[1], obs[2], obs[3], obs[4], u0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_281": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "t_span[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "t_span[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "400",
                            "int"
                        ]
                    ]
                }
            },
            "stack_319": {
                "variable": {
                    "value": "y_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_traj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(y_traj).view(-1, 6).detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_t_eval",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_147": {
                "variable": {
                    "value": "pred_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_289": {
                "variable": {
                    "value": "(x_cos_q_sin_q, x_dot_q_dot, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([obs[0], obs[1], obs[2], obs[3], obs[4], u0], requires_grad=True, device=device, dtype=torch.float32).view(1, 6)",
                            "Call"
                        ],
                        [
                            "torch.tensor([obs[0], obs[1], obs[2], obs[3], obs[4], u], requires_grad=True, device=device, dtype=torch.float32).view(1, 6)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_291": {
                "variable": {
                    "value": "x_dot_q_dot_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dot_q_dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(y, [3, 2, 1], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_292": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(torch.inverse(M_q_inv), x_dot_q_dot_aug)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "x_cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_cos_q_sin_q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_294": {
                "variable": {
                    "value": "(x_cos_q_sin_q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_cos_q_sin_q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_296": {
                "variable": {
                    "value": "(_, cos_q, sin_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(y, [3, 2, 1], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_298": {
                "variable": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), x_dot_q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_301": {
                "variable": {
                    "value": "(dHdx, dHdcos_q, dHdsin_q, dHdp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(H.sum(), x_cos_q_sin_q_p, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[1, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_303": {
                "variable": {
                    "value": "(dVdx, dVdcos_q, dVdsin_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(V_q, x_cos_q_sin_q)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_306": {
                "variable": {
                    "value": "g_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_xq * g_xq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_313": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obs[0], obs[1], obs[2], obs[3], obs[4], u]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_292": {
                "input": {
                    "value": "torch.inverse(M_q_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x_dot_q_dot_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x_dot_q_dot, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_299": {
                "input": {
                    "value": "torch.matmul(torch.transpose(p_aug, 1, 2), torch.matmul(M_q_inv, p_aug))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_300": {
                "outputs": {
                    "value": "H.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_cos_q_sin_q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_302": {
                "outputs": {
                    "value": "V_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.V_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(y, [3, 2, 1], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_292": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "symoden_ode_struct_model.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_299": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "symoden_ode_struct_model.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_299": {
                "input": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "analyze-double-embed.py": {
        "torch": {
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_t_eval",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_145": {
                "variable": {
                    "value": "pred_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_85": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "analyze-effect-tau.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_t_eval",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_160": {
                "variable": {
                    "value": "pred_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_83": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, solver, num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, solver, num_points)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "analyze-fa-acrobot.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obs[0], obs[2], obs[1], obs[3], obs[4], obs[5], u10, u20]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_117": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "t_span[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "t_span[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                }
            },
            "stack_153": {
                "variable": {
                    "value": "y_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_traj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(y_traj).view(-1, 8).detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "split_125": {
                "variable": {
                    "value": "(cos_q_sin_q, q_dot, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([obs[0], obs[2], obs[1], obs[3], obs[4], obs[5], u10, u20], requires_grad=True, device=device, dtype=torch.float32).view(1, 8)",
                            "Call"
                        ],
                        [
                            "torch.tensor([obs[0], obs[2], obs[1], obs[3], obs[4], obs[5], u[0], u[1]], requires_grad=True, device=device, dtype=torch.float32).view(1, 8)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[4, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_128": {
                "variable": {
                    "value": "(dVdcos_q, dVdsin_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(V_q, cos_q_sin_q)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_129": {
                "variable": {
                    "value": "(cos_q, sin_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(y, [4, 2, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "variable": {
                    "value": "g_q_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.g_net(cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_136": {
                "variable": {
                    "value": "inv_g_g_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(g_q, g_q_T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "g_T_inv_g_g_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_q_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(g_q, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inv_g_g_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(torch.matmul(g_q, g_q_T))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_T_inv_g_g_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(g_q_T, inv_g_g_T)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "energy_shaping + damping_injection",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obs[0], obs[2], obs[1], obs[3], obs[4], obs[5], u[0], u[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_127": {
                "outputs": {
                    "value": "V_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.V_net(cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(y, [4, 2, 2], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_136": {
                "input": {
                    "value": "g_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.g_net(cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_q_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(g_q, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "analyze-fa-cartpole.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obs[0], obs[1], obs[2], obs[3], obs[4], u10, u20]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_119": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "t_span[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "t_span[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                }
            },
            "stack_167": {
                "variable": {
                    "value": "y_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_traj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(y_traj).view(-1, 7).detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "split_127": {
                "variable": {
                    "value": "(x_cos_q_sin_q, x_dot_q_dot, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([obs[0], obs[1], obs[2], obs[3], obs[4], u10, u20], requires_grad=True, device=device, dtype=torch.float32).view(1, 7)",
                            "Call"
                        ],
                        [
                            "torch.tensor([obs[0], obs[1], obs[2], obs[3], obs[4], u[0], u[1]], requires_grad=True, device=device, dtype=torch.float32).view(1, 7)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[3, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "x_dot_q_dot_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dot_q_dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(y, [3, 2, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_130": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(torch.inverse(M_q_inv), x_dot_q_dot_aug)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "x_cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_cos_q_sin_q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_132": {
                "variable": {
                    "value": "(x_cos_q_sin_q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_cos_q_sin_q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_134": {
                "variable": {
                    "value": "(_, cos_q, sin_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(y, [3, 2, 2], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_136": {
                "variable": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), x_dot_q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_139": {
                "variable": {
                    "value": "(dHdx, dHdcos_q, dHdsin_q, dHdp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(H.sum(), x_cos_q_sin_q_p, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[1, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_141": {
                "variable": {
                    "value": "(dVdx, dVdcos_q, dVdsin_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(V_q, x_cos_q_sin_q)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_144": {
                "variable": {
                    "value": "g_xq_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_xq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.g_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_145": {
                "variable": {
                    "value": "inv_g_g_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(g_xq, g_xq_T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "variable": {
                    "value": "g_T_inv_g_g_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_xq_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(g_xq, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inv_g_g_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(torch.matmul(g_xq, g_xq_T))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "energy_shaping",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_T_inv_g_g_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(g_xq_T, inv_g_g_T)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "energy_shaping + damping_injection",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obs[0], obs[1], obs[2], obs[3], obs[4], u[0], u[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_130": {
                "input": {
                    "value": "torch.inverse(M_q_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x_dot_q_dot_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x_dot_q_dot, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_137": {
                "input": {
                    "value": "torch.matmul(torch.transpose(p_aug, 1, 2), torch.matmul(M_q_inv, p_aug))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_138": {
                "outputs": {
                    "value": "H.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_cos_q_sin_q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_140": {
                "outputs": {
                    "value": "V_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.V_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(y, [3, 2, 2], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_145": {
                "input": {
                    "value": "g_xq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.g_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_xq_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(g_xq, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_130": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "symoden_ode_struct_model.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_137": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "symoden_ode_struct_model.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_137": {
                "input": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "analyze-single-embed.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "q_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(-5.0, 5.0, 40)",
                            "Call"
                        ],
                        [
                            "torch.atan2(sin_q, cos_q)",
                            "Call"
                        ],
                        [
                            "np.arctan2(-x[:, 1], -x[:, 0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "cos_q_sin_q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(-torch.cos(q_tensor), -torch.sin(q_tensor))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_326": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "t_span[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "t_span[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "200",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_343": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obs[0], obs[1], obs[2], u0]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_378": {
                "variable": {
                    "value": "y_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y_traj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(y_traj).view(-1, 4).detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_t_eval",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_141": {
                "variable": {
                    "value": "pred_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_353": {
                "variable": {
                    "value": "(cos_q_sin_q, q_dot, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([obs[0], obs[1], obs[2], u0], requires_grad=True, device=device, dtype=torch.float32).view(1, 4)",
                            "Call"
                        ],
                        [
                            "torch.tensor([obs[0], obs[1], obs[2], u], requires_grad=True, device=device, dtype=torch.float32).view(1, 4)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_354": {
                "variable": {
                    "value": "(cos_q, sin_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((-torch.cos(q_tensor), -torch.sin(q_tensor)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(y, [2, 1, 1], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_358": {
                "variable": {
                    "value": "(dVdcos_q, dVdsin_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dV",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(V_q, cos_q_sin_q)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_361": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(cos_q_sin_q, 2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cos_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(cos_q_sin_q, 2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_368": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obs[0], obs[1], obs[2], u]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_83": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_357": {
                "outputs": {
                    "value": "V_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "symoden_ode_struct_model.V_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "symoden_ode_struct_model.V_net(cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((-torch.cos(q_tensor), -torch.sin(q_tensor)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(y, [2, 1, 1], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_263": {
                "input": {
                    "value": "q_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(q, dtype=torch.float32).view(40, 1).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_263": {
                "input": {
                    "value": "q_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(q, dtype=torch.float32).view(40, 1).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "analyze-single-force.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_315": {
                "variable": {
                    "value": "q_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(-5.0, 5.0, 40)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pred_t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(pred_t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "pred_t_eval",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_131": {
                "variable": {
                    "value": "pred_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "mesh_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np_mesh_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "field['x']",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "mesh_x_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mesh_x, u * torch.ones_like(mesh_x)[:, 0].view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_x",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}pend-{}{}-{}-p{}{}.tar'.format(args.save_dir, model_name, struct, args.solver, num_points, rad)",
                            "Call"
                        ],
                        [
                            "'{}/pend-{}{}-{}-p{}-stats{}.pkl'.format(args.save_dir, model_name, struct, args.solver, num_points, rad)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:' + str(args.gpu) if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_186": {
                "input": {
                    "value": "mesh_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np_mesh_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiment-cartpole-embed/train.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_157": {
                "variable": {
                    "value": "train_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_160": {
                "variable": {
                    "value": "test_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment-double-embed/train.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_157": {
                "variable": {
                    "value": "train_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_160": {
                "variable": {
                    "value": "test_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_185": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment-fa-acrobot/train.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "train_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_161": {
                "variable": {
                    "value": "test_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment-fa-cartpole/train.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "train_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_161": {
                "variable": {
                    "value": "test_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment-single-embed/train.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "train_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_161": {
                "variable": {
                    "value": "test_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment-single-force/train.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_80": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(train_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['test_x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "t_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "arrange_data(data['x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "arrange_data(data['test_x'], data['t'], num_points=args.num_points)",
                            "Call"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "data['t']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(t_eval, requires_grad=True, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "train_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_loss + train_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(train_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_147": {
                "variable": {
                    "value": "test_loss_per_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_loss + test_loss_mini",
                            "BinOp"
                        ],
                        [
                            "torch.cat(test_loss, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_169": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}{}-{}-p{}{}.tar'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points, rad)",
                            "Call"
                        ],
                        [
                            "'{}/{}{}{}-{}-p{}-stats{}.pkl'.format(args.save_dir, args.name, label, struct, args.solver, args.num_points, rad)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment-single-force/train_hnn.py": {
        "torch": {
            "Adam_50": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['x'][0, :, :, 0:2]",
                            "Subscript"
                        ],
                        [
                            "train_x[0:-1, :, :].reshape((-1, 2))",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['test_x'][0, :, :, 0:2]",
                            "Subscript"
                        ],
                        [
                            "test_x[0:-1, :, :].reshape((-1, 2))",
                            "Call"
                        ],
                        [
                            "torch.tensor(test_x, requires_grad=True, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_75": {
                "variable": {
                    "value": "dxdt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_76": {
                "variable": {
                    "value": "test_dxdt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}{}.tar'.format(args.save_dir, args.name, label)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hnn.py": {
        "torch": {
            "zeros_like_42": {
                "variable": {
                    "value": "conservative_field",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_43": {
                "variable": {
                    "value": "solenoidal_field",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_64": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_65": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[M[n // 2:], -M[:n // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_68": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_46": {
                "outputs": {
                    "value": "F1.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_47": {
                "n": {
                    "value": "*self.M.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "grad_50": {
                "outputs": {
                    "value": "F2.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_69": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nn_models.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(input_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "split_116": {
                "variable": {
                    "value": "(q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "diag_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diag_dim",
                            "Method Argument"
                        ],
                        [
                            "diag_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.linear4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.diag_dim + self.off_diag_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_70": {
                "variable": {
                    "value": "(diag, off_diag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.linear4(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[self.diag_dim, self.off_diag_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_73": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(self.linear4(h), [self.diag_dim, self.off_diag_dim], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_77": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag_embed(diag)",
                            "Call"
                        ],
                        [
                            "torch.flatten(L, start_dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(L, (bs, self.diag_dim, self.diag_dim))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag_embed(diag)",
                            "Call"
                        ],
                        [
                            "torch.flatten(L, start_dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(L, (bs, self.diag_dim, self.diag_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, self.diag_dim, self.diag_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bmm_81": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag_embed(diag)",
                            "Call"
                        ],
                        [
                            "torch.flatten(L, start_dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(L, (bs, self.diag_dim, self.diag_dim))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "L.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_122": {
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_117": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "symoden.py": {
        "torch": {
            "zeros_185": {
                "variable": {
                    "value": "zero_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "y.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_190": {
                "variable": {
                    "value": "(cos_q_sin_q, q_dot, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one * x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[2 * self.input_dim, 1 * self.input_dim, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cos_q_sin_q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_199": {
                "variable": {
                    "value": "(cos_q_sin_q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((cos_q_sin_q, p), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((cos_q_sin_q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[2 * self.input_dim, 1 * self.input_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_201": {
                "variable": {
                    "value": "(cos_q, sin_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, self.u_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, 1], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "zero_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "y.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_43": {
                "variable": {
                    "value": "(q, p, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one * x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "q_p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "H_vector_field",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(H.sum(), q_p, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(H.sum(), cos_q_sin_q_p, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(H.sum(), cos_q_sin_q_p, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(H.sum(), x_cos_q_sin_q_p, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "self.M.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "H_vector_field",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(H_vector_field, torch.zeros_like(H_vector_field)[:, 0].view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "F_vector_field",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(F), F, zero_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_75": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_76": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[M[n // 2:], -M[:n // 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_79": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "zero_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "y.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.u_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_125": {
                "variable": {
                    "value": "(cos_q_sin_q, q_dot, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one * x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[2 * self.input_dim, 1 * self.input_dim, self.u_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cos_q_sin_q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_134": {
                "variable": {
                    "value": "(cos_q_sin_q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((cos_q_sin_q, p), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((cos_q_sin_q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[2 * self.input_dim, 1 * self.input_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_136": {
                "variable": {
                    "value": "(cos_q, sin_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, self.u_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, 1], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_196": {
                "variable": {
                    "value": "q_dot_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, self.u_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, 1], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_197": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(torch.inverse(M_q_inv), q_dot_aug)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "zero_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "y.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.u_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_253": {
                "variable": {
                    "value": "(x_cos_q_sin_q, x_dot_q_dot, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[3, 2, self.u_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_256": {
                "variable": {
                    "value": "x_dot_q_dot_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dot_q_dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(y, [3, 2, self.u_dim], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_257": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(torch.inverse(M_q_inv), x_dot_q_dot_aug)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "x_cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_cos_q_sin_q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_259": {
                "variable": {
                    "value": "(x_cos_q_sin_q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_cos_q_sin_q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_261": {
                "variable": {
                    "value": "(_, cos_q, sin_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x_cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(y, [3, 2, self.u_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_290": {
                "variable": {
                    "value": "dM_inv_dt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M_net(q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_47": {
                "variable": {
                    "value": "(dq, dp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.H_net(q_p)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_50": {
                "variable": {
                    "value": "(q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "enable_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "q_dot_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, self.u_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, 1], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_132": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(torch.inverse(M_q_inv), q_dot_aug)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_141": {
                "variable": {
                    "value": "(dq, dp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.H_net(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_153": {
                "variable": {
                    "value": "(dHdcos_q, dHdsin_q, dHdp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(H.sum(), q_p, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(H.sum(), cos_q_sin_q_p, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(H.sum(), cos_q_sin_q_p, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(H.sum(), x_cos_q_sin_q_p, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.input_dim, self.input_dim, self.input_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_170": {
                "variable": {
                    "value": "dM_inv_dt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M_net(q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_179": {
                "tensors": {
                    "value": "(-sin_q * dq, cos_q * dq, ddq, zero_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_211": {
                "variable": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(x, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(q_p, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), x_dot_q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_215": {
                "outputs": {
                    "value": "H.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((cos_q_sin_q, p), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((cos_q_sin_q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "enable_grad_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_266": {
                "variable": {
                    "value": "(dx, dq, dp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.H_net(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_275": {
                "variable": {
                    "value": "(dHdx, dHdcos_q, dHdsin_q, dHdp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(H.sum(), q_p, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(H.sum(), cos_q_sin_q_p, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(H.sum(), cos_q_sin_q_p, create_graph=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(H.sum(), x_cos_q_sin_q_p, create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[1, 1, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_284": {
                "variable": {
                    "value": "(dx, dq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dHdp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(dH, [self.input_dim, self.input_dim, self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(dH, [1, 1, 1, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_299": {
                "tensors": {
                    "value": "(dx, -sin_q * dq, cos_q * dq, ddq, zero_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "tensors": {
                    "value": "(dq, dp, zero_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_56": {
                "variable": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(x, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(q_p, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), x_dot_q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_60": {
                "outputs": {
                    "value": "H.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_80": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "(self.H_net(x), zero_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_160": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(g_q, torch.unsqueeze(u, dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_197": {
                "input": {
                    "value": "torch.inverse(M_q_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "q_dot_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(q_dot, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(q_dot, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "(self.H_net(y), zero_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_257": {
                "input": {
                    "value": "torch.inverse(M_q_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x_dot_q_dot_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x_dot_q_dot, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_270": {
                "variable": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(x, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(q_p, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), x_dot_q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_282": {
                "variable": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(g_q, torch.unsqueeze(u, dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_295": {
                "input": {
                    "value": "torch.matmul(M_q_inv, torch.unsqueeze(dp, dim=2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_296": {
                "input": {
                    "value": "torch.matmul(dM_inv_dt, torch.unsqueeze(p, dim=2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_q * u",
                            "BinOp"
                        ],
                        [
                            "g_q * u",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(g_q, torch.unsqueeze(u, dim=2)))",
                            "Call"
                        ],
                        [
                            "g_q * u",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(g_q, torch.unsqueeze(u, dim=2)))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_132": {
                "input": {
                    "value": "torch.inverse(M_q_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "q_dot_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(q_dot, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(q_dot, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(x, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(q_p, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), x_dot_q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_152": {
                "outputs": {
                    "value": "H.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((cos_q_sin_q, p), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((cos_q_sin_q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_166": {
                "outputs": {
                    "value": "M_q_inv.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, self.u_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, 1], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_175": {
                "input": {
                    "value": "torch.matmul(M_q_inv, torch.unsqueeze(dp, dim=2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_176": {
                "input": {
                    "value": "torch.matmul(dM_inv_dt, torch.unsqueeze(p, dim=2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_197": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M_net(q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_212": {
                "input": {
                    "value": "torch.matmul(torch.transpose(p_aug, 1, 2), torch.matmul(M_q_inv, p_aug))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_257": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M_net(q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_274": {
                "outputs": {
                    "value": "H.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_cos_q_sin_q_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_cos_q_sin_q, p), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_287": {
                "tensors": {
                    "value": "(dp_x, dp_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_295": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M_net(q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(dp, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_296": {
                "input": {
                    "value": "dM_inv_dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dM_inv * torch.cat((-sin_q * dq, cos_q * dq), dim=1)).sum(-1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(M_q_inv)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(M_q_inv)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(p, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_57": {
                "input": {
                    "value": "torch.matmul(torch.transpose(p_aug, 1, 2), torch.matmul(M_q_inv, p_aug))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_132": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M_net(q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_160": {
                "input": {
                    "value": "g_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_net(q)",
                            "Call"
                        ],
                        [
                            "self.g_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.g_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(u, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M_net(q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(dp, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "input": {
                    "value": "dM_inv_dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dM_inv * torch.cat((-sin_q * dq, cos_q * dq), dim=1)).sum(-1).view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(M_q_inv)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(M_q_inv)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(p, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_271": {
                "input": {
                    "value": "torch.matmul(torch.transpose(p_aug, 1, 2), torch.matmul(M_q_inv, p_aug))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_282": {
                "input": {
                    "value": "g_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_net(q)",
                            "Call"
                        ],
                        [
                            "self.g_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.g_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(u, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_293": {
                "outputs": {
                    "value": "M_q_inv[:, row_ind, col_ind].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(y, [3, 2, self.u_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_295": {
                "input": {
                    "value": "dp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.H_net(q_p), 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(self.H_net(x), 2, dim=1)",
                            "Call"
                        ],
                        [
                            "sin_q * dHdcos_q - cos_q * dHdsin_q + F",
                            "BinOp"
                        ],
                        [
                            "torch.split(self.H_net(y), [1, 1, 2], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((dp_x, dp_q), dim=1) + F",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_296": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(x, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(q_p, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), x_dot_q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_149": {
                "input": {
                    "value": "torch.matmul(torch.transpose(p_aug, 1, 2), torch.matmul(M_q_inv, p_aug))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_160": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(x, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, self.u_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, 1], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(y, [3, 2, self.u_dim], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_173": {
                "outputs": {
                    "value": "M_q_inv[:, row_ind, col_ind].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cos_q_sin_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, self.u_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, 1], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_175": {
                "input": {
                    "value": "dp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(self.H_net(q_p), 2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(self.H_net(x), 2, dim=1)",
                            "Call"
                        ],
                        [
                            "sin_q * dHdcos_q - cos_q * dHdsin_q + F",
                            "BinOp"
                        ],
                        [
                            "torch.split(self.H_net(y), [1, 1, 2], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((dp_x, dp_q), dim=1) + F",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_176": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(x, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.chunk(q_p, 2, dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "q_dot / M_q_inv",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(cos_q_sin_q_p, [2 * self.input_dim, 1 * self.input_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.matmul(torch.inverse(M_q_inv), x_dot_q_dot_aug), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.split(x_cos_q_sin_q_p, [3, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M_net(q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_282": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(x, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, self.u_dim], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(x, [2 * self.input_dim, 1 * self.input_dim, 1], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(y, [3, 2, self.u_dim], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M_net(q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_64": {
                "input": {
                    "value": "H_vector_field",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(dH, self.M.t())",
                            "Call"
                        ],
                        [
                            "torch.cat((H_vector_field, torch.zeros_like(H_vector_field)[:, 0].view(-1, 1)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_212": {
                "input": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_271": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M_net(q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_294": {
                "tensors": {
                    "value": "(dx, -sin_q * dq, cos_q * dq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_57": {
                "input": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_149": {
                "input": {
                    "value": "M_q_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M_net(q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ],
                        [
                            "self.M_net(x_cos_q_sin_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "(-sin_q * dq, cos_q * dq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "(-sin_q * dq, cos_q * dq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_271": {
                "input": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_149": {
                "input": {
                    "value": "p_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(p, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "abs_18": {
                "input": {
                    "value": "u - v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}