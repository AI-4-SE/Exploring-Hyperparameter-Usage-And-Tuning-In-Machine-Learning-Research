{
    "evaluation/face_evaluation_wild.py": {
        "sklearn": {
            "StandardScaler_46": {
                "variable": {
                    "value": "scaler_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_47": {
                "variable": {
                    "value": "scaler_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_55": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/base.py": {
        "torch": {
            "DataLoader_252": {
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_set_func(opts, filter_key=filter_key)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "n_data_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/celeba_wild_dataset.py": {
        "torch": {
            "cat_135": {
                "variable": {
                    "value": "landmarks_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "landmarks_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(landmarks_scale, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "data": {
                    "value": "(int(lm[0] * self.scale_x), int(lm[1] * self.scale_y))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_133": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/cub.py": {
        "torch": {}
    },
    "evaluate_celebAWild.py": {
        "torch": {
            "Upsample_132": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(h, w)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset(args.data_dir, args.data_list, crop_size=input_size, scale=False, mirror=False, mean=IMG_MEAN, center_crop=False, ignore_saliency_fg=False, iou_threshold=0.3)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "mean_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "IMG_MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array((104.00698793, 116.66876762, 122.67891434), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_159": {
                "variable": {
                    "value": "mean_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_160": {
                "variable": {
                    "value": "imgs_viz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image + mean_tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate_cub.py": {
        "torch": {
            "Upsample_162": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(h, w)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iio.imread(fpath)",
                            "Call"
                        ],
                        [
                            "img[int(bbox[1]):int(bbox[3]), int(bbox[0]):int(bbox[2]), :]",
                            "Subscript"
                        ],
                        [
                            "np.asarray(img, np.float32)",
                            "Call"
                        ],
                        [
                            "img - IMG_MEAN",
                            "BinOp"
                        ],
                        [
                            "np.transpose(img, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_85": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_143": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset(args.data_dir, args.data_list, crop_size=input_size, scale=False, mirror=False, mean=IMG_MEAN, center_crop=False, ignore_saliency_fg=False, iou_threshold=0.3)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_135": {
                "f": {
                    "value": "args.restore_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "mean_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "IMG_MEAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array((104.00698793, 116.66876762, 122.67891434), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_204": {
                "variable": {
                    "value": "mean_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_205": {
                "variable": {
                    "value": "imgs_viz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image + mean_tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_228": {
                "obj": {
                    "value": "output_raw.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_prob_dir, '{}/{}'.format(img_folder, img_nm.replace('png', 'pth')))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_seg_dir, '{}/{}'.format(img_folder, img_nm))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_part_dir, '{}/{}'.format(img_folder, img_nm))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_overlay_dir, '{}/{}'.format(img_folder, img_nm))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dcrf_prob_dir, '{}/{}'.format(img_folder, img_nm.replace('.png', '.npy').replace('.JPEG', '.npy')))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_part_dcrf_dir, '{}/{}'.format(img_folder, img_nm))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dcrf_overlay_dir, '{}/{}'.format(img_folder, img_nm))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "Softmax_12": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "WWT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "featureL2Norm(w)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w_norm.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_66": {
                "input": {
                    "value": "WWT - torch.eye(K).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.zeros(K, K).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_50": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_58": {
                "input": {
                    "value": "flat_part_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "part_softmax.permute(0, 2, 3, 1).contiguous().view((-1, part_softmax.size(1)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "basis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_66": {
                "n": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/deeplab.py": {
        "torch": {
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.conv2d_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_158": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_159": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ],
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_180": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            }
        }
    },
    "model/deeplab_2branch.py": {
        "torch": {
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.conv2d_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_158": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_159": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ],
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "variable"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            }
        }
    },
    "model/feature_extraction.py": {
        "torch": {
            "pow_38": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_40": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(torch.sum(torch.pow(feature, 2), 1) + epsilon, 0.5).unsqueeze(1).expand_as(feature)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resnet_module_list[:last_layer_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.model.children())[:-3]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.model.features.children())[:-4]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.model.features.children())[start_index:layer_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.model.features.children())[start_index:layer_idx + 1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "torch.pow(feature, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/model_factory.py": {
        "torch": {
            "load_44": {
                "variable": {
                    "value": "saved_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.restore_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scops_trainer.py": {
        "torch": {
            "Parameter_26": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.abs(torch.cuda.FloatTensor(K, feature_dim).normal_())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_73": {
                "variable": {
                    "value": "self.kl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_76": {
                "variable": {
                    "value": "self.interp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(args.input_size[1], args.input_size[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_94": {
                "variable": {
                    "value": "self.optimizer_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.optim_parameters(args)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_98": {
                "variable": {
                    "value": "self.optimizer_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.part_basis_generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "images_zoo_cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images_zoo_cpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(images_cpu.numpy() + IMG_MEAN.reshape((1, 3, 1, 1))) / 255.0",
                            "BinOp"
                        ],
                        [
                            "images_zoo_cpu / zoo_var",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(images_zoo_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "images_cj",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "((images_cpu.numpy() + IMG_MEAN.reshape((1, 3, 1, 1))) / 255.0).clip(0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_190": {
                "variable": {
                    "value": "loss_lmeqv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "centers_tps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.batch_get_centers(nn.Softmax(dim=1)(pred_tps)[:, 1:, :, :])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "centers_tps_org",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.batch_get_centers(nn.Softmax(dim=1)(pred_tps_org_dif)[:, 1:, :, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_142": {
                "variable": {
                    "value": "zoo_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.interp(zoo_feat) for zoo_feat in zoo_feats]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "images_cj[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cj_transform(images_cj[b]).numpy() * 255.0 - IMG_MEAN.reshape((1, 3, 1, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__235": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.clip_gradients",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__238": {
                "parameters": {
                    "value": "self.part_basis_generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.clip_gradients",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_27": {
                "input": {
                    "value": "torch.cuda.FloatTensor(K, feature_dim).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_181": {
                "input": {
                    "value": "pred_tps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.interp(pred_low_tps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_182": {
                "input": {
                    "value": "pred_tps_org",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tps(pred_d, padding_mode='zeros')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_214": {
                "obj": {
                    "value": "{'W': self.part_basis_generator().detach().cpu(), 'W_state_dict': self.part_basis_generator.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.args.snapshot_dir, self.args.exp_name, 'BASIS_' + str(current_step) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_91": {
                "f": {
                    "value": "args.restore_part_basis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_185": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_187": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_197": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tps/grid_sample.py": {
        "torch": {
            "grid_sample_12": {
                "variable": {
                    "value": "g_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grid_sample_16": {
                "variable": {
                    "value": "target_region",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_region",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(input.data.new(input.size()).fill_(1))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tps/rand_tps.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "rotation_x_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rotation_x_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([ones, zeros, zeros, zeros, cos_vx, -sin_vx, zeros, sin_vx, cos_vx], axis=1).reshape(batch_size, 3, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rotation_x_mat).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_36": {
                "variable": {
                    "value": "rotation_x_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "rotation_y_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rotation_y_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([cos_vy, zeros, sin_vy, zeros, ones, zeros, -sin_vy, zeros, cos_vy], axis=1).reshape(batch_size, 3, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rotation_y_mat).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_41": {
                "variable": {
                    "value": "rotation_y_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "rotation_z_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rotation_z_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([cos_vz, -sin_vz, zeros, sin_vz, cos_vz, zeros, zeros, zeros, ones], axis=1).reshape(batch_size, 3, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rotation_z_mat).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_46": {
                "variable": {
                    "value": "rotation_z_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "input": {
                    "value": "rotation_y_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([cos_vy, zeros, sin_vy, zeros, ones, zeros, -sin_vy, zeros, cos_vy], axis=1).reshape(batch_size, 3, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rotation_y_mat).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_x_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([ones, zeros, zeros, zeros, cos_vx, -sin_vx, zeros, sin_vx, cos_vx], axis=1).reshape(batch_size, 3, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rotation_x_mat).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.batch_size, self.height, self.width, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_116": {},
            "from_numpy_121": {
                "variable": {
                    "value": "transformer_matrix_reshaped_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "theta.reshape((-1, 2, 3)).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_121": {
                "variable": {
                    "value": "transformer_matrix_reshaped_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "source_control_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_control_points, torch.ones(*source_control_points.shape[0:2], 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "source_control_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_control_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_control_points.unsqueeze(0).repeat(self.batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "source_control_points + torch.Tensor(source_control_points.size()).uniform_(-self.sigma, self.sigma)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((source_control_points, torch.ones(*source_control_points.shape[0:2], 1)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(source_control_points, transformer_matrix_reshaped_torch)",
                            "Call"
                        ],
                        [
                            "torch.cat((source_control_points, torch.ones(*source_control_points.shape[0:2], 1)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(source_control_points, R)",
                            "Call"
                        ],
                        [
                            "source_control_points[:, :, :2]",
                            "Subscript"
                        ],
                        [
                            "source_points[b, ...].squeeze().unsqueeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "transformer_matrix_reshaped_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta.reshape((-1, 2, 3)).copy()).type(torch.FloatTensor).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_106": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "source_control_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_control_points, torch.ones(*source_control_points.shape[0:2], 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "source_control_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_control_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_control_points.unsqueeze(0).repeat(self.batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "source_control_points + torch.Tensor(source_control_points.size()).uniform_(-self.sigma, self.sigma)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((source_control_points, torch.ones(*source_control_points.shape[0:2], 1)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(source_control_points, transformer_matrix_reshaped_torch)",
                            "Call"
                        ],
                        [
                            "torch.cat((source_control_points, torch.ones(*source_control_points.shape[0:2], 1)), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(source_control_points, R)",
                            "Call"
                        ],
                        [
                            "source_control_points[:, :, :2]",
                            "Subscript"
                        ],
                        [
                            "source_points[b, ...].squeeze().unsqueeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(rotation_z_mat, torch.matmul(rotation_y_mat, rotation_x_mat))",
                            "Call"
                        ],
                        [
                            "generate_perspective_matrices(batch_size=self.batch_size, img_sz=2.0, random_scale=self.random_scale).type(torch.FloatTensor).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_102": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.00001",
                    "type": "float",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0 / 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_103": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.00001",
                    "type": "float",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0 / 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_123": {
                "*size": {
                    "value": "*source_control_points.shape[0:2]",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_127": {
                "*size": {
                    "value": "*source_control_points.shape[0:2]",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_239": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_generator(args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.snapshot_dir, args.exp_name, 'model_' + str(args.num_steps) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_266": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.snapshot_dir, args.exp_name, 'model_' + str(i_iter) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "from_numpy_13": {
                "variable": {
                    "value": "x_map_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_map.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "variable": {
                    "value": "y_map_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_map.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "centers_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_42": {
                "tensors": {
                    "value": "(x_c, y_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "visualize.py": {
        "torch": {
            "Softmax_18": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "self.cmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.cmap[:n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "variable": {
                    "value": "label_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_291": {
                "variable": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "feat_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "mean_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_181": {
                "variable": {
                    "value": "mean_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_182": {
                "variable": {
                    "value": "imgs_viz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs + mean_tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_188": {
                "variable": {
                    "value": "tps_imgs_viz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tps_imgs + mean_tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "lm_viz",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lm_viz.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "part_response",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "part_response.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "mean_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_249": {
                "variable": {
                    "value": "mean_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_250": {
                "variable": {
                    "value": "imgs_viz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs + mean_tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "lm_viz",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lm_viz.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "bbox_viz",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bbox_viz.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_194": {
                "variable": {
                    "value": "sal_viz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "saliency_imgs.float().unsqueeze(dim=1) * 255.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_200": {
                "variable": {
                    "value": "edge_viz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_imgs.float().unsqueeze(dim=1) * 255.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "data": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.detach().cpu().float().numpy()",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(pred, axis=1), dtype=np.int)",
                            "Call"
                        ],
                        [
                            "self.colorize(pred)",
                            "Call"
                        ],
                        [
                            "vutils.make_grid(torch.tensor(pred), normalize=False, scale_each=False)",
                            "Call"
                        ],
                        [
                            "(self.imgs_viz_grid + pred) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_241": {
                "data": {
                    "value": "response_maps_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "response_maps.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.concatenate((np.ones((B, 1, H, W)) * threshold, response_maps_np), axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(np.argmax(response_maps_np, axis=1), dtype=np.int)",
                            "Call"
                        ],
                        [
                            "self.colorize(response_maps_np)",
                            "Call"
                        ],
                        [
                            "vutils.make_grid(torch.tensor(response_maps_np), normalize=False, scale_each=False)",
                            "Call"
                        ],
                        [
                            "(self.imgs_viz_grid + response_maps_np) / 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}