{
    "baselines/pattern_extractor.py": {
        "sklearn": {
            "LogisticRegression_131": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "argmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "C",
                            "variable"
                        ]
                    ]
                }
            },
            "LogisticRegression_114": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cs",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/cnn.py": {
        "torch": {
            "max_46": {
                "variable": {
                    "value": "(maxes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(packed_seq, padding_value=NEG_INF)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(packed_seq)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(packed_seq)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "sums",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(packed_seq, padding_value=NEG_INF)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(packed_seq)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(packed_seq)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(packed_seq, padding_value=NEG_INF)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(packed_seq)",
                            "Call"
                        ],
                        [
                            "pad_packed_sequence(packed_seq)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_66": {
                "input": {
                    "value": "sums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(padded, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(torch.FloatTensor(lens).view(b, 1)).expand(*sums.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_168": {
                "variable": {
                    "value": "docs_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.index_select(batch.embeddings_matrix, 1, doc) for doc in docs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_268": {
                "variable": {
                    "value": "(_, am)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_data.data.new(len(batch_sizes), max_batch_size, *var_data.size()[1:])",
                            "Call"
                        ],
                        [
                            "Variable(output)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.forward(batch, debug=debug, dropout=None).data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_340": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_147": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "window_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_157": {
                "variable": {
                    "value": "self.cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "window_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size",
                            "Method Argument"
                        ],
                        [
                            "window_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_180": {
                "variable": {
                    "value": "docs_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(docs_vectors, torch.zeros(b, self.window_size - max_doc_len))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_199": {
                "variable": {
                    "value": "cnn_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnn_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn.forward(docs_vectors)",
                            "Call"
                        ],
                        [
                            "dropout(cnn_outs)",
                            "Call"
                        ],
                        [
                            "cnn_outs.transpose(1, 2).contiguous().view(b * num_windows_per_doc, self.hidden_dim)",
                            "Call"
                        ],
                        [
                            "relu(cnn_outs)",
                            "Call"
                        ],
                        [
                            "self.cnn.forward(batch, debug=debug, dropout=dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_205": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cnn_outs.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "mlp_outs.view(b, num_windows_per_doc, self.hidden_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[max(0, l - self.window_size + 1) for l in doc_lens]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "manual_seed_278": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_170": {
                "input": {
                    "value": "batch.embeddings_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "doc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(lens)",
                            "Call"
                        ],
                        [
                            "len(docs)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.window_size - max_doc_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/dan.py": {
        "torch": {
            "sum_60": {
                "variable": {
                    "value": "word_vector_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(docs_vectors)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_62": {
                "variable": {
                    "value": "word_vector_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_vector_sum.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.autograd.Variable(batch.doc_lens.float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_62": {
                "variable": {
                    "value": "word_vector_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_71": {
                "variable": {
                    "value": "(_, am)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(batch, debug=debug).data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_128": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_55": {
                "input": {
                    "value": "batch.embeddings_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "doc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_60": {
                "tensors": {
                    "value": "docs_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.index_select(batch.embeddings_matrix, 1, doc) for doc in batch.docs]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "baselines/lstm.py": {
        "torch": {
            "pad_packed_sequence_73": {
                "variable": {
                    "value": "(padded, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn.forward(batch, debug=debug, dropout=dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_78": {
                "variable": {
                    "value": "outs_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(outs)",
                            "Call"
                        ],
                        [
                            "dropout(padded)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_79": {
                "variable": {
                    "value": "outs_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outs_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(padded, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(batch.doc_lens.float().view(b, 1)).expand(b, self.rnn.num_directions * self.rnn.hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_89": {
                "variable": {
                    "value": "(_, am)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(batch, debug=debug).data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_154": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_99": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "interpret_classification_results.py": {
        "torch": {
            "load_150": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_152": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_104": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(batch, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_52": {
                "input": {
                    "value": "model.mlp.forward(Variable(torch.FloatTensor(scores_data)))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mlp.py": {
        "torch": {
            "ModuleList_30": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim if i == 0 else hidden_layer_dim",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_layer_dim if i < num_layers - 1 else num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "relu_35": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers[0](x)",
                            "Call"
                        ],
                        [
                            "self.layers[i](relu(res))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rnn.py": {
        "torch": {
            "Parameter_29": {
                "variable": {
                    "value": "self.start_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.to_cuda(torch.randn(self.num_directions, 1, self.hidden_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.start_cell_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.to_cuda(torch.randn(self.num_directions, 1, self.hidden_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_48": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(docs_vectors, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "lengths": {
                    "value": "list(batch.doc_lens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_43": {
                "input": {
                    "value": "batch.embeddings_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "doc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_49": {
                "tensors": {
                    "value": "docs_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.index_select(batch.embeddings_matrix, 1, doc).t() for doc in batch.docs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_30": {
                "*size": {
                    "value": "self.num_directions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_34": {
                "*size": {
                    "value": "self.num_directions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "soft_patterns.py": {
        "torch": {
            "max_38": {
                "variable": {
                    "value": "(_, am)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(batch, debug, dropout)",
                            "Call"
                        ],
                        [
                            "self.forward(batch, debug).data",
                            "Attribute"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_542": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NLLLoss_543": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_223": {
                "variable": {
                    "value": "diag_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "diag_data_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.total_num_patterns * self.num_diags * self.max_pattern_length",
                            "BinOp"
                        ],
                        [
                            "diag_data.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.word_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_224": {
                "variable": {
                    "value": "bias_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "diag_data_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.total_num_patterns * self.num_diags * self.max_pattern_length",
                            "BinOp"
                        ],
                        [
                            "diag_data.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_231": {
                "variable": {
                    "value": "self.diags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "diag_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randn(diag_data_size, self.word_dim)",
                            "Call"
                        ],
                        [
                            "self.load_pre_computed_patterns(pre_computed_patterns, diag_data, bias_data, pattern_specs)",
                            "Call"
                        ],
                        [
                            "diag_data.view(self.total_num_patterns, self.num_diags, self.max_pattern_length, self.word_dim)",
                            "Call"
                        ],
                        [
                            "diag_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_234": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randn(diag_data_size, 1)",
                            "Call"
                        ],
                        [
                            "self.load_pre_computed_patterns(pre_computed_patterns, diag_data, bias_data, pattern_specs)",
                            "Call"
                        ],
                        [
                            "bias_data.view(self.total_num_patterns, self.num_diags, self.max_pattern_length)",
                            "Call"
                        ],
                        [
                            "bias_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_331": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(patt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "after_main_paths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(restart_padding, self.semiring.times(after_epsilons[:, :, :-1], transition_matrix_val[:, :, -1, :-1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_548": {
                "variable": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Dropout(dropout)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_560": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=learning_rate)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_755": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_65": {
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_96": {
                "input": {
                    "value": "torch.sigmoid(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_205": {
                "variable": {
                    "value": "self.self_loop_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "shared_sl_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "randn(self.total_num_patterns, self.max_pattern_length)",
                            "Call"
                        ],
                        [
                            "randn(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_237": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "randn(self.total_num_patterns, self.max_pattern_length - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "batched_transition_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batched_transition_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.index_select(transition_scores, 0, doc) for doc in batch.docs]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(batched_transition_scores).view(b, n, self.total_num_patterns, self.num_diags, self.max_pattern_length)",
                            "Call"
                        ],
                        [
                            "self.semiring.from_float(mm(self.diags, padded) + self.bias_scale_param * self.bias).t()",
                            "Call"
                        ],
                        [
                            "dropout(batched_transition_scores)",
                            "Call"
                        ],
                        [
                            "batched_transition_scores.contiguous().view(b, n, self.total_num_patterns, self.num_diags, self.max_pattern_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_265": {
                "variable": {
                    "value": "(padded, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn.forward(batch, dropout=dropout)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_394": {
                "variable": {
                    "value": "end_state_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_cuda(Variable(self.semiring.zero(batch_size, num_patterns, self.max_pattern_length)))",
                            "Call"
                        ],
                        [
                            "self.transition_once(eps_value, hiddens, transition_matrix, zero_padding, restart_padding, self_loop_scale)",
                            "Call"
                        ],
                        [
                            "hiddens",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "batch_end_state_idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.end_states.expand(batch_size, num_patterns, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_396": {
                "variable": {
                    "value": "active_doc_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.gt(batch.doc_lens, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_396": {
                "variable": {
                    "value": "active_doc_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_501": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(batch, debug, dropout)",
                            "Call"
                        ],
                        [
                            "self.forward(batch, debug).data",
                            "Attribute"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_681": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_45": {
                "input": {
                    "value": "data[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_201": {
                "variable": {
                    "value": "shared_sl_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.total_num_patterns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_pattern_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_330": {
                "*size": {
                    "value": "len(patt)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.word_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_575": {
                "input": {
                    "value": "train_batch(model, batch_obj, num_classes, gold, optimizer, loss_function, gpu, debug, dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_604": {
                "input": {
                    "value": "compute_loss(model, batch_obj, num_classes, gold, loss_function, gpu, debug).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_203": {
                "variable": {
                    "value": "shared_sl_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_237": {
                "*size": {
                    "value": "self.total_num_patterns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.max_pattern_length - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_257": {
                "input": {
                    "value": "transition_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semiring.from_float(mm(self.diags, batch.embeddings_matrix) + self.bias_scale_param * self.bias).t()",
                            "Call"
                        ],
                        [
                            "dropout(transition_scores)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "doc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_438": {
                "tensors": {
                    "value": "(zero_padding, self.semiring.times(hiddens[:, :, :-1], eps_value))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_643": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_save_dir, '{}_{}.pth'.format(model_file_prefix, it))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_save_dir, '{}_{}.pth'.format(model_file_prefix, it))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_656": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_save_dir, '{}_{}.pth'.format(model_file_prefix, it))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_save_dir, '{}_{}.pth'.format(model_file_prefix, it))",
                            "Call"
                        ]
                    ]
                }
            },
            "gt_396": {
                "input": {
                    "value": "batch.doc_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(length)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "i in enumerate(pattern_spec.keys())",
                            "Call"
                        ],
                        [
                            "i in enumerate(patt)",
                            "Call"
                        ],
                        [
                            "i in enumerate(transition_matrices)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_253": {
                "input": {
                    "value": "self.diags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "batch.embeddings_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_272": {
                "input": {
                    "value": "self.diags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(outs, batch_first=True)",
                            "Call"
                        ],
                        [
                            "padded.contiguous().view(b * n, self.word_dim).t()",
                            "Call"
                        ],
                        [
                            "dropout(padded)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "soft_patterns_test.py": {
        "torch": {
            "load_106": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_108": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "manual_seed_40": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_batching.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "visualize.py": {
        "torch": {
            "norm_114": {
                "variable": {
                    "value": "self_loop_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diags[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_117": {
                "variable": {
                    "value": "fwd_one_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diags[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_351": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_353": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "mm_85": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embeddings[:k, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_305": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "visualize_efficiently.py": {
        "torch": {
            "norm_169": {
                "variable": {
                    "value": "self_loop_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diags[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_172": {
                "variable": {
                    "value": "fwd_one_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diags[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_423": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_425": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.input_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "mm_87": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embeddings[:k, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_374": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_104": {
                "*size": {
                    "value": "scores.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}