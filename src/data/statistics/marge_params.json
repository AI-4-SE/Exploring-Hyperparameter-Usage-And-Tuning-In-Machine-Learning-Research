{
    "lib/NN.py": {
        "sklearn": {},
        "tensorflow": {
            "History_317": {
                "variable": {
                    "value": "self.historyNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/plotter.py": {
        "sklearn": {
            "r2_score_165": {
                "y_true": {
                    "value": "y_test_un[:, p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_mean[:, p]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils.py": {
        "tensorflow": {
            "parse_single_example_382": {
                "variable": {
                    "value": "parsed_features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "proto",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'x': tf.FixedLenFeature([], tf.string), 'y': tf.FixedLenFeature([], tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "decode_raw_385": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed_features['x']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_386": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed_features['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_389": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_features['x'], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (np.sum(xlen),))",
                            "Call"
                        ],
                        [
                            "scale(normalize(x, x_mean, x_std), x_min, x_max, scalelims)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(np.sum(xlen),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_390": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_features['y'], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (np.sum(ylen),))",
                            "Call"
                        ],
                        [
                            "scale(normalize(y, y_mean, y_std), y_min, y_max, scalelims)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(np.sum(ylen),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_412": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_features['x'], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (np.sum(xlen),))",
                            "Call"
                        ],
                        [
                            "scale(normalize(x, x_mean, x_std), x_min, x_max, scalelims)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_413": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_features['y'], tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (np.sum(ylen),))",
                            "Call"
                        ],
                        [
                            "scale(normalize(y, y_mean, y_std), y_min, y_max, scalelims)",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_451": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "files",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Feature_256": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_263": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_300": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "thisfile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fname.replace('.tfrecords', '_' + str(i).zfill(3) + '.tfrecords')",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLenFeature_378": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_379": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FloatList_256": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BytesList_263": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Example_322": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_318": {
                "bytes_or_text": {
                    "value": "x[k].tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_320": {
                "bytes_or_text": {
                    "value": "y[k].tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_322": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'x': _bytes_feature(tf.compat.as_bytes(x[k].tostring())), 'y': _bytes_feature(tf.compat.as_bytes(y[k].tostring()))}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    }
}