{
    ".dev/gather_models.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_32": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/apis/inference.py": {
        "torch": {
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/apis/test.py": {
        "torch": {
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/apis/train.py": {
        "torch": {
            "tensor_45": {
                "variable": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(2 ** 31)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "broadcast_48": {
                "tensor": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(seed, dtype=torch.int32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0, dtype=torch.int32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(2 ** 31)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_65": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(2 ** 31)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/core/evaluation/eval_hooks.py": {
        "torch": {
            "broadcast_106": {
                "tensor": {
                    "value": "module.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_107": {
                "tensor": {
                    "value": "module.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/core/evaluation/metrics.py": {
        "torch": {
            "histc_79": {
                "variable": {
                    "value": "area_intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersect.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_81": {
                "variable": {
                    "value": "area_pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_83": {
                "variable": {
                    "value": "area_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "total_area_intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "total_area_union",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "total_area_pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "total_area_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(pred_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.load(pred_label))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pred_label)",
                            "Call"
                        ],
                        [
                            "pred_label[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mmcv.imread(label, flag='unchanged', backend='pillow')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mmcv.imread(label, flag='unchanged', backend='pillow'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "label - 1",
                            "BinOp"
                        ],
                        [
                            "label[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_380": {
                "variable": {
                    "value": "f_value",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f_score(x[0], x[1], beta) for x in zip(precision, recall)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/core/seg/sampler/ohem_pixel_sampler.py": {
        "torch": {
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "seg_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/core/utils/dist_util.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randint(2 ** 31)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "broadcast_45": {
                "tensor": {
                    "value": "random_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(seed, dtype=torch.int32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0, dtype=torch.int32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/datasets/builder.py": {
        "torch": {
            "DataLoader_148": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset([build_dataset(c, default_args) for c in cfg])",
                            "Call"
                        ],
                        [
                            "RepeatDataset(build_dataset(cfg['dataset'], default_args), cfg['times'])",
                            "Call"
                        ],
                        [
                            "MultiImageMixDataset(**cp_cfg)",
                            "Call"
                        ],
                        [
                            "_concat_dataset(cfg, default_args)",
                            "Call"
                        ],
                        [
                            "build_from_cfg(cfg, DATASETS, default_args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples_per_gpu",
                            "variable"
                        ],
                        [
                            "num_gpus * samples_per_gpu",
                            "BinOp"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=shuffle, seed=seed)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "workers_per_gpu",
                            "variable"
                        ],
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate, samples_per_gpu=samples_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(worker_init_fn, num_workers=num_workers, rank=rank, seed=seed) if seed is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "persistent_workers": {
                    "value": "persistent_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset([build_dataset(c, default_args) for c in cfg])",
                            "Call"
                        ],
                        [
                            "RepeatDataset(build_dataset(cfg['dataset'], default_args), cfg['times'])",
                            "Call"
                        ],
                        [
                            "MultiImageMixDataset(**cp_cfg)",
                            "Call"
                        ],
                        [
                            "_concat_dataset(cfg, default_args)",
                            "Call"
                        ],
                        [
                            "build_from_cfg(cfg, DATASETS, default_args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples_per_gpu",
                            "variable"
                        ],
                        [
                            "num_gpus * samples_per_gpu",
                            "BinOp"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=shuffle, seed=seed)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "workers_per_gpu",
                            "variable"
                        ],
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate, samples_per_gpu=samples_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "partial(worker_init_fn, num_workers=num_workers, rank=rank, seed=seed) if seed is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_191": {
                "seed": {
                    "value": "worker_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers * rank + worker_id + seed",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/datasets/custom.py": {
        "torch": {}
    },
    "mmseg/datasets/dataset_wrappers.py": {
        "torch": {}
    },
    "mmseg/datasets/pipelines/formatting.py": {
        "torch": {
            "from_numpy_26": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "tensor_28": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/datasets/samplers/distributed_sampler.py": {
        "torch": {
            "Generator_55": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_61": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_63": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/beit.py": {
        "torch": {
            "Linear_73": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dims * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "variable"
                        ],
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "torch.cat((self.q_bias, k_bias, self.v_bias))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_76": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.q_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.v_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_relative_distance, self.num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_92": {
                "variable": {
                    "value": "coords_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "Wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.window_size[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_93": {
                "variable": {
                    "value": "coords_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "Ww",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.window_size[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_95": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_97": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "relative_position_index",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(Wh * Ww + 1,) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "relative_coords.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.gamma_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_values * torch.ones(embed_dims)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_218": {
                "variable": {
                    "value": "self.gamma_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_values * torch.ones(embed_dims)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_329": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_436": {
                "variable": {
                    "value": "new_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_sequence, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_536": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_128": {
                "variable": {
                    "value": "k_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.v_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.q_bias, k_bias, self.v_bias)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linear_130": {
                "variable": {
                    "value": "qkv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.gamma_1 * self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.gamma_2 * self.ffn(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "r_ids + [0] + dis",
                            "BinOp"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.qkv.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "variable"
                        ],
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "torch.cat((self.q_bias, k_bias, self.v_bias))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "self.embed_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "self.embed_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "self.num_relative_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_95": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Identity_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_329": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_217": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_219": {
                "*size": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_366": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.drop_path_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_482": {
                "variable": {
                    "value": "new_rel_pos_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_rel_pos_bias, extra_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/bisenetv1.py": {
        "torch": {
            "Sequential_111": {
                "variable": {
                    "value": "self.atten_conv_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.gap_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_241": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self.conv_atten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(in_channels=out_channels, out_channels=out_channels, kernel_size=1, stride=1, padding=0, bias=False, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_sp, x_cp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_112": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sigmoid_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_185": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sigmoid_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/bisenetv2.py": {
        "torch": {
            "ModuleList_94": {
                "variable": {
                    "value": "self.detail_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "detail_branch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(in_channels=out_channels, out_channels=out_channels // 2, kernel_size=1, stride=1, padding=0, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_159": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_273": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(in_channels=mid_channel, out_channels=out_channels, kernel_size=1, stride=1, padding=0, bias=False, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_332": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_464": {
                "variable": {
                    "value": "self.detail_dwconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthwiseSeparableConvModule(in_channels=self.out_channels, out_channels=self.out_channels, kernel_size=3, stride=1, padding=1, dw_norm_cfg=norm_cfg, dw_act_cfg=None, pw_norm_cfg=None, pw_act_cfg=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_476": {
                "variable": {
                    "value": "self.detail_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(in_channels=self.out_channels, out_channels=self.out_channels, kernel_size=3, stride=2, padding=1, bias=False, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_488": {
                "variable": {
                    "value": "self.semantic_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(in_channels=self.out_channels, out_channels=self.out_channels, kernel_size=3, stride=1, padding=1, bias=False, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_499": {
                "variable": {
                    "value": "self.semantic_dwconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthwiseSeparableConvModule(in_channels=self.out_channels, out_channels=self.out_channels, kernel_size=3, stride=1, padding=1, dw_norm_cfg=norm_cfg, dw_act_cfg=None, pw_norm_cfg=None, pw_act_cfg=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.dwconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(in_channels=in_channels, out_channels=mid_channel, kernel_size=3, stride=stride, padding=1, groups=in_channels, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.dwconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(in_channels=in_channels, out_channels=mid_channel, kernel_size=3, stride=stride, padding=1, groups=in_channels, bias=False, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_260": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthwiseSeparableConvModule(in_channels=in_channels, out_channels=out_channels, kernel_size=3, stride=stride, padding=1, dw_norm_cfg=norm_cfg, dw_act_cfg=None, pw_norm_cfg=norm_cfg, pw_act_cfg=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_175": {
                "tensors": {
                    "value": "[x_left, x_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_333": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_487": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_533": {
                "input": {
                    "value": "semantic_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_conv(x_s)",
                            "Call"
                        ],
                        [
                            "resize(input=semantic_conv, size=detail_dwconv.shape[2:], mode='bilinear', align_corners=self.align_corners)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_534": {
                "input": {
                    "value": "semantic_dwconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_dwconv(x_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "ConvModule(in_channels=in_channels, out_channels=detail_channels[i], kernel_size=3, stride=2, padding=1, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "*args": {
                    "value": "ConvModule(in_channels=detail_channels[i - 1], out_channels=detail_channels[i], kernel_size=3, stride=2, padding=1, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_402": {
                "*args": {
                    "value": "GELayer(semantic_channels[i - 1], semantic_channels[i], exp_ratio, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_414": {
                "*args": {
                    "value": "GELayer(semantic_channels[i - 1], semantic_channels[i], exp_ratio, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/cgnet.py": {
        "torch": {
            "AdaptiveAvgPool2d_33": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_130": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "2 * channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_176": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_273": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_291": {
                "variable": {
                    "value": "self.norm_prelu_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_norm_layer(norm_cfg, cur_channels)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_296": {
                "variable": {
                    "value": "self.level1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.norm_prelu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_norm_layer(norm_cfg, cur_channels)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_316": {
                "variable": {
                    "value": "self.level2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "variable": {
                    "value": "self.norm_prelu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_norm_layer(norm_cfg, cur_channels)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "joi_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loc, sur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_293": {
                "num_parameters": {
                    "value": "cur_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "num_channels[0]",
                            "Subscript"
                        ],
                        [
                            "cur_channels + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[1] + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PReLU_313": {
                "num_parameters": {
                    "value": "cur_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "num_channels[0]",
                            "Subscript"
                        ],
                        [
                            "cur_channels + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[1] + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PReLU_333": {
                "num_parameters": {
                    "value": "cur_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "num_channels[0]",
                            "Subscript"
                        ],
                        [
                            "cur_channels + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[1] + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_343": {
                "tensors": {
                    "value": "[x, inp_2x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_351": {
                "tensors": {
                    "value": "[x, down1, inp_4x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_359": {
                "tensors": {
                    "value": "[down2, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_178": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/erfnet.py": {
        "torch": {
            "MaxPool2d_50": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conv_out, pool_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_105": {
                "variable": {
                    "value": "self.convs_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_176": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_281": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_282": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_138": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/models/backbones/fast_scnn.py": {
        "torch": {
            "cat_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, *self.ppm(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_255": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/hrnet.py": {
        "torch": {
            "ReLU_48": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_374": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, self.in_channels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_189": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_479": {
                "modules": {
                    "value": "transition_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_485": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_187": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_477": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_445": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, num_channels_pre_layer[i], num_channels_cur_layer[i], kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_466": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, out_channels, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_456": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_476": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[j], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_185": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/icnet.py": {
        "torch": {
            "MaxPool2d_73": {
                "variable": {
                    "value": "self.backbone.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.conv_sub1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(in_channels=in_channels, out_channels=light_branch_middle_channels, kernel_size=3, stride=2, padding=1, conv_cfg=conv_cfg, norm_cfg=norm_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "psp_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "psp_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.psp_modules(x) + [x]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(psp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/mae.py": {
        "torch": {
            "Parameter_125": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.num_patches + 1, embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_129": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_228": {
                "variable": {
                    "value": "pos_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_embed_checkpoint[:, num_extra_tokens:]",
                            "Subscript"
                        ],
                        [
                            "pos_tokens.reshape(-1, orig_size, orig_size, embedding_size).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(pos_tokens, size=(new_size, new_size), mode='bicubic', align_corners=False)",
                            "Call"
                        ],
                        [
                            "pos_tokens.permute(0, 2, 3, 1).flatten(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_size, new_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "new_pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(extra_tokens, pos_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_134": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.drop_path_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/mit.py": {
        "torch": {
            "Dropout_76": {
                "variable": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "ffn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_388": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(num_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/mobilenet_v2.py": {
        "torch": {
            "Sequential_164": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/mobilenet_v3.py": {
        "torch": {}
    },
    "mmseg/models/backbones/resnest.py": {
        "torch": {
            "ReLU_98": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_130": {
                "variable": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splits.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "F.adaptive_avg_pool2d(gap, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(gap)",
                            "Call"
                        ],
                        [
                            "self.norm1(gap)",
                            "Call"
                        ],
                        [
                            "self.relu(gap)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch, self.groups, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch, self.groups, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_141": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attens * splits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_217": {
                "variable": {
                    "value": "self.avd_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv2_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/resnet.py": {
        "torch": {
            "ReLU_53": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_638": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_594": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, stem_channels // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_637": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_604": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_614": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_624": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/stdc.py": {
        "torch": {
            "Sequential_162": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[spatial_inputs, context_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_396": {
                "variable": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "tensors": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[x0]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_80": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "layer_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[x0]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_163": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sigmoid_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "conv_0",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/swin.py": {
        "torch": {
            "Parameter_60": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dims * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "96",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_76": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_123": {
                "variable": {
                    "value": "seq1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "step1 * len1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_124": {
                "variable": {
                    "value": "seq2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "step2 * len2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_189": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "F.pad(query, (0, 0, 0, pad_r, 0, pad_b))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, pad_r, 0, pad_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_589": {
                "variable": {
                    "value": "self.drop_after_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roll_194": {
                "variable": {
                    "value": "shifted_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "F.pad(query, (0, 0, 0, pad_r, 0, pad_b))",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(-self.shift_size, -self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "img_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, H_pad, W_pad, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "query.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "roll_241": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.window_reverse(attn_windows, H_pad, W_pad)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "(self.shift_size, self.shift_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dims": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_586": {
                "variable": {
                    "value": "self.absolute_pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((1, num_patches, embed_dims))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "(2 * window_size[0] - 1) * (2 * window_size[1] - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_587": {
                "*size": {
                    "value": "(1, num_patches, embed_dims)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_594": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "total_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(depths)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_728": {
                "variable": {
                    "value": "table_pretrained_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "table_pretrained.permute(1, 0).reshape(1, nH1, S1, S1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(S2, S2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/twins.py": {
        "torch": {
            "Linear_185": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dims * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_186": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_188": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + self.drop_path(self.attn(self.norm1(x), hw_shape, identity=0.0))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.ffn(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(b, h, w, c)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, pad_l, pad_r, pad_t, pad_b))",
                            "Call"
                        ],
                        [
                            "x.reshape(b, _h, self.window_size, _w, self.window_size, c).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "attn.transpose(2, 3).reshape(b, _h * self.window_size, _w * self.window_size, c)",
                            "Call"
                        ],
                        [
                            "x[:, :h, :w, :].contiguous()",
                            "Call"
                        ],
                        [
                            "x.reshape(b, n, c)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x), hw_shape))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.ffn(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.proj(cnn_feat) + cnn_feat",
                            "BinOp"
                        ],
                        [
                            "self.proj(cnn_feat)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.position_encoding_drops[i](x)",
                            "Call"
                        ],
                        [
                            "blk(x, hw_shape)",
                            "Call"
                        ],
                        [
                            "self.position_encodings[i](x, hw_shape)",
                            "Call"
                        ],
                        [
                            "self.norm_list[i](x)",
                            "Call"
                        ],
                        [
                            "x.reshape(b, h, w, -1).permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, pad_l, pad_r, pad_t, pad_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, Hp, Wp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_329": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ],
                        [
                            "[64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_431": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_440": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_573": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/unet.py": {
        "torch": {
            "Sequential_77": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_129": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_channels * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - scale_factor) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.deconv_upsamping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_362": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_363": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.interp_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.interp_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_401": {
                "*args": {
                    "value": "*enc_conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_369": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/backbones/vit.py": {
        "torch": {
            "Parameter_248": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_249": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches + 1, embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_251": {
                "variable": {
                    "value": "self.drop_after_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_396": {
                "variable": {
                    "value": "pos_embed_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_embed_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_embed[:, -1 * pos_h * pos_w:]",
                            "Subscript"
                        ],
                        [
                            "pos_embed_weight.reshape(1, pos_h, pos_w, pos_embed.shape[2]).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "resize(pos_embed_weight, size=input_shpae, align_corners=False, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.flatten(pos_embed_weight, 2).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_396": {
                "variable": {
                    "value": "pos_embed_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_token_weight, pos_embed_weight)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_250": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_263": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/models/decode_heads/ann_head.py": {
        "torch": {
            "cat_29": {
                "variable": {
                    "value": "concat_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_129": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "priors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[stage(high_feats, low_feats) for stage in self.stages]",
                            "ListComp"
                        ],
                        [
                            "[stage(feats, feats) for stage in self.stages]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_129": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_179": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "priors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[stage(high_feats, low_feats) for stage in self.stages]",
                            "ListComp"
                        ],
                        [
                            "[stage(feats, feats) for stage in self.stages]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_58": {
                "variable": {
                    "value": "query_downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "query_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_scales",
                            "variable"
                        ],
                        [
                            "query_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "[context, high_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "[context, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_21": {
                "output_size": {
                    "value": "pool_scale",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/apc_head.py": {
        "torch": {
            "Conv2d_60": {
                "variable": {
                    "value": "self.gla",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.pool_scale ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_81": {
                "variable": {
                    "value": "pooled_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.pool_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "variable": {
                    "value": "affinity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "affinity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gla(x + resize(self.global_info(F.adaptive_avg_pool2d(x, 1)), size=x.shape[2:])).permute(0, 2, 3, 1).reshape(batch_size, -1, self.pool_scale ** 2)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(affinity_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "z_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "affinity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gla(x + resize(self.global_info(F.adaptive_avg_pool2d(x, 1)), size=x.shape[2:])).permute(0, 2, 3, 1).reshape(batch_size, -1, self.pool_scale ** 2)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(affinity_matrix)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pooled_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, self.pool_scale)",
                            "Call"
                        ],
                        [
                            "self.pooled_redu_conv(pooled_x)",
                            "Call"
                        ],
                        [
                            "pooled_x.view(batch_size, self.channels, -1).permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_103": {
                "variable": {
                    "value": "z_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_out + x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_140": {
                "variable": {
                    "value": "self.acm_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "acm_modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_156": {
                "variable": {
                    "value": "acm_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "acm_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(acm_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_92": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/aspp_head.py": {
        "torch": {
            "Sequential_69": {
                "variable": {
                    "value": "self.image_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "aspp_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aspp_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[resize(self.image_pool(x), size=x.size()[2:], mode='bilinear', align_corners=self.align_corners)]",
                            "List"
                        ],
                        [
                            "torch.cat(aspp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_70": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/cc_head.py": {
        "torch": {
            "cat_41": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/da_head.py": {
        "torch": {
            "bmm_62": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, channels, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, channels, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(energy, -1, keepdim=True)[0].expand_as(energy) - energy",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_68": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(energy_new, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.pam_conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.cam_conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_63": {
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/decode_head.py": {
        "torch": {
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_104": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "upsampled_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[resize(input=x, size=inputs[0].shape[2:], mode='bilinear', align_corners=self.align_corners) for x in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_90": {
                "variable": {
                    "value": "self.loss_decode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/dm_head.py": {
        "torch": {
            "Conv2d_35": {
                "variable": {
                    "value": "self.filter_gen_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(1, b * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.pad(input=x, pad=p2d, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "p2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad, pad, pad, pad)",
                            "Tuple"
                        ],
                        [
                            "(pad + 1, pad, pad + 1, pad)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_79": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(1, b * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.pad(input=x, pad=p2d, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "generated_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_gen_conv(F.adaptive_avg_pool2d(x, self.filter_size))",
                            "Call"
                        ],
                        [
                            "generated_filter.view(b * c, 1, self.filter_size, self.filter_size)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "b * c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.dcm_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dcm_modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_138": {
                "variable": {
                    "value": "dcm_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dcm_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(dcm_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_64": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(1, b * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.pad(input=x, pad=p2d, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/dnl_head.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "variable": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(n, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.theta(x).view(n, self.inter_channels, -1, 1)",
                            "Call"
                        ],
                        [
                            "self.theta(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "theta_x - theta_x.mean(dim=-2, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(n, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "x.view(n, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "self.phi(x).view(n, self.inter_channels, 1, -1)",
                            "Call"
                        ],
                        [
                            "self.phi(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "phi_x - phi_x.mean(dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ],
                        [
                            "pairwise_weight / torch.tensor(self.temperature, device=pairwise_weight.device)",
                            "BinOp"
                        ],
                        [
                            "pairwise_weight.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "pairwise_func(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "unary_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unary_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_mask(x)",
                            "Call"
                        ],
                        [
                            "unary_mask.view(n, 1, -1)",
                            "Call"
                        ],
                        [
                            "unary_mask.softmax(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_34": {
                "data": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pairwise_weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "theta_x.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pairwise_weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "pairwise_weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_135": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/dpt_head.py": {
        "torch": {
            "ModuleList_39": {
                "variable": {
                    "value": "self.projects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvModule(in_channels=in_channels, out_channels=out_channel, kernel_size=1, act_cfg=None) for out_channel in out_channels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.resize_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ConvTranspose2d(in_channels=out_channels[0], out_channels=out_channels[0], kernel_size=4, stride=4, padding=0), nn.ConvTranspose2d(in_channels=out_channels[1], out_channels=out_channels[1], kernel_size=2, stride=2, padding=0), nn.Identity(), nn.Conv2d(in_channels=out_channels[3], out_channels=out_channels[3], kernel_size=3, stride=2, padding=1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_257": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_267": {
                "variable": {
                    "value": "self.fusion_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.readout_projects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_49": {
                "in_channels": {
                    "value": "out_channels[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[96",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_55": {
                "in_channels": {
                    "value": "out_channels[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[96",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[96",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[96",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "*args": {
                    "value": "Linear(2 * in_channels, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "(x, readout)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/ema_head.py": {
        "torch": {
            "zeros_39": {
                "variable": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_bases",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_42": {
                "variable": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_65": {
                "variable": {
                    "value": "feats_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bck,bnk->bcn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_162": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ema_module(feats)",
                            "Call"
                        ],
                        [
                            "F.relu(recon, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.ema_out_conv(recon)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "identity + recon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_72": {
                "variable": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_56": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcn,bck->bnk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.view(batch_size, channels, height * width)",
                            "Call"
                        ],
                        [
                            "self.ema_in_conv(x)",
                            "Call"
                        ],
                        [
                            "self.ema_mid_conv(feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bcn,bck->bnk', feats, bases)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_59": {
                "variable": {
                    "value": "attention_normed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bcn,bck->bnk', feats, bases)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_61": {
                "variable": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcn,bnk->bck",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.view(batch_size, channels, height * width)",
                            "Call"
                        ],
                        [
                            "self.ema_in_conv(x)",
                            "Call"
                        ],
                        [
                            "self.ema_mid_conv(feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_63": {
                "variable": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/enc_head.py": {
        "torch": {
            "Sequential_44": {
                "variable": {
                    "value": "self.encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Encoding(channels=in_channels, num_codes=num_codes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu__58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + x * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.se_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sigmoid_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "[feat, *laterals]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/fcn_head.py": {
        "torch": {
            "Identity_62": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[x, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/fpn_head.py": {
        "torch": {
            "ModuleList_31": {
                "variable": {
                    "value": "self.scale_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "*args": {
                    "value": "*scale_head",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/gc_head.py": {
        "torch": {
            "cat_46": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/isa_head.py": {
        "torch": {
            "pad_115": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_conv(x_)",
                            "Call"
                        ],
                        [
                            "F.pad(x, padding)",
                            "Call"
                        ],
                        [
                            "x.view(n, c, glb_h, loc_h, glb_w, loc_w)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, c, glb_h, glb_w)",
                            "Call"
                        ],
                        [
                            "self.global_relation(x)",
                            "Call"
                        ],
                        [
                            "x.view(n, loc_h, loc_w, c, glb_h, glb_w)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 4, 5, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, c, loc_h, loc_w)",
                            "Call"
                        ],
                        [
                            "self.local_relation(x)",
                            "Call"
                        ],
                        [
                            "x.view(n, glb_h, glb_w, c, loc_h, loc_w)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 4, 2, 5)",
                            "Call"
                        ],
                        [
                            "x.reshape(n, c, glb_h * loc_h, glb_w * loc_w)",
                            "Call"
                        ],
                        [
                            "x[:, :, pad_h // 2:pad_h // 2 + h, pad_w // 2:pad_w // 2 + w]",
                            "Subscript"
                        ],
                        [
                            "self.out_conv(torch.cat([x, residual], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cat_140": {
                "tensors": {
                    "value": "[x, residual]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/knet_head.py": {
        "torch": {
            "Linear_61": {
                "variable": {
                    "value": "self.dynamic_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_params_in + self.num_params_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_params_in + self.num_params_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.input_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.update_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_254": {
                "variable": {
                    "value": "self.mask_fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.fc_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_314": {
                "variable": {
                    "value": "x_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnhw,bchw->bnc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "sigmoid_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_mask.softmax(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_373": {
                "variable": {
                    "value": "new_mask_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_mask_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_mask_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "new_mask_preds.reshape(N, num_proposals, H, W)",
                            "Call"
                        ],
                        [
                            "F.interpolate(new_mask_preds, scale_factor=2, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(new_mask_preds, mask_shape, align_corners=False, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_418": {
                "variable": {
                    "value": "self.kernel_update_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_305": {
                "variable": {
                    "value": "gather_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_344": {
                "variable": {
                    "value": "mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.feat_transform(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_376": {
                "variable": {
                    "value": "new_mask_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_mask_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_mask_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "new_mask_preds.reshape(N, num_proposals, H, W)",
                            "Call"
                        ],
                        [
                            "F.interpolate(new_mask_preds, scale_factor=2, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(new_mask_preds, mask_shape, align_corners=False, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_383": {
                "variable": {
                    "value": "new_mask_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_mask_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_mask_preds, dim=0)",
                            "Call"
                        ],
                        [
                            "new_mask_preds.reshape(N, num_proposals, H, W)",
                            "Call"
                        ],
                        [
                            "F.interpolate(new_mask_preds, scale_factor=2, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.interpolate(new_mask_preds, mask_shape, align_corners=False, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "mask_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_257": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_368": {
                "input": {
                    "value": "mask_x[i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "mask_feat[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(self.conv_kernel_size // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/lraspp_head.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.conv_ups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv_up_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.image_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=49, stride=(16, 20))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, self.convs[i](inputs[i])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_61": {
                "kernel_size": {
                    "value": "49",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(16, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "self.in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/nl_head.py": {
        "torch": {
            "cat_48": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/ocr_head.py": {
        "torch": {
            "softmax_33": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "variable": {
                    "value": "ocr_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.view(batch_size, num_classes, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.scale * probs, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.view(batch_size, channels, -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_46": {
                "variable": {
                    "value": "query_downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "[context, query_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/point_head.py": {
        "torch": {
            "ModuleList_91": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_106": {
                "variable": {
                    "value": "self.fc_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(self.in_channels) + self.num_classes",
                            "BinOp"
                        ],
                        [
                            "fc_channels",
                            "variable"
                        ],
                        [
                            "fc_in_channels + (self.num_classes if self.coarse_pred_each_layer else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fine_grained_point_feats, coarse_point_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_297": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_points * oversample_ratio)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_354": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_points",
                            "Attribute"
                        ],
                        [
                            "cfg.subdivision_num_points",
                            "Attribute"
                        ],
                        [
                            "min(height * width, num_points)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_35": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "fine_grained_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fine_grained_feats_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[point_sample(_, points, align_corners=self.align_corners) for _ in x]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_320": {
                "variable": {
                    "value": "rand_point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_random_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_points - num_uncertain_points",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(point_coords, rand_point_coords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, coarse_point_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_312": {
                "input": {
                    "value": "point_uncertainties[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "num_uncertain_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(importance_sample_ratio * num_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_314": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/psa_head.py": {
        "torch": {
            "Sequential_65": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(self.channels, self.channels, kernel_size=1, conv_cfg=self.conv_cfg, norm_cfg=self.norm_cfg, act_cfg=self.act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.attention_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(self.channels, self.channels, kernel_size=1, conv_cfg=self.conv_cfg, norm_cfg=self.norm_cfg, act_cfg=self.act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_col, x_dis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mask_h * mask_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_144": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "self.psamask(y)",
                            "Call"
                        ],
                        [
                            "y.view(n, h * w, h * w).transpose(1, 2).view(n, h * w, h, w)",
                            "Call"
                        ],
                        [
                            "F.softmax(y, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_180": {
                "variable": {
                    "value": "y_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(x_col)",
                            "Call"
                        ],
                        [
                            "self.psamask_collect(y_col)",
                            "Call"
                        ],
                        [
                            "F.softmax(y_col, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_181": {
                "variable": {
                    "value": "y_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_p(x_dis)",
                            "Call"
                        ],
                        [
                            "y_dis.view(n, h * w, h * w).transpose(1, 2).view(n, h * w, h, w)",
                            "Call"
                        ],
                        [
                            "self.psamask_distribute(y_dis)",
                            "Call"
                        ],
                        [
                            "F.softmax(y_dis, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "tensors": {
                    "value": "(identity, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mask_h * mask_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_145": {
                "input": {
                    "value": "out.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_182": {
                "input": {
                    "value": "x_col.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_col.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_185": {
                "input": {
                    "value": "x_dis.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_dis.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/psp_head.py": {
        "torch": {
            "cat_109": {
                "variable": {
                    "value": "psp_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "psp_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(psp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(pool_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_38": {
                "output_size": {
                    "value": "pool_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/models/decode_heads/segformer_head.py": {
        "torch": {
            "ModuleList_109": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_140": {
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/segmenter_mask_head.py": {
        "torch": {
            "Linear_85": {
                "variable": {
                    "value": "self.dec_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.cls_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.num_classes, embed_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.patch_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.classes_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, cls_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_126": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.patch_proj(x[:, :-self.num_classes])",
                            "Call"
                        ],
                        [
                            "F.normalize(patches, dim=2, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_127": {
                "variable": {
                    "value": "cls_seg_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_seg_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classes_proj(x[:, -self.num_classes:])",
                            "Call"
                        ],
                        [
                            "F.normalize(cls_seg_feat, dim=2, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_88": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_67": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/sep_aspp_head.py": {
        "torch": {
            "Sequential_63": {
                "variable": {
                    "value": "self.sep_bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthwiseSeparableConvModule(self.channels + c1_channels, self.channels, 3, padding=1, norm_cfg=self.norm_cfg, act_cfg=self.act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "aspp_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aspp_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[resize(self.image_pool(x), size=x.size()[2:], mode='bilinear', align_corners=self.align_corners)]",
                            "List"
                        ],
                        [
                            "torch.cat(aspp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, c1_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/setr_mla_head.py": {
        "torch": {
            "ModuleList_33": {
                "variable": {
                    "value": "self.up_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "ConvModule(in_channels=self.in_channels[i], out_channels=mla_channels, kernel_size=3, padding=1, norm_cfg=self.norm_cfg, act_cfg=self.act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/setr_up_head.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "self.up_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "ConvModule(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, stride=1, padding=int(kernel_size - 1) // 2, norm_cfg=self.norm_cfg, act_cfg=self.act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/stdc_head.py": {
        "torch": {
            "Parameter_29": {
                "variable": {
                    "value": "self.fusion_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([[6.0 / 10], [3.0 / 10], [1.0 / 10]], dtype=torch.float32).reshape(1, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "boundary_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_label.to(self.laplacian_kernel)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.laplacian_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "boundary_targets_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_label.to(self.laplacian_kernel)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.laplacian_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_51": {
                "variable": {
                    "value": "boundary_targets_x4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_label.to(self.laplacian_kernel)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.laplacian_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_55": {
                "variable": {
                    "value": "boundary_targets_x4_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boundary_targets_x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(seg_label, self.laplacian_kernel, stride=4, padding=1)",
                            "Call"
                        ],
                        [
                            "boundary_targets_x4.clamp(min=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "boundary_targets.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_57": {
                "variable": {
                    "value": "boundary_targets_x2_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boundary_targets_x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(seg_label, self.laplacian_kernel, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "boundary_targets_x2.clamp(min=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "boundary_targets.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "boundary_targets_pyramids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boundary_targets, boundary_targets_x2_up, boundary_targets_x4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_75": {
                "variable": {
                    "value": "boundary_targets_pyramid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boundary_targets_pyramids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((boundary_targets, boundary_targets_x2_up, boundary_targets_x4_up), dim=1)",
                            "Call"
                        ],
                        [
                            "boundary_targets_pyramids.squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.fusion_kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[-1, -1, -1, -1, 8, -1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "input": {
                    "value": "(1, 1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "[[6.0 / 10], [3.0 / 10], [1.0 / 10]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/decode_heads/uper_head.py": {
        "torch": {
            "ModuleList_45": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "psp_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "psp_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(psp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "fpn_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fpn_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.fpn_convs[i](laterals[i]) for i in range(used_backbone_levels - 1)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(fpn_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/losses/accuracy.py": {
        "torch": {}
    },
    "mmseg/models/losses/cross_entropy_loss.py": {
        "torch": {
            "cross_entropy_45": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "Method Argument"
                        ],
                        [
                            "-100",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_70": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(labels >= 0) & (labels != ignore_index)",
                            "BinOp"
                        ],
                        [
                            "valid_mask.unsqueeze(1).expand(target_shape).float()",
                            "Call"
                        ],
                        [
                            "((label >= 0) & (label != ignore_index)).float()",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_148": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_190": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_192": {
                "input": {
                    "value": "pred_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/losses/dice_loss.py": {
        "torch": {
            "softmax_106": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.reshape(pred.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_108": {
                "variable": {
                    "value": "one_hot_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.clamp(target.long(), 0, num_classes - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.shape[1]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_45": {
                "input": {
                    "value": "pred.pow(exponent) + target.pow(exponent)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "torch.mul(pred, target) * valid_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_109": {
                "input": {
                    "value": "target.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_44": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.reshape(pred.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.reshape(target.shape[0], -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/models/losses/focal_loss.py": {
        "torch": {
            "ones_55": {
                "variable": {
                    "value": "final_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_105": {
                "variable": {
                    "value": "final_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "pred.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_53": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pred.reshape(pred.size(0), -1)",
                            "Call"
                        ],
                        [
                            "pred.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ],
                        [
                            "target.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "target.reshape(target.size(0), -1)",
                            "Call"
                        ],
                        [
                            "target.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "target.view(-1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.where(target == ignore_index, target.new_tensor(0), target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "F.one_hot(target, num_classes=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_265": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "target == ignore_index",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "target.new_tensor(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ],
                        [
                            "target.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "target.reshape(target.size(0), -1)",
                            "Call"
                        ],
                        [
                            "target.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "target.view(-1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.where(target == ignore_index, target.new_tensor(0), target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "F.one_hot(target, num_classes=num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_274": {
                "variable": {
                    "value": "one_hot_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ],
                        [
                            "target.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "target.reshape(target.size(0), -1)",
                            "Call"
                        ],
                        [
                            "target.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "target.view(-1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.where(target == ignore_index, target.new_tensor(0), target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "F.one_hot(target, num_classes=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_283": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ],
                        [
                            "target.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "target.reshape(target.size(0), -1)",
                            "Call"
                        ],
                        [
                            "target.transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "target.view(-1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.where(target == ignore_index, target.new_tensor(0), target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=1)",
                            "Call"
                        ],
                        [
                            "F.one_hot(target, num_classes=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/models/losses/lovasz_loss.py": {
        "torch": {
            "sort_76": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * signs",
                            "BinOp"
                        ],
                        [
                            "(fg - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dot_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(errors_sorted)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lovasz_grad(gt_sorted)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_162": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * signs",
                            "BinOp"
                        ],
                        [
                            "(fg - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dot_165": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "lovasz_grad(fg_sorted)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_169": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_80": {
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_298": {
                "variable": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(cls_score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_122": {
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.dot(F.relu(errors_sorted), grad)",
                            "Call"
                        ],
                        [
                            "[lovasz_hinge_flat(*flatten_binary_logits(logit.unsqueeze(0), label.unsqueeze(0), ignore_index)) for (logit, label) in zip(logits, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_hinge_flat(*flatten_binary_logits(logits, labels, ignore_index))",
                            "Call"
                        ],
                        [
                            "torch.dot(errors_sorted, lovasz_grad(fg_sorted))",
                            "Call"
                        ],
                        [
                            "loss * class_weight[c]",
                            "BinOp"
                        ],
                        [
                            "[lovasz_softmax_flat(*flatten_probs(prob.unsqueeze(0), label.unsqueeze(0), ignore_index), classes=classes, class_weight=class_weight) for (prob, label) in zip(probs, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_softmax_flat(*flatten_probs(probs, labels, ignore_index), classes=classes, class_weight=class_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_216": {
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.dot(F.relu(errors_sorted), grad)",
                            "Call"
                        ],
                        [
                            "[lovasz_hinge_flat(*flatten_binary_logits(logit.unsqueeze(0), label.unsqueeze(0), ignore_index)) for (logit, label) in zip(logits, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_hinge_flat(*flatten_binary_logits(logits, labels, ignore_index))",
                            "Call"
                        ],
                        [
                            "torch.dot(errors_sorted, lovasz_grad(fg_sorted))",
                            "Call"
                        ],
                        [
                            "loss * class_weight[c]",
                            "BinOp"
                        ],
                        [
                            "[lovasz_softmax_flat(*flatten_probs(prob.unsqueeze(0), label.unsqueeze(0), ignore_index), classes=classes, class_weight=class_weight) for (prob, label) in zip(probs, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_softmax_flat(*flatten_probs(probs, labels, ignore_index), classes=classes, class_weight=class_weight)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/models/losses/utils.py": {
        "torch": {}
    },
    "mmseg/models/necks/featurepyramid.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.upsample_4x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(embed_dim, embed_dim, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.upsample_2x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(embed_dim, embed_dim, kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_32": {
                "in_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GELU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_36": {
                "in_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_44": {
                "variable": {
                    "value": "self.identity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_41": {
                "in_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "variable": {
                    "value": "self.downsample_2x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_48": {
                "variable": {
                    "value": "self.downsample_4x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/necks/fpn.py": {
        "torch": {
            "ModuleList_117": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_118": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_196": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_210": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/necks/ic_neck.py": {
        "torch": {
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_low + x_high",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/necks/jpu.py": {
        "torch": {
            "ModuleList_70": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.dilation_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.conv_layers[i - self.start_level](inputs[i]) for i in range(self.start_level, self.backbone_end_level)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "concat_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dilation_layers[i](feat) for i in range(len(self.dilations))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "conv_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(self.in_channels[i], self.mid_channels, kernel_size=3, padding=1, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "dilation_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthwiseSeparableConvModule(in_channels=(self.backbone_end_level - self.start_level) * self.mid_channels, out_channels=self.mid_channels, kernel_size=3, stride=1, padding=dilations[i], dilation=dilations[i], dw_norm_cfg=norm_cfg, dw_act_cfg=None, pw_norm_cfg=norm_cfg, pw_act_cfg=act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/necks/mla_neck.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.channel_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_25": {
                "variable": {
                    "value": "self.feat_extract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[build_norm_layer(norm_layer, in_channels[i])[1] for i in range(len(in_channels))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/necks/multilevel_neck.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/segmentors/base.py": {
        "torch": {
            "tensor_199": {
                "variable": {
                    "value": "log_var_length",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "len(log_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "loss.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/segmentors/cascade_encoder_decoder.py": {
        "torch": {
            "ModuleList_45": {
                "variable": {
                    "value": "self.decode_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/segmentors/encoder_decoder.py": {
        "torch": {
            "softmax_248": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode_decode(img, None)",
                            "Call"
                        ],
                        [
                            "self.encode_decode(img, img_meta)",
                            "Call"
                        ],
                        [
                            "seg_logit[:, :, :resize_shape[0], :resize_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "resize(seg_logit, size=size, mode='bilinear', align_corners=self.align_corners, warning=False)",
                            "Call"
                        ],
                        [
                            "self.slide_inference(img, img_meta, rescale)",
                            "Call"
                        ],
                        [
                            "self.whole_inference(img, img_meta, rescale)",
                            "Call"
                        ],
                        [
                            "self.inference(img, img_meta, rescale)",
                            "Call"
                        ],
                        [
                            "self.inference(imgs[0], img_metas[0], rescale)",
                            "Call"
                        ],
                        [
                            "seg_logit / len(imgs)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "count_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "count_mat.cpu().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.auxiliary_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_180": {
                "input": {
                    "value": "crop_seg_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode_decode(crop_img, img_meta)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(int(x1), int(preds.shape[3] - x2), int(y1), int(preds.shape[2] - y2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/utils/embed.py": {
        "torch": {
            "Unfold_270": {
                "variable": {
                    "value": "self.sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(kernel_size)",
                            "Call"
                        ],
                        [
                            "to_2tuple(kernel_size)",
                            "Call"
                        ],
                        [
                            "to_2tuple(kernel_size)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(dilation)",
                            "Call"
                        ],
                        [
                            "to_2tuple(dilation)",
                            "Call"
                        ],
                        [
                            "to_2tuple(dilation)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "to_2tuple(padding)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "to_2tuple(padding)",
                            "Call"
                        ],
                        [
                            "'corner'",
                            "Method Argument"
                        ],
                        [
                            "'corner'",
                            "Method Argument"
                        ],
                        [
                            "'corner'",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(stride)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "variable"
                        ],
                        [
                            "to_2tuple(stride)",
                            "Call"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "kernel_size",
                            "variable"
                        ],
                        [
                            "to_2tuple(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_283": {
                "variable": {
                    "value": "self.reduction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sample_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size[0] * kernel_size[1] * in_channels",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [0, pad_w, 0, pad_h])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.adap_padding(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C).permute([0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "self.adap_padding(x)",
                            "Call"
                        ],
                        [
                            "self.sampler(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x) if self.norm else x",
                            "IfExp"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, pad_w, 0, pad_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, [0, pad_w, 0, pad_h])",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.adap_padding(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C).permute([0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "self.adap_padding(x)",
                            "Call"
                        ],
                        [
                            "self.sampler(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x) if self.norm else x",
                            "IfExp"
                        ],
                        [
                            "self.reduction(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/utils/inverted_residual.py": {
        "torch": {
            "Sequential_84": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/utils/res_layer.py": {
        "torch": {
            "Sequential_65": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsample",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_50": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/utils/se_layer.py": {
        "torch": {
            "AdaptiveAvgPool2d_38": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/utils/self_attention_block.py": {
        "torch": {
            "matmul_150": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_project(query_feats)",
                            "Call"
                        ],
                        [
                            "self.query_downsample(query)",
                            "Call"
                        ],
                        [
                            "query.reshape(*query.shape[:2], -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_project(key_feats)",
                            "Call"
                        ],
                        [
                            "self.key_downsample(key)",
                            "Call"
                        ],
                        [
                            "key.reshape(*key.shape[:2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_153": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_155": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_project(key_feats)",
                            "Call"
                        ],
                        [
                            "self.key_downsample(value)",
                            "Call"
                        ],
                        [
                            "value.reshape(*value.shape[:2], -1)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/models/utils/up_conv_block.py": {
        "torch": {
            "cat_99": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[skip, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/ops/encoding.py": {
        "torch": {
            "Parameter_24": {
                "variable": {
                    "value": "self.codewords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_codes, channels, dtype=torch.float).uniform_(-std, std)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_codes, dtype=torch.float).uniform_(-1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "assignment_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scaled_l2(x, self.codewords, self.scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_25": {
                "*size": {
                    "value": "num_codes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_30": {
                "*size": {
                    "value": "num_codes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmseg/ops/wrappers.py": {
        "torch": {
            "interpolate_27": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(t * self.scale_factor) for t in x.shape[-2:]]",
                            "ListComp"
                        ],
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "Method Argument"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mmseg/utils/set_env.py": {
        "torch": {}
    },
    "mmseg/utils/util_distribution.py": {
        "torch": {
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_apis/test_single_gpu.py": {
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_config.py": {
        "torch": {}
    },
    "tests/test_core/test_layer_decay_optimizer_constructor.py": {
        "torch": {
            "ModuleList_125": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_129": {
                "variable": {
                    "value": "self.norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.mask_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_134": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.stem_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self.downsample_norm0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_137": {
                "variable": {
                    "value": "self.downsample_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.downsample_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_141": {
                "variable": {
                    "value": "self.downsample_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.patch_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_166": {
                "variable": {
                    "value": "self.patch_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_167": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_178": {
                "variable": {
                    "value": "self.decode_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "stage",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(3, 4, kernel_size=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "stage",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 4, kernel_size=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_132": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_133": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_134": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_135": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_139": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_152": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_153": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_165": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_166": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_core/test_optimizer.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.param1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_15": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_data/test_dataset.py": {
        "torch": {}
    },
    "tests/test_data/test_dataset_builder.py": {
        "torch": {}
    },
    "tests/test_eval_hook.py": {
        "torch": {
            "DataLoader_58": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_185": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_187": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_worker": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_worker": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_worker": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_173": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ],
                        [
                            "ExampleModel()",
                            "Call"
                        ],
                        [
                            "ExampleDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "num_worker": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "data": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_beit.py": {
        "torch": {
            "randn_32": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_62": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_70": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_78": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_86": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_94": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "234",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_106": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_112": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_135": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "732",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_bisenetv1.py": {
        "torch": {
            "randn_28": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_41": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_106": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_107": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_bisenetv2.py": {
        "torch": {
            "randn_16": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_33": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_52": {
                "variable": {
                    "value": "x_a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_53": {
                "variable": {
                    "value": "x_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_blocks.py": {
        "torch": {
            "rand_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_148": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_cgnet.py": {
        "torch": {
            "randn_12": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_131": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_146": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_erfnet.py": {
        "torch": {
            "randn_26": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_34": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "527",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "279",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_fast_scnn.py": {
        "torch": {
            "randn_33": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_hrnet.py": {
        "torch": {
            "randn_98": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_109": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_24": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_25": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_46": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_47": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_icnet.py": {
        "torch": {
            "randn_40": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_mae.py": {
        "torch": {
            "randn_32": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_58": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_66": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_74": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_82": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_90": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "234",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_96": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_102": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_108": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_131": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "732",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_132": {
                "variable": {
                    "value": "abs_pos_embed_value",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_mit.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_29": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_40": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, token_len, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_52": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, token_len, 64)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "56 * 56",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_mobilenet_v3.py": {
        "torch": {
            "randn_35": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_47": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_62": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_resnest.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_resnet.py": {
        "torch": {
            "randn_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_130": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_192": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_217": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_238": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_246": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_255": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_264": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_362": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_378": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_391": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_406": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_422": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_439": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_491": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_538": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_556": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_569": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_resnext.py": {
        "torch": {
            "randn_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "56",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_56": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_stdc.py": {
        "torch": {
            "randn_30": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_45": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "527",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "279",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_110": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_111": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_swin.py": {
        "torch": {
            "randn_14": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "56 * 56",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "56 * 56",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_44": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 112, 112)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_63": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 255, 255)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_72": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 112, 137)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_93": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 56, 56)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_timm_backbone.py": {
        "torch": {
            "randn_42": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_58": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_74": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_93": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_109": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_125": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_twins.py": {
        "torch": {
            "randn_13": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_33": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_164": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3136",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_170": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3136",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_unet.py": {
        "torch": {
            "randn_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_135": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_220": {
                "variable": {
                    "value": "skip_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_221": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_229": {
                "variable": {
                    "value": "skip_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_230": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_237": {
                "variable": {
                    "value": "skip_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_238": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_253": {
                "variable": {
                    "value": "skip_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_266": {
                "variable": {
                    "value": "skip_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_283": {
                "variable": {
                    "value": "skip_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_284": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_559": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_579": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_599": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_619": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_639": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_659": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_679": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_699": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_719": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_738": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_757": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_776": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_795": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_816": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_356": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_373": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_390": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_407": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_424": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "65",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_439": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_454": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_469": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_484": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_499": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_514": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/test_vit.py": {
        "torch": {
            "randn_42": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_48": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_69": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_74": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_78": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_83": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_88": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "234",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_94": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_106": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_112": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_118": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "56 * 56",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_backbones/utils.py": {
        "torch": {
            "allclose_26": {
                "variable": {
                    "value": "weight_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modules.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(modules.weight.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_29": {
                "variable": {
                    "value": "bias_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "modules.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros_like(modules.bias.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_27": {
                "input": {
                    "value": "modules.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_30": {
                "input": {
                    "value": "modules.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_forward.py": {
        "torch": {
            "is_available_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_ann_head.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_10": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_apc_head.py": {
        "torch": {
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_45": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_aspp_head.py": {
        "torch": {
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_27": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_42": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_60": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_cc_head.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_15": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_da_head.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_10": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_decode_head.py": {
        "torch": {
            "randn_83": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_84": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_98": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_99": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_122": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_123": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_140": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_141": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_55": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_dm_head.py": {
        "torch": {
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_45": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_dnl_head.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_14": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_23": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_31": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_dpt_head.py": {
        "torch": {
            "randn_25": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_26": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_ema_head.py": {
        "torch": {
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_19": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_enc_head.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_10": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_20": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_33": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_fcn_head.py": {
        "torch": {
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_34": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_45": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_57": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_68": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_79": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_88": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_111": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_126": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_gc_head.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_12": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_isa_head.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_10": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_knet_head.py": {
        "torch": {
            "ones_like_189": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1][:, 0:1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_75": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_76": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_77": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_78": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_127": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_128": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_129": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_130": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_177": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_178": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_179": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_180": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_192": {
                "input": {
                    "value": "loss['loss_ce.s0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_193": {
                "input": {
                    "value": "loss['loss_ce.s1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_194": {
                "input": {
                    "value": "loss['loss_ce.s2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_195": {
                "input": {
                    "value": "loss['loss_ce.s3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_lraspp_head.py": {
        "torch": {
            "randn_54": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_55": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_56": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "111",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_64": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "77",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "77",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "55",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "55",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_nl_head.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_12": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_ocr_head.py": {
        "torch": {
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_10": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_point_head.py": {
        "torch": {
            "ones_55": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 180, 180]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_11": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_26": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_psa_head.py": {
        "torch": {
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_35": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_44": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_57": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_70": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_83": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_97": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_112": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_psp_head.py": {
        "torch": {
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_27": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_segformer_head.py": {
        "torch": {
            "randn_35": {
                "*size": {
                    "value": "(1, in_channel, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_27": {
                "*size": {
                    "value": "(1, in_channel, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_segmenter_mask_head.py": {
        "torch": {
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_20": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_setr_mla_head.py": {
        "torch": {
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_43": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_44": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_45": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_46": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_55": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_56": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_57": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_58": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_setr_up_head.py": {
        "torch": {
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_45": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_52": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "w * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_stdc_head.py": {
        "torch": {
            "ones_like_27": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[:, 0:1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_9": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_30": {
                "input": {
                    "value": "loss['loss_ce']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_31": {
                "input": {
                    "value": "loss['loss_dice']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_heads/test_uper_head.py": {
        "torch": {
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_losses/test_ce_loss.py": {
        "torch": {
            "Tensor_25": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_26": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_43": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 21, 8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_44": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_118": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_262": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_263": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 10, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_264": {
                "variable": {
                    "value": "fake_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_268": {
                "variable": {
                    "value": "torch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 5, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 1, 10, 10)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fake_label.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "weight": {
                    "value": "fake_weight.unsqueeze(1).float() if with_weight else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_51": {
                "variable": {
                    "value": "fake_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_68": {
                "variable": {
                    "value": "torch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 5, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 1, 10, 10)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fake_label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "weight": {
                    "value": "fake_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.rand(2, 10)",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 8, 8)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 10, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_86": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight, ignore_index=255)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight, ignore_index=255)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, ignore_index=10)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight if with_weight else None, ignore_index=255)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='mean', ignore_index=255)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='sum', ignore_index=255) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='none', weight=fake_weight)",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight).sum() / avg_factor",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight).mean()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='none', weight=fake_weight.unsqueeze(1).expand(fake_pred.shape))",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight).sum() / avg_factor",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight).mean()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='sum', weight=class_weight) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='mean', pos_weight=class_weight)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred[fake_label != 10], fake_label[fake_label != 10].float(), pos_weight=class_weight[fake_label != 10], reduction='mean')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred[fake_label != 10], fake_label[fake_label != 10].float(), pos_weight=class_weight[fake_label != 10], reduction='sum') / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, ignore_index=10, reduction='sum', weight=class_weight) / fake_label[fake_label != 10].numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, ignore_index=10, reduction='sum', weight=class_weight) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.unsqueeze(1).float(), reduction='none', weight=fake_weight.unsqueeze(1).float() if with_weight else None)",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight.unsqueeze(1)).sum() / (avg_factor + eps)",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight.unsqueeze(1)).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "full_91": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 21, 8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_92": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_94": {
                "variable": {
                    "value": "fake_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_135": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(40.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_145": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(40.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_153": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(200.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_171": {
                "input": {
                    "value": "loss_cls1(fake_pred, fake_label, ignore_index=255) / fake_pred.numel()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "loss_cls2(fake_pred, fake_label, ignore_index=255) / fake_pred.numel()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_193": {
                "variable": {
                    "value": "torch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 5, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 1, 10, 10)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fake_label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(5)",
                            "Call"
                        ],
                        [
                            "class_weight / class_weight.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.rand(2, 10)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 21, 8, 8)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_199": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_200": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_201": {
                "variable": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_221": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight, ignore_index=255)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight, ignore_index=255)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, ignore_index=10)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight if with_weight else None, ignore_index=255)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='mean', ignore_index=255)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='sum', ignore_index=255) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='none', weight=fake_weight)",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight).sum() / avg_factor",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight).mean()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='none', weight=fake_weight.unsqueeze(1).expand(fake_pred.shape))",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight).sum() / avg_factor",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight).mean()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='sum', weight=class_weight) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='mean', pos_weight=class_weight)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred[fake_label != 10], fake_label[fake_label != 10].float(), pos_weight=class_weight[fake_label != 10], reduction='mean')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred[fake_label != 10], fake_label[fake_label != 10].float(), pos_weight=class_weight[fake_label != 10], reduction='sum') / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, ignore_index=10, reduction='sum', weight=class_weight) / fake_label[fake_label != 10].numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, ignore_index=10, reduction='sum', weight=class_weight) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.unsqueeze(1).float(), reduction='none', weight=fake_weight.unsqueeze(1).float() if with_weight else None)",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight.unsqueeze(1)).sum() / (avg_factor + eps)",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight.unsqueeze(1)).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_254": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight, ignore_index=255)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight, ignore_index=255)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, ignore_index=10)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight if with_weight else None, ignore_index=255)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='mean', ignore_index=255)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='sum', ignore_index=255) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='none', weight=fake_weight)",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight).sum() / avg_factor",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight).mean()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='none', weight=fake_weight.unsqueeze(1).expand(fake_pred.shape))",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight).sum() / avg_factor",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight).mean()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='sum', weight=class_weight) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='mean', pos_weight=class_weight)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred[fake_label != 10], fake_label[fake_label != 10].float(), pos_weight=class_weight[fake_label != 10], reduction='mean')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred[fake_label != 10], fake_label[fake_label != 10].float(), pos_weight=class_weight[fake_label != 10], reduction='sum') / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, ignore_index=10, reduction='sum', weight=class_weight) / fake_label[fake_label != 10].numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, ignore_index=10, reduction='sum', weight=class_weight) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.unsqueeze(1).float(), reduction='none', weight=fake_weight.unsqueeze(1).float() if with_weight else None)",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight.unsqueeze(1)).sum() / (avg_factor + eps)",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight.unsqueeze(1)).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_294": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight, ignore_index=255)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight, ignore_index=255)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, ignore_index=10)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight if with_weight else None, ignore_index=255)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='mean', ignore_index=255)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='sum', ignore_index=255) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='none', weight=fake_weight)",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight).sum() / avg_factor",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight).mean()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='none', weight=fake_weight.unsqueeze(1).expand(fake_pred.shape))",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight).sum() / avg_factor",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight).mean()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='sum', weight=class_weight) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='mean', pos_weight=class_weight)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred[fake_label != 10], fake_label[fake_label != 10].float(), pos_weight=class_weight[fake_label != 10], reduction='mean')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred[fake_label != 10], fake_label[fake_label != 10].float(), pos_weight=class_weight[fake_label != 10], reduction='sum') / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, ignore_index=10, reduction='sum', weight=class_weight) / fake_label[fake_label != 10].numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, ignore_index=10, reduction='sum', weight=class_weight) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.unsqueeze(1).float(), reduction='none', weight=fake_weight.unsqueeze(1).float() if with_weight else None)",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight.unsqueeze(1)).sum() / (avg_factor + eps)",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight.unsqueeze(1)).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_35": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_38": {
                "input": {
                    "value": "loss_cls(fake_pred, fake_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(200.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_80": {
                "variable": {
                    "value": "torch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 5, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 1, 10, 10)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1]).long()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.Tensor([1]).long()",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 5, (2, 10)).long()",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 2, (3, 10, 10))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_105": {
                "variable": {
                    "value": "torch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 5, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 1, 10, 10)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fake_label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "weight": {
                    "value": "fake_weight.unsqueeze(1).expand(fake_pred.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_115": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight, ignore_index=255)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight, ignore_index=255)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, ignore_index=10)",
                            "Call"
                        ],
                        [
                            "loss_cls(fake_pred, fake_label, weight=fake_weight if with_weight else None, ignore_index=255)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='mean', ignore_index=255)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='sum', ignore_index=255) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='none', weight=fake_weight)",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight).sum() / avg_factor",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight).mean()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='none', weight=fake_weight.unsqueeze(1).expand(fake_pred.shape))",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight).sum() / avg_factor",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight).mean()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, reduction='sum', weight=class_weight) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.float(), reduction='mean', pos_weight=class_weight)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred[fake_label != 10], fake_label[fake_label != 10].float(), pos_weight=class_weight[fake_label != 10], reduction='mean')",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred[fake_label != 10], fake_label[fake_label != 10].float(), pos_weight=class_weight[fake_label != 10], reduction='sum') / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, ignore_index=10, reduction='sum', weight=class_weight) / fake_label[fake_label != 10].numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.cross_entropy(fake_pred, fake_label, ignore_index=10, reduction='sum', weight=class_weight) / fake_label.numel()",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.binary_cross_entropy_with_logits(fake_pred, fake_label.unsqueeze(1).float(), reduction='none', weight=fake_weight.unsqueeze(1).float() if with_weight else None)",
                            "Call"
                        ],
                        [
                            "(torch_loss * weight.unsqueeze(1)).sum() / (avg_factor + eps)",
                            "BinOp"
                        ],
                        [
                            "(torch_loss * weight.unsqueeze(1)).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_135": {
                "data": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "data": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_181": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_182": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_183": {
                "variable": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_185": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 21, 8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_186": {
                "variable": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_187": {
                "variable": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_228": {
                "variable": {
                    "value": "torch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred[fake_label != 10]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "fake_label[fake_label != 10].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "class_weight[fake_label != 10]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.rand(5)",
                            "Call"
                        ],
                        [
                            "class_weight / class_weight.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.rand(2, 10)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 21, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "200.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_203": {
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 5, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 1, 10, 10)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1]).long()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.Tensor([1]).long()",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 5, (2, 10)).long()",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 2, (3, 10, 10))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(5)",
                            "Call"
                        ],
                        [
                            "class_weight / class_weight.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.rand(2, 10)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 21, 8, 8)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_83": {
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 5, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 1, 10, 10)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1]).long()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.Tensor([1]).long()",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 5, (2, 10)).long()",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 2, (3, 10, 10))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_234": {
                "input": {
                    "value": "fake_pred[fake_label != 10]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "fake_label[fake_label != 10].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "class_weight[fake_label != 10]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.rand(5)",
                            "Call"
                        ],
                        [
                            "class_weight / class_weight.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.rand(2, 10)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 21, 8, 8)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_241": {
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 5, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 1, 10, 10)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1]).long()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.Tensor([1]).long()",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 5, (2, 10)).long()",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 2, (3, 10, 10))",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(5)",
                            "Call"
                        ],
                        [
                            "class_weight / class_weight.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.rand(2, 10)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 21, 8, 8)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_248": {
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[100, -100]])",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 5, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.full(size=(2, 21, 8, 8), fill_value=0.5)",
                            "Call"
                        ],
                        [
                            "torch.rand(3, 1, 10, 10)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "fake_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1]).long()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.Tensor([1]).long()",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 5, (2, 10)).long()",
                            "Call"
                        ],
                        [
                            "torch.rand(2, 10).float()",
                            "Call"
                        ],
                        [
                            "torch.ones(2, 8, 8).long()",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 2, (3, 10, 10))",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(5)",
                            "Call"
                        ],
                        [
                            "class_weight / class_weight.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.rand(2, 10)",
                            "Call"
                        ],
                        [
                            "torch.randn(2, 21, 8, 8)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_models/test_losses/test_dice_loss.py": {
        "torch": {
            "rand_17": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_64": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_18": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_losses/test_focal_loss.py": {
        "torch": {
            "rand_85": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_86": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_95": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_96": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_97": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.one_hot(fake_target, num_classes=4)",
                            "Call"
                        ],
                        [
                            "fake_target.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "F.one_hot(fake_target, num_classes=4)",
                            "Call"
                        ],
                        [
                            "fake_target.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_108": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_109": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_112": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.one_hot(fake_target, num_classes=4)",
                            "Call"
                        ],
                        [
                            "fake_target.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "F.one_hot(fake_target, num_classes=4)",
                            "Call"
                        ],
                        [
                            "fake_target.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_122": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_123": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_124": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3 * 5 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_139": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_140": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_152": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_153": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_165": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_166": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_167": {
                "variable": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_168": {
                "variable": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_169": {
                "variable": {
                    "value": "dim3",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_172": {
                "variable": {
                    "value": "one_hot_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.one_hot(fake_target, num_classes=4)",
                            "Call"
                        ],
                        [
                            "fake_target.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "F.one_hot(fake_target, num_classes=4)",
                            "Call"
                        ],
                        [
                            "fake_target.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_179": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_180": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "one_hot_182": {
                "variable": {
                    "value": "one_hot_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 2, 2))",
                            "Call"
                        ],
                        [
                            "F.one_hot(fake_target, num_classes=4)",
                            "Call"
                        ],
                        [
                            "fake_target.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "F.one_hot(fake_target, num_classes=4)",
                            "Call"
                        ],
                        [
                            "fake_target.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ],
                        [
                            "torch.randint(0, 4, (3, 5, 6))",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_191": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_192": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_193": {
                "variable": {
                    "value": "dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_194": {
                "variable": {
                    "value": "dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_195": {
                "variable": {
                    "value": "dim3",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_208": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_209": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_21": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_22": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_37": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_38": {
                "variable": {
                    "value": "fake_target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, 5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "loss1 * ignore_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "loss2 * ignore_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_losses/test_lovasz_loss.py": {
        "torch": {
            "rand_34": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_47": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_92": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_93": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_105": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_106": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_48": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_losses/test_utils.py": {
        "torch": {
            "rand_10": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_11": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_46": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_47": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_52": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_56": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_62": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_68": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_74": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_80": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_86": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_92": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_99": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_105": {
                "variable": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "allclose_59": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_65": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_71": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(75.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_77": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(80.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_83": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_89": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_95": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(40.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_101": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, label)",
                            "Call"
                        ],
                        [
                            "accuracy(pred, true_label)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_122": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "75.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "80.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "40.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_108": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "acc",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(100.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "data": {
                    "value": "100.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_feature2pyramid.py": {
        "torch": {
            "randn_12": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_24": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_fpn.py": {
        "torch": {
            "randn_10": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "56 // 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "56 // 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_ic_neck.py": {
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_20": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_21": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_22": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_jpu.py": {
        "torch": {
            "randn_21": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_22": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_23": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_39": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_41": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_mla_neck.py": {
        "torch": {
            "randn_11": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_necks/test_multilevel_neck.py": {
        "torch": {
            "randn_14": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_25": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_segmentors/utils.py": {
        "torch": {
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_models/test_utils/test_embed.py": {
        "torch": {
            "rand_108": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "11",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "12",
                            "int"
                        ]
                    ]
                }
            },
            "rand_133": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "11",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "12",
                            "int"
                        ]
                    ]
                }
            },
            "rand_156": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "11",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "12",
                            "int"
                        ]
                    ]
                }
            },
            "rand_184": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "11",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "12",
                            "int"
                        ]
                    ]
                }
            },
            "rand_202": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "11",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "12",
                            "int"
                        ]
                    ]
                }
            },
            "rand_335": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_358": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_14": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_23": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_37": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_51": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_62": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_68": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_232": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*input_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*input_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_276": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*input_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_298": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*input_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_379": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "rand_402": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "rand_425": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "rand_448": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ],
                        [
                            "input_size[0] * input_size[1]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_models/test_utils/test_shape_convert.py": {
        "torch": {
            "rand_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape_nchw",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape_nchw",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape_nchw",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape_nlc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape_nlc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape_nlc",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape_nchw",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape_nlc",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_sampler.py": {
        "torch": {
            "randn_36": {
                "variable": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_37": {
                "variable": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1, 45, 45)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_45": {
                "variable": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_46": {
                "variable": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1, 45, 45)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_63": {
                "variable": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_64": {
                "variable": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1, 45, 45)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_73": {
                "variable": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_74": {
                "variable": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1, 45, 45)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_29": {
                "variable": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_30": {
                "variable": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1, 89, 89)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_56": {
                "variable": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "45",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_57": {
                "variable": {
                    "value": "seg_label",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1, 89, 89)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_utils/test_util_distribution.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/benchmark.py": {
        "torch": {
            "synchronize_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/deploy_test.py": {
        "torch": {
            "empty_cache_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "seg_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seg_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.io_binding.copy_outputs_to_cpu()[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seg_pred).float()",
                            "Call"
                        ],
                        [
                            "resize(seg_pred, size=tuple(ori_shape[:2]), mode='nearest')",
                            "Call"
                        ],
                        [
                            "seg_pred.long().detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "seg_pred[0]",
                            "Subscript"
                        ],
                        [
                            "list(seg_pred)",
                            "Call"
                        ],
                        [
                            "self.model({'input': img})['output']",
                            "Subscript"
                        ],
                        [
                            "seg_pred.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(seg_pred).float()",
                            "Call"
                        ],
                        [
                            "resize(seg_pred, size=tuple(ori_shape[:2]), mode='nearest')",
                            "Call"
                        ],
                        [
                            "seg_pred.long().detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "seg_pred[0]",
                            "Subscript"
                        ],
                        [
                            "list(seg_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "seg_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seg_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.io_binding.copy_outputs_to_cpu()[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seg_pred).float()",
                            "Call"
                        ],
                        [
                            "resize(seg_pred, size=tuple(ori_shape[:2]), mode='nearest')",
                            "Call"
                        ],
                        [
                            "seg_pred.long().detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "seg_pred[0]",
                            "Subscript"
                        ],
                        [
                            "list(seg_pred)",
                            "Call"
                        ],
                        [
                            "self.model({'input': img})['output']",
                            "Subscript"
                        ],
                        [
                            "seg_pred.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(seg_pred).float()",
                            "Call"
                        ],
                        [
                            "resize(seg_pred, size=tuple(ori_shape[:2]), mode='nearest')",
                            "Call"
                        ],
                        [
                            "seg_pred.long().detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "seg_pred[0]",
                            "Subscript"
                        ],
                        [
                            "list(seg_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_130": {
                "type": {
                    "value": "self.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/model_converters/beit2mmseg.py": {
        "torch": {
            "save_52": {
                "obj": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_beit(state_dict)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dst",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/model_converters/mit2mmseg.py": {
        "torch": {
            "save_78": {
                "obj": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_mit(state_dict)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dst",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "new_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, ckpt[sub_item_k]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/model_converters/stdc2mmseg.py": {
        "torch": {
            "save_67": {
                "obj": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_stdc(state_dict, args.type)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dst",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/model_converters/swin2mmseg.py": {
        "torch": {
            "save_83": {
                "obj": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_swin(state_dict)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dst",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/model_converters/twins2mmseg.py": {
        "torch": {
            "save_83": {
                "obj": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_twins(args, state_dict)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dst",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "new_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, ckpt[k.replace('attn.q.', 'attn.kv.')]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/model_converters/vit2mmseg.py": {
        "torch": {
            "save_66": {
                "obj": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_vit(state_dict)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dst",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/model_converters/vitjax2mmseg.py": {
        "torch": {
            "from_numpy_56": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack((query_weight, key_weight, value_weight), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_58": {
                "variable": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qkv_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.stack((query_weight, key_weight, value_weight), 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(qkv_weight, start_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack((query_bias, key_bias, value_bias), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_61": {
                "variable": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.stack((query_bias, key_bias, value_bias), 0))",
                            "Call"
                        ],
                        [
                            "torch.flatten(qkv_bias, start_dim=0)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_67": {
                "variable": {
                    "value": "to_out_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "to_out_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "jax_weights[f'{jax_block}/MultiHeadDotProductAttention_1/out/kernel']",
                            "Subscript"
                        ],
                        [
                            "torch.flatten(to_out_weight, start_dim=0, end_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "jax_weights[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_119": {
                "obj": {
                    "value": "torch_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "vit_jax_to_torch(jax_weights_tensor, num_layer)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dst",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/onnx2tensorrt.py": {
        "torch": {
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "(ori_img, flip_img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/publish_model.py": {
        "torch": {
            "load_18": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_24": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/pytorch2onnx.py": {
        "torch": {
            "manual_seed_23": {
                "seed": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "module_output",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "module.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "module.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "module.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "module.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "module.track_running_stats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "(ori_img, flip_img)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/pytorch2torchscript.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_119": {
                "variable": {
                    "value": "traced_model",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "example_inputs": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.rand(*input_shape)",
                            "Call"
                        ],
                        [
                            "mm_inputs.pop('imgs')",
                            "Call"
                        ]
                    ]
                },
                "check_trace": {
                    "value": "verify",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "module_output",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "module.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "module.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "module.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "module.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "module.track_running_stats",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "empty_cache_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/torchserve/mmseg_handler.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.map_location + ':' + str(properties.get('gpu_id')) if torch.cuda.is_available() else self.map_location",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {}
    }
}