{
    "dataset.py": {
        "torch": {
            "load_57": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_137": {
                "obj": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "ndarray": {
                    "value": "tup[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "ndarray": {
                    "value": "tup[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "ndarray": {
                    "value": "tup[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "ndarray": {
                    "value": "tup[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "data": {
                    "value": "[valid_len_ls[ind]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "data": {
                    "value": "[padd_to_index + 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "modeling/predmlp.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, hidden_unit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_unit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_23": {
                "normalized_shape": {
                    "value": "hidden_unit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "hidden_unit",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "modeling/selfatten.py": {
        "torch": {
            "Linear_46": {
                "variable": {
                    "value": "self.q_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "global_graph_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.k_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "global_graph_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.v_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "global_graph_width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_58": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_lin(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "key.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_23": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.reshape(-1, shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_interleave_27": {
                "variable": {
                    "value": "valid_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.repeat_interleave(valid_len, repeats=shape[1], dim=0)",
                            "Call"
                        ],
                        [
                            "valid_len.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "X.shape",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "input": {
                    "value": "X.reshape(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_60": {
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_softmax(scores, valid_len)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_lin(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modeling/subgraph.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.layer_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, hidden_unit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "[x, aggr_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "v[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_unit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_68": {
                "normalized_shape": {
                    "value": "hidden_unit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "hidden_unit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_92": {
                "data": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "v[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "modeling/vectornet.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "single_gpu_train.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:3 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f\"epoch_{end_epoch}.valminade_{val_minade:.3f}.{date}.{'xkhuang'}.pth\")",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "StepLR_93": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "decay_lr_every",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_lr_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "float"
                        ]
                    ]
                }
            },
            "save_66": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'end_epoch': end_epoch, 'val_minade': val_minade}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f\"epoch_{end_epoch}.valminade_{val_minade:.3f}.{date}.{'xkhuang'}.pth\")",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "13",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_114": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([i.y for i in data], 0).view(-1, out_channels).to(device)",
                            "Call"
                        ],
                        [
                            "data.y.view(-1, out_channels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_108": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i.y for i in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_and_generate_H5.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:2 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f\"epoch_{end_epoch}.valminade_{val_minade:.3f}.{date}.{'xkhuang'}.pth\")",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "StepLR_101": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "decay_lr_every",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_lr_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "float"
                        ]
                    ]
                }
            },
            "save_72": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'end_epoch': end_epoch, 'val_minade': val_minade}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint_path, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f\"epoch_{end_epoch}.valminade_{val_minade:.3f}.{date}.{'xkhuang'}.pth\")",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_85": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "13",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "load_68": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f\"epoch_{end_epoch}.valminade_{val_minade:.3f}.{date}.{'xkhuang'}.pth\")",
                            "Call"
                        ]
                    ]
                }
            },
            "device_79": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{gpus[0]}' if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_95": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "StepLR_96": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "decay_lr_every",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "gamma": {
                    "value": "decay_lr_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "float"
                        ]
                    ]
                }
            },
            "save_64": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'end_epoch': end_epoch, 'val_minade': val_minade}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, f\"epoch_{end_epoch}.valminade_{val_minade:.3f}.{date}.{'xkhuang'}.pth\")",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_78": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "13",
                            "int"
                        ]
                    ]
                }
            },
            "cat_108": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i.y for i in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_111": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([i.y for i in data], 0).view(-1, out_channels).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/eval.py": {
        "torch": {
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i.y for i in data]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/viz_utils.py": {
        "torch": {}
    }
}