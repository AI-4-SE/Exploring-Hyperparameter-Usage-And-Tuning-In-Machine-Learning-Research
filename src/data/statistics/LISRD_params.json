{
    "lisrd/datasets/base_dataset.py": {
        "torch": {
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._config.get('seed', 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_37": {
                "dataset": {
                    "value": "self.get_dataset(split)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._config['test_batch_size'] if split == 'test' else self._config['batch_size']",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "split == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/datasets/coco.py": {
        "torch": {
            "tensor_126": {
                "variable": {
                    "value": "outputs[image0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "img0.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "outputs[image1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "img1.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "outputs[image2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "img2.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "outputs[homography]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "outputs[H_no_rot]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "H_no_rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "variable": {
                    "value": "outputs[rot_angle]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[rot_angle]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "outputs[valid_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "outputs[keypoints0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "kp_lists[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "outputs[keypoints1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "kp_lists[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "outputs[keypoints2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "kp_lists[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "outputs[valid_mask0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_mask0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_valid_mask(H_inv, img_size, self._config['warped_pair']['valid_border_margin'])",
                            "Call"
                        ],
                        [
                            "valid_mask0 * valid_mask2_0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "outputs[valid_mask1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_mask1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_valid_mask(H, img_size, self._config['warped_pair']['valid_border_margin'])",
                            "Call"
                        ],
                        [
                            "valid_mask1 * valid_mask2_2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/datasets/flashes.py": {
        "torch": {
            "tensor_148": {
                "variable": {
                    "value": "outputs[image0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "img0.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "outputs[image1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "img1.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "outputs[image2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "img2.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "outputs[homography]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "outputs[H_no_rot]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "H_no_rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "outputs[rot_angle]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[rot_angle]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "outputs[valid_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "outputs[keypoints0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "kp_lists[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "outputs[keypoints1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "kp_lists[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "outputs[keypoints2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "kp_lists[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "outputs[valid_mask0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_mask0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_valid_mask(H_inv, img_size, self._config['warped_pair']['valid_border_margin'])",
                            "Call"
                        ],
                        [
                            "valid_mask0 * valid_mask2_0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "outputs[valid_mask1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_mask1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_valid_mask(H, img_size, self._config['warped_pair']['valid_border_margin'])",
                            "Call"
                        ],
                        [
                            "valid_mask1 * valid_mask2_2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/datasets/hpatches.py": {
        "torch": {
            "tensor_117": {
                "variable": {
                    "value": "meta_desc0_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat0['meta_descriptors']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_120": {
                "variable": {
                    "value": "features[m][meta_descriptors0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "F.grid_sample(meta_desc0_t, grid0).squeeze(3).permute(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "meta_desc1_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat1['meta_descriptors']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_126": {
                "variable": {
                    "value": "features[m][meta_descriptors1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "F.grid_sample(meta_desc1_t, grid1).squeeze(3).permute(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "kp0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grid_sample_120": {
                "input": {
                    "value": "meta_desc0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(feat0['meta_descriptors'])",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(torch.tensor(kp0), img_size).repeat(4, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_120": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_120": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "kp1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grid_sample_126": {
                "input": {
                    "value": "meta_desc1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(feat1['meta_descriptors'])",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(torch.tensor(kp1), img_size).repeat(4, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_126": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_126": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/datasets/mixed_dataset.py": {
        "torch": {}
    },
    "lisrd/datasets/rdnim.py": {
        "torch": {
            "tensor_99": {
                "variable": {
                    "value": "meta_desc0_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat0['meta_descriptors']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_102": {
                "variable": {
                    "value": "features[m][meta_descriptors0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "F.grid_sample(meta_desc0_t, grid0).squeeze(3).permute(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "meta_desc1_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat1['meta_descriptors']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_108": {
                "variable": {
                    "value": "features[m][meta_descriptors1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "F.grid_sample(meta_desc1_t, grid1).squeeze(3).permute(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "kp0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grid_sample_102": {
                "input": {
                    "value": "meta_desc0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(feat0['meta_descriptors'])",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(torch.tensor(kp0), img_size).repeat(4, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_102": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_102": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "kp1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grid_sample_108": {
                "input": {
                    "value": "meta_desc1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(feat1['meta_descriptors'])",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(torch.tensor(kp1), img_size).repeat(4, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_108": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_108": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/datasets/vidit.py": {
        "torch": {
            "tensor_129": {
                "variable": {
                    "value": "outputs[image0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "img0.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "outputs[image1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "img1.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "outputs[image2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "img2.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "outputs[homography]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "outputs[H_no_rot]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "H_no_rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "outputs[rot_angle]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[rot_angle]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "outputs[valid_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "outputs[keypoints0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "kp_lists[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "outputs[keypoints1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "kp_lists[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "outputs[keypoints2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "kp_lists[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "outputs[valid_mask0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_mask0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_valid_mask(H_inv, img_size, self._config['warped_pair']['valid_border_margin'])",
                            "Call"
                        ],
                        [
                            "valid_mask0 * valid_mask2_0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "outputs[valid_mask1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_mask1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_valid_mask(H, img_size, self._config['warped_pair']['valid_border_margin'])",
                            "Call"
                        ],
                        [
                            "valid_mask1 * valid_mask2_2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/experiment.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_79": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/export_features.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.imread(img_path)",
                            "Call"
                        ],
                        [
                            "cv2.cvtColor(img, cv2.COLOR_BGR2RGB)",
                            "Call"
                        ],
                        [
                            "resize_and_crop(img, (h, w))",
                            "Call"
                        ],
                        [
                            "torch.tensor(img, dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "img.permute(2, 0, 1).unsqueeze(0) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_83": {
                "variable": {
                    "value": "desc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "func.grid_sample(descs[k], grid_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "variable": {
                    "value": "desc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_83": {
                "variable": {
                    "value": "desc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "keypoints[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grid_sample_84": {
                "input": {
                    "value": "descs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(torch.tensor(keypoints[:, :2], dtype=torch.float, device=device), img_size[:2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lisrd/models/backbones/net_vlad.py": {
        "torch": {
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_clusters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_clusters, dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.conv.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(2.0 * self.alpha * self.centroids).unsqueeze(-1).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-self.alpha * self.centroids.norm(dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "soft_assign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_assign",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x).view(N, self.num_clusters, -1)",
                            "Call"
                        ],
                        [
                            "func.softmax(soft_assign, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "residual.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "func.normalize(vlad, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(vlad, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_60": {
                "variable": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "residual.sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "func.normalize(vlad, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(vlad, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.normalize(x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_29": {
                "*size": {
                    "value": "num_clusters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "lisrd/models/backbones/vgg.py": {
        "torch": {
            "ReLU_7": {
                "variable": {
                    "value": "self._relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_8": {
                "variable": {
                    "value": "self._pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "variable": {
                    "value": "self._conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self._bn1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self._conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self._bn1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self._conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self._bn2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self._conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self._bn2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self._conv3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self._bn3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self._conv3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self._bn3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self._conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self._bn4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self._conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self._bn4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/models/base_model.py": {
        "torch": {
            "Adam_124": {
                "variable": {
                    "value": "self._solver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self._net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self._config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SummaryWriter_160": {
                "variable": {
                    "value": "self._writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "runs_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(exper_dir, 'runs')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_326": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_122": {
                "variable": {
                    "value": "self._net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self._net",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_319": {
                "obj": {
                    "value": "{'iter': self._it, 'model_state_dict': self._net.state_dict(), 'optimizer_state_dict': self._solver.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(exper_dir, 'checkpoints/checkpoint_' + str(self._it) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/models/keypoint_detectors.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/models/lisrd.py": {
        "torch": {
            "ReLU_24": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv_illum_var_rot_var_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn_illum_var_rot_var_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv_illum_var_rot_var_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self._desc_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv_illum_var_rot_invar_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn_illum_var_rot_invar_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv_illum_var_rot_invar_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self._desc_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv_illum_invar_rot_var_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn_illum_invar_rot_var_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv_illum_invar_rot_var_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self._desc_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv_illum_invar_rot_invar_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn_illum_invar_rot_invar_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv_illum_invar_rot_invar_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self._desc_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_216": {
                "variable": {
                    "value": "one",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_140": {
                "variable": {
                    "value": "meta_desc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_desc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "raw_desc.clone()",
                            "Call"
                        ],
                        [
                            "func.interpolate(meta_desc, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "meta_desc.reshape(b, c, tile, sub_h, tile, sub_w)",
                            "Call"
                        ],
                        [
                            "meta_desc.permute(0, 2, 4, 1, 3, 5)",
                            "Call"
                        ],
                        [
                            "meta_desc.reshape(b * tile * tile, c, sub_h, sub_w)",
                            "Call"
                        ],
                        [
                            "netvlad(meta_desc).reshape(b, tile, tile, self._config['meta_desc_dim'] * self._config['n_clusters']).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "local_desc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "local_desc_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_256": {
                "variable": {
                    "value": "local_desc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "local_desc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_270": {
                "variable": {
                    "value": "meta_desc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "meta_desc_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_270": {
                "variable": {
                    "value": "meta_desc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_272": {
                "variable": {
                    "value": "meta_desc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_298": {
                "variable": {
                    "value": "m_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "m_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_298": {
                "variable": {
                    "value": "m_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_318": {
                "input": {
                    "value": "torch.tensor(m_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "data": {
                    "value": "m_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "lisrd/models/lisrd_sift.py": {
        "torch": {
            "stack_216": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_216": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "meta_desc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "meta_desc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(meta_desc, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_100": {
                "tensors": {
                    "value": "meta_descs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "desc_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "desc_dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(desc_dists, dim=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(desc_dists, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_190": {
                "variable": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "func.softmax(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "func.softmax(meta_desc_sims, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "func.softmax(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "func.softmax(meta_desc_sims, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_194": {
                "variable": {
                    "value": "desc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc_dists * meta_desc_sims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "points_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.linalg.norm(warped_kp0[:, None, :] - kp1[None, :, :], axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "variable": {
                    "value": "desc_dist[dist_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_245": {
                "variable": {
                    "value": "desc_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "desc_dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(desc_dists, dim=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(desc_dists, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_255": {
                "variable": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "func.softmax(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "func.softmax(meta_desc_sims, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_258": {
                "variable": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "func.softmax(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "func.softmax(meta_desc_sims, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_259": {
                "variable": {
                    "value": "desc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc_dists * meta_desc_sims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "desc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "desc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "descs[i][assignments[i] == j]",
                            "Subscript"
                        ],
                        [
                            "desc.reshape(1, self._config['desc_size'], -1, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(desc, dtype=torch.float, device=self._device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[v + '_desc0'][i][idx0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[v + '_desc1'][i][idx1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_177": {
                "variable": {
                    "value": "desc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc0.unsqueeze(1) - desc1.unsqueeze(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_186": {
                "variable": {
                    "value": "meta_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_desc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[v + '_meta_desc0'][i][assignments0]",
                            "Subscript"
                        ],
                        [
                            "func.normalize(meta_desc0, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs[v + '_meta_desc0'][i][assignments0]",
                            "Subscript"
                        ],
                        [
                            "func.normalize(meta_desc0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_188": {
                "variable": {
                    "value": "meta_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_desc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[v + '_meta_desc1'][i][assignments1]",
                            "Subscript"
                        ],
                        [
                            "func.normalize(meta_desc1, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs[v + '_meta_desc1'][i][assignments1]",
                            "Subscript"
                        ],
                        [
                            "func.normalize(meta_desc1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[v + '_desc0'][i][idx0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_240": {
                "variable": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs[v + '_desc1'][i][idx1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_242": {
                "variable": {
                    "value": "desc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc0.unsqueeze(1) - desc1.unsqueeze(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_251": {
                "variable": {
                    "value": "meta_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_desc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[v + '_meta_desc0'][i][assignments0]",
                            "Subscript"
                        ],
                        [
                            "func.normalize(meta_desc0, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs[v + '_meta_desc0'][i][assignments0]",
                            "Subscript"
                        ],
                        [
                            "func.normalize(meta_desc0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_253": {
                "variable": {
                    "value": "meta_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_desc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[v + '_meta_desc1'][i][assignments1]",
                            "Subscript"
                        ],
                        [
                            "func.normalize(meta_desc1, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs[v + '_meta_desc1'][i][assignments1]",
                            "Subscript"
                        ],
                        [
                            "func.normalize(meta_desc1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_165": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_206": {
                "input": {
                    "value": "pos_desc_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "desc_dist.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_210": {
                "input": {
                    "value": "desc_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(desc0.unsqueeze(1) - desc1.unsqueeze(0), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(desc_dists * meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.norm(desc0.unsqueeze(1) - desc1.unsqueeze(0), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(desc_dists * meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "desc_dist.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_212": {
                "input": {
                    "value": "config['margin'] + pos_dist - neg_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_89": {
                "*size": {
                    "value": "self._config['meta_desc_dim'] * self._config['n_clusters']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/utils/geometry_utils.py": {
        "torch": {
            "stack_48": {
                "variable": {
                    "value": "desc_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "desc_dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(desc_dists, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.sum(desc_dists * meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "np.stack(desc_dists, axis=2)",
                            "Call"
                        ],
                        [
                            "np.sum(desc_dists * meta_desc_sims, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_49": {
                "variable": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "func.softmax(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "np.stack(meta_desc_sims, axis=2)",
                            "Call"
                        ],
                        [
                            "np.exp(meta_desc_sims)",
                            "Call"
                        ],
                        [
                            "meta_desc_sims / np.sum(meta_desc_sims, axis=2, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "variable": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_desc_sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "func.softmax(meta_desc_sims, dim=2)",
                            "Call"
                        ],
                        [
                            "np.stack(meta_desc_sims, axis=2)",
                            "Call"
                        ],
                        [
                            "np.exp(meta_desc_sims)",
                            "Call"
                        ],
                        [
                            "meta_desc_sims / np.sum(meta_desc_sims, axis=2, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_53": {
                "variable": {
                    "value": "desc_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc_dists * meta_desc_sims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_87": {
                "variable": {
                    "value": "descs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "descs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(descs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "meta_descs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "meta_descs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(meta_descs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_104": {
                "variable": {
                    "value": "desc_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nid,mid->nim",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(meta_desc1, meta_desc2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "variable": {
                    "value": "desc_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('nid,mid->nim', (meta_desc1, meta_desc2))",
                            "Call"
                        ],
                        [
                            "func.softmax(desc_weights, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "desc_sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc_sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('nid,mid->nim', (desc1, desc2)) * desc_weights",
                            "BinOp"
                        ],
                        [
                            "torch.sum(desc_sims, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_112": {
                "variable": {
                    "value": "ids1",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "desc_sims.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "desc1.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_115": {
                "variable": {
                    "value": "matches",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids1[mask], nn12[mask]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_84": {
                "variable": {
                    "value": "desc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_92": {
                "variable": {
                    "value": "meta_desc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_107": {
                "equation": {
                    "value": "nid,mid->nim",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(desc1, desc2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_110": {
                "input": {
                    "value": "desc_sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('nid,mid->nim', (desc1, desc2)) * desc_weights",
                            "BinOp"
                        ],
                        [
                            "torch.sum(desc_sims, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_111": {
                "input": {
                    "value": "desc_sims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.einsum('nid,mid->nim', (desc1, desc2)) * desc_weights",
                            "BinOp"
                        ],
                        [
                            "torch.sum(desc_sims, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_84": {
                "input": {
                    "value": "func.grid_sample(descriptors[k], grid_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_92": {
                "input": {
                    "value": "func.grid_sample(meta_descriptors[k], grid_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_84": {
                "input": {
                    "value": "descriptors[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_93": {
                "input": {
                    "value": "meta_descriptors[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints, img_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lisrd/utils/losses.py": {
        "torch": {
            "norm_17": {
                "variable": {
                    "value": "dist_mask0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kp0.unsqueeze(2) - kp0.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_18": {
                "variable": {
                    "value": "dist_mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kp1.unsqueeze(2) - kp1.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_19": {
                "variable": {
                    "value": "dist_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_mask0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(kp0.unsqueeze(2) - kp0.unsqueeze(1), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "max_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_34": {
                "input": {
                    "value": "desc_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_45": {
                "variable": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask.int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_68": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_68": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(desc_dists)",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_70": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(desc0, grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc0, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(desc0, grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc0, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(outputs['raw_' + v + '0'], grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_71": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_71": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(desc_dists)",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_73": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(desc1, grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc1, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(desc1, grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc1, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(outputs['raw_' + v + '1'], grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_90": {
                "variable": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask.int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_107": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_107": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(desc_dists)",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_109": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(desc0, grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc0, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(desc0, grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc0, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(outputs['raw_' + v + '0'], grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_110": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_110": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(desc_dists)",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_112": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(desc1, grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc1, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(desc1, grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc1, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(outputs['raw_' + v + '1'], grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_113": {
                "variable": {
                    "value": "valid_desc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints2, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_113": {
                "variable": {
                    "value": "valid_desc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "valid_desc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(desc_dists)",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_115": {
                "variable": {
                    "value": "valid_desc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_desc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(desc2, grid2).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_119": {
                "variable": {
                    "value": "neg_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 - 2 * (valid_desc0 @ valid_desc1.t())",
                            "BinOp"
                        ],
                        [
                            "2 - 2 * (valid_desc0 @ valid_desc1.t())",
                            "BinOp"
                        ],
                        [
                            "2 - 2 * (valid_desc0 @ valid_desc2.t())",
                            "BinOp"
                        ],
                        [
                            "get_lisrd_desc_dist(descs, meta_descs)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_123": {
                "variable": {
                    "value": "pos_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 - 2 * (valid_desc0 @ valid_desc1.t())",
                            "BinOp"
                        ],
                        [
                            "2 - 2 * (valid_desc0 @ valid_desc1.t())",
                            "BinOp"
                        ],
                        [
                            "2 - 2 * (valid_desc0 @ valid_desc2.t())",
                            "BinOp"
                        ],
                        [
                            "get_lisrd_desc_dist(descs, meta_descs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_134": {
                "variable": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask.int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_10": {
                "input": {
                    "value": "desc_dists",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_82": {
                "input": {
                    "value": "func.relu(config['margin'] + pos_dist - neg_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_125": {
                "input": {
                    "value": "func.relu(gap * config['margin'] + pos_dist - neg_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_159": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['raw_' + v + '0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_159": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(desc_dists)",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_162": {
                "variable": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_desc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(desc0, grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc0, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(desc0, grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc0, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(outputs['raw_' + v + '0'], grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_163": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['raw_' + v + '1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_163": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(desc_dists)",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_166": {
                "variable": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_desc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(desc1, grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc1, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(desc1, grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc1, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(outputs['raw_' + v + '1'], grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_desc1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_172": {
                "variable": {
                    "value": "valid_meta_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[v + '_meta_desc0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_172": {
                "variable": {
                    "value": "valid_meta_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_172": {
                "variable": {
                    "value": "valid_meta_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(desc_dists)",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_175": {
                "variable": {
                    "value": "valid_meta_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_meta_desc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(outputs[v + '_meta_desc0'], grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_meta_desc0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_176": {
                "variable": {
                    "value": "valid_meta_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[v + '_meta_desc1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ],
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_176": {
                "variable": {
                    "value": "valid_meta_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "valid_meta_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(desc_dists)",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_179": {
                "variable": {
                    "value": "valid_meta_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_meta_desc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(outputs[v + '_meta_desc1'], grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(valid_meta_desc1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_191": {
                "input": {
                    "value": "func.relu(config['margin'] + pos_dist - neg_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_82": {
                "input": {
                    "value": "config['margin'] + pos_dist - neg_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_125": {
                "input": {
                    "value": "gap * config['margin'] + pos_dist - neg_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_191": {
                "input": {
                    "value": "config['margin'] + pos_dist - neg_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_30": {
                "start": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(desc_dists)",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_31": {
                "start": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(desc_dists)",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ],
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_35": {
                "input": {
                    "value": "desc_dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/utils/metrics.py": {
        "torch": {
            "sum_14": {
                "variable": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask.int()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_53": {
                "variable": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descs[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_53": {
                "variable": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_55": {
                "variable": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(descs[0][0], grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(desc0, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(descs[i][0], grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(desc0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_56": {
                "variable": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descs[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_56": {
                "variable": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(descs[0][1], grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(desc1, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(descs[i][1], grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(desc1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "grid_sample_36": {
                "variable": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descs[i][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_36": {
                "variable": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_38": {
                "variable": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(descs[0][0], grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(desc0, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(descs[i][0], grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(desc0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_39": {
                "variable": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "descs[i][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_39": {
                "variable": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_41": {
                "variable": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(descs[0][1], grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(desc1, dim=1)",
                            "Call"
                        ],
                        [
                            "func.grid_sample(descs[i][1], grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(desc1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_44": {
                "variable": {
                    "value": "meta_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_descs[i][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints0, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_44": {
                "variable": {
                    "value": "meta_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "meta_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_46": {
                "variable": {
                    "value": "meta_desc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_desc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(meta_descs[i][0], grid0).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(meta_desc0, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_47": {
                "variable": {
                    "value": "meta_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_descs[i][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints_to_grid(keypoints1, img_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_47": {
                "variable": {
                    "value": "meta_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "meta_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n_correct_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(valid_mask.int()).item()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_49": {
                "variable": {
                    "value": "meta_desc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_desc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "func.grid_sample(meta_descs[i][1], grid1).permute(0, 2, 3, 1).reshape(n_correct_points, -1)",
                            "Call"
                        ],
                        [
                            "func.normalize(meta_desc1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_62": {
                "input": {
                    "value": "desc_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 - 2 * (desc0 @ desc1.t())",
                            "BinOp"
                        ],
                        [
                            "get_lisrd_desc_dist(descs_n, meta_descs_n)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_63": {
                "input": {
                    "value": "desc_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 - 2 * (desc0 @ desc1.t())",
                            "BinOp"
                        ],
                        [
                            "get_lisrd_desc_dist(descs_n, meta_descs_n)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_65": {
                "start": {
                    "value": "len(matches0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lisrd/utils/pytorch_utils.py": {
        "torch": {
            "tensor_11": {
                "data": {
                    "value": "img_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keypoints.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    }
}