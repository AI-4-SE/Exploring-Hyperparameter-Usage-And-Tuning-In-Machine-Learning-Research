{
    "cifar/dataset.py": {
        "torch": {
            "DataLoader_13": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=True, download=True, transform=transforms.Compose([transforms.Pad(4), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "show_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=True, download=True, transform=transforms.Compose([transforms.Pad(4), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "show_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root=data_root, train=True, download=True, transform=transforms.Compose([transforms.Pad(4), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/effnets2/mobilenetv1.py": {
        "torch": {
            "randn_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ],
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ],
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "relu_19": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(32 * alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(32 * alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(1024 * alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_47": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(32 * alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(32 * alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(1024 * alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_82": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_84": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/effnets2/mobilenetv2.py": {
        "torch": {
            "randn_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(32 * alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(32 * alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(320 * alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "last_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(1280 * alpha) if alpha > 1.0 else 1280",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "last_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(1280 * alpha) if alpha > 1.0 else 1280",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(1280 * alpha) if alpha > 1.0 else 1280",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_72": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_76": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x) if self.stride == 1 else out",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar/effnets2/mobilenetv2_abcv2.py": {
        "torch": {
            "randn_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/effnets2/mobilenetv2_dense.py": {
        "torch": {
            "randn_19": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/effnets2/mobilenetv2_lr.py": {
        "torch": {
            "randn_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/effnets2/mobilenetv2_super.py": {
        "torch": {
            "randn_119": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_112": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x) if self.stride == 1 else out",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ],
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ],
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ],
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(32 * alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(32 * alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "int(320 * alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "last_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(1280 * alpha) if alpha > 1.0 else 1280",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "last_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(1280 * alpha) if alpha > 1.0 else 1280",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(1280 * alpha) if alpha > 1.0 else 1280",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(32 * alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "last_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(1280 * alpha) if alpha > 1.0 else 1280",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(in_planes, out_planes, kernel_size=1, rank=ranks[self.rank_accu], stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Name"
                        ],
                        [
                            "out_planes",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ],
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ],
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ],
                        [
                            "int(out_planes * alpha)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar/effnets2/nasnet.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv', nn.Conv2d(3, num_stem_features, kernel_size=3, stride=2, bias=False)), ('bn', nn.BatchNorm2d(num_stem_features, eps=0.001, momentum=0.1, affine=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(4 * filters * scaling ** (-1))",
                            "Call"
                        ],
                        [
                            "6 * branch_out_channels",
                            "BinOp"
                        ],
                        [
                            "4 * branch_out_channels",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "F.relu(features, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=x.size(2)).view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "F.relu(features, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=x.size(2)).view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.5, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.aux_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.aux_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_49": {
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "x_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(4 * filters * scaling ** (-1))",
                            "Call"
                        ],
                        [
                            "6 * branch_out_channels",
                            "BinOp"
                        ],
                        [
                            "4 * branch_out_channels",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "((14 + 2) // 3, (14 + 2) // 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_stem_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "num_stem_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/effnets2/shufflenetv1.py": {
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.groups",
                            "Attribute"
                        ],
                        [
                            "1 if in_planes == 24 else groups",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 if i == 0 else 1",
                            "IfExp"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_planes / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i * alpha) for i in [240, 480, 960]]",
                            "ListComp"
                        ],
                        [
                            "[int(i * alpha) for i in [272, 544, 1088]]",
                            "ListComp"
                        ],
                        [
                            "[int(i * alpha) for i in [384, 768, 1536]]",
                            "ListComp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i * alpha) for i in [240, 480, 960]]",
                            "ListComp"
                        ],
                        [
                            "[int(i * alpha) for i in [272, 544, 1088]]",
                            "ListComp"
                        ],
                        [
                            "[int(i * alpha) for i in [384, 768, 1536]]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "first_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "first_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "24",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_109": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.shuffle1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat([out, res], 1)) if self.stride == 2 else F.relu(out + res)",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_51": {
                "input": {
                    "value": "out + res",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_43": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "[out, res]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/effnets2/shufflenetv2.py": {
        "torch": {
            "randn_168": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_52": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels // 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels // 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(in_channels * split_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels // 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels // 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels // 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels // 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "int(mid_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels // 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels // 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels // 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(out_channels // 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_87": {
                "variable": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(out2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, out2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_124": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_130": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x2)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "torch.cat([x1, out], 1)",
                            "Call"
                        ],
                        [
                            "self.shuffle(out)",
                            "Call"
                        ],
                        [
                            "torch.cat([out1, out2], 1)",
                            "Call"
                        ],
                        [
                            "self.shuffle(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/inference_model.py": {
        "torch": {
            "is_available_100": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_168": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_177": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_201": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_182": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_197": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar/inference_model_resnet101.py": {
        "torch": {
            "is_available_98": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_214": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_99": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_163": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_172": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_196": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_177": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_192": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar/inference_model_with_sparse_and_quant.py": {
        "torch": {
            "is_available_100": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_169": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_179": {
                "f": {
                    "value": "sparse_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'sparse_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_180": {
                "f": {
                    "value": "quant_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'quant_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_206": {
                "f": {
                    "value": "sparse_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'sparse_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_209": {
                "f": {
                    "value": "quant_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'quant_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_185": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_201": {
                "f": {
                    "value": "sparse_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'sparse_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_202": {
                "f": {
                    "value": "quant_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'quant_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar/other_attack_test.py": {
        "torch": {
            "norm_79": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_157": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_75": {
                "input": {
                    "value": "data_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adversary.perturb(data, target_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_76": {
                "input": {
                    "value": "data_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adversary.perturb(data, target_adv)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_77": {
                "input": {
                    "value": "torch.abs(data_adv - data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_77": {
                "input": {
                    "value": "data_adv - data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_80": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/prune_model.py": {
        "torch": {
            "is_available_101": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_221": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_102": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_104": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_169": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_178": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_202": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_183": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_198": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar/resnet/resnet.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_86": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_91": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_114": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/resnet/resnet_abcv2.py": {
        "torch": {
            "randn_54": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/resnet/resnet_dense.py": {
        "torch": {
            "randn_50": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/resnet/resnet_lr.py": {
        "torch": {
            "randn_53": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/resnet/resnet_super.py": {
        "torch": {
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_141": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_146": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_169": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvF(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvF(in_planes, self.expansion * planes, rank=ranks[2], kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvF(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvF(in_planes, self.expansion * planes, kernel_size=1, rank=ranks[self.rank_accumulator], stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/train_effnets.py": {
        "torch": {
            "is_available_97": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_188": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_180": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_181": {
                "variable": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelu, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_182": {
                "variable": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelz, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_169": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar/train_proj_admm_quant.py": {
        "torch": {
            "is_available_91": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_205": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_198": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_abc",
                            "Name"
                        ],
                        [
                            "CLabcv2(ranks_up)",
                            "Call"
                        ],
                        [
                            "CLlr(ranks_up)",
                            "Call"
                        ],
                        [
                            "model_base",
                            "Name"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(args.ngpu))",
                            "Call"
                        ],
                        [
                            "CLlr(ranks_up)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_199": {
                "variable": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelu, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_200": {
                "variable": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelz, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_152": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_161": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_166": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_184": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_189": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar/train_proj_admm_quant_resnet101.py": {
        "torch": {
            "is_available_94": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_208": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_201": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_abc",
                            "Name"
                        ],
                        [
                            "CLabcv2(ranks_up)",
                            "Call"
                        ],
                        [
                            "CLlr(ranks_up)",
                            "Call"
                        ],
                        [
                            "model_base",
                            "Name"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(args.ngpu))",
                            "Call"
                        ],
                        [
                            "CLlr(ranks_up)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_202": {
                "variable": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelu, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_203": {
                "variable": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelz, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_97": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_155": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_164": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_169": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_187": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_192": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar/util.py": {
        "torch": {
            "LogSoftmax_43": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, max=1 - label_smoothing, min=label_smoothing / 9.0)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "Name"
                        ]
                    ]
                },
                "max": {
                    "value": "1 - label_smoothing",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "label_smoothing / 9.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_330": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_368": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_387": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_411": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_433": {
                "variable": {
                    "value": "xadv[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "max_range[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "min": {
                    "value": "min_range[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "equal_448": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_482": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_510": {
                "variable": {
                    "value": "target_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, max=1 - label_smoothing, min=label_smoothing / 9.0)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "torch.sum(-target * logsoftmax(input), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "-target * logsoftmax(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_109": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_150": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_377": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_393": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_396": {
                "input": {
                    "value": "grad0.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_522": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_522": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "-target * logsoftmax(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_188": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_233": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_270": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_311": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_348": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_378": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_423": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_455": {
                "input": {
                    "value": "2.0 * torch.rand_like(x_adv) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_460": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_491": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_114": {
                "input": {
                    "value": "grad0.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_154": {
                "input": {
                    "value": "grad0.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_310": {
                "input": {
                    "value": "torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_344": {
                "input": {
                    "value": "torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_424": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_461": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_337": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_418": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_142": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_179": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_192": {
                "input": {
                    "value": "grad.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_224": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_237": {
                "input": {
                    "value": "grad.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_260": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_299": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_310": {
                "input": {
                    "value": "(x_adv - x.data).view(x_adv.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "ord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_344": {
                "input": {
                    "value": "(x_adv - x.data).view(x_adv.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "ord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_like_455": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_523": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/util_trts.py": {
        "torch": {
            "tensor_161": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fmod_40": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(pred, dim=1).data.max(1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fmod_153": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(pred, dim=1).data.max(1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_190": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_192": {
                "input": {
                    "value": "linfdist_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max((data - data_adv).view(data.size(0), data.size(1), -1).abs(), dim=-1)[0] * std",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_191": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), data.size(1), -1).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_40": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_153": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "tensors": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ],
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ],
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/util_unnormalize.py": {
        "torch": {
            "LogSoftmax_43": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, max=1 - label_smoothing, min=label_smoothing / 9.0)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "Name"
                        ]
                    ]
                },
                "max": {
                    "value": "1 - label_smoothing",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "label_smoothing / 9.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_330": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_368": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_387": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_411": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_433": {
                "variable": {
                    "value": "xadv[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "max_range[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "min": {
                    "value": "min_range[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "equal_448": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_482": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_510": {
                "variable": {
                    "value": "target_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, max=1 - label_smoothing, min=label_smoothing / 9.0)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "torch.sum(-target * logsoftmax(input), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "-target * logsoftmax(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_109": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_150": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_377": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_393": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_396": {
                "input": {
                    "value": "grad0.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_522": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_522": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "-target * logsoftmax(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_188": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_233": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_270": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_311": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_348": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_378": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_423": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_455": {
                "input": {
                    "value": "2.0 * torch.rand_like(x_adv) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_460": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_491": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_114": {
                "input": {
                    "value": "grad0.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_154": {
                "input": {
                    "value": "grad0.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_310": {
                "input": {
                    "value": "torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_344": {
                "input": {
                    "value": "torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_424": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_461": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_337": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_418": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_142": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_179": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_192": {
                "input": {
                    "value": "grad.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_224": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_237": {
                "input": {
                    "value": "grad.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_260": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_299": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_310": {
                "input": {
                    "value": "(x_adv - x.data).view(x_adv.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "ord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_344": {
                "input": {
                    "value": "(x_adv - x.data).view(x_adv.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "ord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_like_455": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_523": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/wrn/wideresnet.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_82": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_29": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_31": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/wrn/wideresnet_abcv2.py": {
        "torch": {
            "randn_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/wrn/wideresnet_dense.py": {
        "torch": {
            "randn_32": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/wrn/wideresnet_lr.py": {
        "torch": {
            "randn_36": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar/wrn/wideresnet_super.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_140": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_59": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_146": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/dataset.py": {
        "torch": {
            "DataLoader_13": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=True, download=True, transform=transforms.Compose([transforms.Pad(4), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_27": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "show_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root=data_root, train=True, download=True, transform=transforms.Compose([transforms.Pad(4), transforms.RandomCrop(32), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.201))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/inference_effnets.py": {
        "torch": {
            "is_available_102": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_195": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_105": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_179": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar100/inference_model.py": {
        "torch": {
            "is_available_97": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_164": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_173": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_201": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_178": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_194": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar100/resnet/resnet.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_86": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_91": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_114": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/resnet/resnet_abcv2.py": {
        "torch": {
            "randn_54": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/resnet/resnet_dense.py": {
        "torch": {
            "randn_50": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/resnet/resnet_lr.py": {
        "torch": {
            "randn_53": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/resnet/resnet_super.py": {
        "torch": {
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_141": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_146": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_169": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvF(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvF(in_planes, self.expansion * planes, rank=ranks[2], kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvF(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvF(in_planes, self.expansion * planes, kernel_size=1, rank=ranks[4], stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/train_effnets.py": {
        "torch": {
            "is_available_97": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_188": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_180": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_181": {
                "variable": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelu, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_182": {
                "variable": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelz, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_169": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar100/train_proj_admm_quant.py": {
        "torch": {
            "is_available_92": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_203": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_93": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_196": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_abc",
                            "Name"
                        ],
                        [
                            "CLabcv2(ranks_up)",
                            "Call"
                        ],
                        [
                            "CLlr(ranks_up)",
                            "Call"
                        ],
                        [
                            "model_base",
                            "Name"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(args.ngpu))",
                            "Call"
                        ],
                        [
                            "CLlr(ranks_up)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_197": {
                "variable": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelu, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_198": {
                "variable": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelz, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_155": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_164": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_169": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_182": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_187": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cifar100/util.py": {
        "torch": {
            "LogSoftmax_43": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, max=1 - label_smoothing, min=label_smoothing / 9.0)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "Name"
                        ]
                    ]
                },
                "max": {
                    "value": "1 - label_smoothing",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "label_smoothing / 9.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_330": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_368": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_387": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_411": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_433": {
                "variable": {
                    "value": "xadv[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "max_range[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "min": {
                    "value": "min_range[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "equal_448": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_482": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_510": {
                "variable": {
                    "value": "target_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, max=1 - label_smoothing, min=label_smoothing / 9.0)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "torch.sum(-target * logsoftmax(input), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "-target * logsoftmax(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_109": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_150": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_377": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_393": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_396": {
                "input": {
                    "value": "grad0.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_522": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_522": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "-target * logsoftmax(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_188": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_233": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_270": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_311": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_348": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_378": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_423": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_455": {
                "input": {
                    "value": "2.0 * torch.rand_like(x_adv) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_460": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_491": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_114": {
                "input": {
                    "value": "grad0.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_154": {
                "input": {
                    "value": "grad0.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_310": {
                "input": {
                    "value": "torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_344": {
                "input": {
                    "value": "torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_424": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_461": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_337": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_418": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_142": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_179": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_192": {
                "input": {
                    "value": "grad.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_224": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_237": {
                "input": {
                    "value": "grad.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_260": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_299": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_310": {
                "input": {
                    "value": "(x_adv - x.data).view(x_adv.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "ord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_344": {
                "input": {
                    "value": "(x_adv - x.data).view(x_adv.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "ord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_like_455": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_523": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cifar100/util_trts.py": {
        "torch": {
            "tensor_163": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.2023, 0.1994, 0.201]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fmod_46": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(pred, dim=1).data.max(1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fmod_157": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(pred, dim=1).data.max(1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_192": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_155": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_194": {
                "input": {
                    "value": "linfdist_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max((data - data_adv).view(data.size(0), data.size(1), -1).abs(), dim=-1)[0] * std",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_193": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), data.size(1), -1).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_46": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_157": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ],
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ],
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/caffelenet/caffelenet.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*feature_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(50 * 4 * 4, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_17": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "50 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/caffelenet/caffelenet_abcv2.py": {
        "torch": {
            "randn_23": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/caffelenet/caffelenet_dense.py": {
        "torch": {
            "randn_20": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/caffelenet/caffelenet_lr.py": {
        "torch": {
            "randn_22": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/caffelenet/caffelenet_quantforward.py": {
        "torch": {
            "randn_21": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/caffelenet/caffelenet_super.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*feature_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinF(50 * 4 * 4, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_80": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*feature_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinF(50 * 4 * 4, 500, init_bit=bit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*feature_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "LinF(50 * 4 * 4, 500, rank=ranks[self.offset])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_17": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_36": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_56": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/dataset.py": {
        "torch": {
            "DataLoader_13": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(root=data_root, train=True, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_21": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "show_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(root=data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor()]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/inference_model.py": {
        "torch": {
            "is_available_95": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_217": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_96": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_162": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_171": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_203": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_179": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_196": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist/train_proj_admm_quant.py": {
        "torch": {
            "is_available_91": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_202": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_195": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_abc",
                            "Name"
                        ],
                        [
                            "CLabcv2(ranks_up)",
                            "Call"
                        ],
                        [
                            "CLlr(ranks_up)",
                            "Call"
                        ],
                        [
                            "CLlr(ranks_up)",
                            "Call"
                        ],
                        [
                            "model_base",
                            "Name"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_196": {
                "variable": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelu, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_197": {
                "variable": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelz, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_154": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_163": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_168": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_181": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_186": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist/util.py": {
        "torch": {
            "LogSoftmax_43": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "rho",
                            "Name"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "rho",
                            "Name"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_224": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "rho",
                            "Name"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_256": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "rho",
                            "Name"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_291": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "rho",
                            "Name"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, max=1 - label_smoothing, min=label_smoothing / 9.0)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "Name"
                        ]
                    ]
                },
                "max": {
                    "value": "1 - label_smoothing",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "label_smoothing / 9.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_200": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_328": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_360": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_378": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_400": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_421": {
                "variable": {
                    "value": "xadv[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "max_range[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "min": {
                    "value": "min_range[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "equal_434": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_466": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_494": {
                "variable": {
                    "value": "target_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, max=1 - label_smoothing, min=label_smoothing / 9.0)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "torch.sum(-target * logsoftmax(input), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "-target * logsoftmax(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_108": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='mean')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_142": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='mean')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_368": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='mean')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_384": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='mean')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_387": {
                "input": {
                    "value": "grad0.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_506": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "-target * logsoftmax(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_176": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_211": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='mean')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_241": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_274": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_310": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_344": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='mean')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_369": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_411": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='mean')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_440": {
                "input": {
                    "value": "2.0 * torch.rand_like(x_adv) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_445": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='mean')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_475": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='mean')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_502": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_508": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_112": {
                "input": {
                    "value": "grad0.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_146": {
                "input": {
                    "value": "grad0.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_212": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_309": {
                "input": {
                    "value": "torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_341": {
                "input": {
                    "value": "torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_412": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_446": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_206": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_334": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_406": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_135": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_168": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_180": {
                "input": {
                    "value": "grad.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_233": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_245": {
                "input": {
                    "value": "grad.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_265": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_299": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_309": {
                "input": {
                    "value": "(x_adv - x.data).view(x_adv.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "ord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_341": {
                "input": {
                    "value": "(x_adv - x.data).view(x_adv.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "ord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_like_440": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_507": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mnist/util_trts.py": {
        "torch": {
            "fmod_40": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(pred, dim=1).data.max(1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fmod_151": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(pred, dim=1).data.max(1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_182": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_183": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_40": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_151": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "tensors": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ],
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ],
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "super_module/super_class.py": {
        "torch": {
            "sqrt_85": {
                "variable": {
                    "value": "uscale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((u * u).view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_86": {
                "variable": {
                    "value": "vscale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((v * v).view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_87": {
                "variable": {
                    "value": "wscale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((w * w).view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "res1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_311": {
                "variable": {
                    "value": "(_, z_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(res1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(res1.shape[0] * (1 - k))",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_354": {
                "variable": {
                    "value": "self.weightA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(rank, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_355": {
                "variable": {
                    "value": "self.weightB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_398": {
                "variable": {
                    "value": "self.weightA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(rank, in_channels, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_399": {
                "variable": {
                    "value": "self.weightB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, rank, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_454": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*feature_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_456": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linearlr(50 * 4 * 4, 500, rank=ranks[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_584": {
                "variable": {
                    "value": "self.weightA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(rank, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_585": {
                "variable": {
                    "value": "self.weightB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_586": {
                "variable": {
                    "value": "self.weightC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_632": {
                "variable": {
                    "value": "self.weightA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(rank, in_channels, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_633": {
                "variable": {
                    "value": "self.weightB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, rank, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_634": {
                "variable": {
                    "value": "self.weightC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_712": {
                "variable": {
                    "value": "self.weightA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(rank, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_713": {
                "variable": {
                    "value": "self.weightB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_features, rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_714": {
                "variable": {
                    "value": "self.weightC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_716": {
                "variable": {
                    "value": "self.eye",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(c, d)",
                            "Call"
                        ],
                        [
                            "min(c * m.kernel_size[0] * m.kernel_size[1], d)",
                            "Call"
                        ],
                        [
                            "nnz_idx.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_759": {
                "variable": {
                    "value": "self.weightA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(rank, in_channels, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_760": {
                "variable": {
                    "value": "self.weightB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels, rank, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_761": {
                "variable": {
                    "value": "self.weightC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels, in_channels, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_763": {
                "variable": {
                    "value": "self.eye",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(c, d)",
                            "Call"
                        ],
                        [
                            "min(c * m.kernel_size[0] * m.kernel_size[1], d)",
                            "Call"
                        ],
                        [
                            "nnz_idx.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "svd_183": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight - C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_195": {
                "variable": {
                    "value": "uscale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((u * u).view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_196": {
                "variable": {
                    "value": "vscale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((v * v).view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_225": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight - C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_227": {
                "variable": {
                    "value": "S_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_238": {
                "variable": {
                    "value": "uscale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((u * u).view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_239": {
                "variable": {
                    "value": "vscale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((v * v).view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_266": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "self.weightB.matmul(self.weightA)",
                            "Call"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weight_size)",
                            "Call"
                        ],
                        [
                            "self.weightB.matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "self.weightB.matmul(self.weightA + self.eye_const) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(self.weightB + self.eye_const).matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA + self.eye_const).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(weightB + self.eye_const).matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ]
                    ]
                }
            },
            "svd_301": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "self.weightB.matmul(self.weightA)",
                            "Call"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weight_size)",
                            "Call"
                        ],
                        [
                            "self.weightB.matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "self.weightB.matmul(self.weightA + self.eye_const) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(self.weightB + self.eye_const).matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA + self.eye_const).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(weightB + self.eye_const).matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_318": {
                "variable": {
                    "value": "nnz_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res1[offset:offset + numel]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_324": {
                "variable": {
                    "value": "S_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S[:rank]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_357": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_373": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "self.weightB.matmul(self.weightA)",
                            "Call"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weight_size)",
                            "Call"
                        ],
                        [
                            "self.weightB.matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "self.weightB.matmul(self.weightA + self.eye_const) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(self.weightB + self.eye_const).matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA + self.eye_const).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(weightB + self.eye_const).matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_402": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_439": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "self.weightB.matmul(self.weightA)",
                            "Call"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weight_size)",
                            "Call"
                        ],
                        [
                            "self.weightB.matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "self.weightB.matmul(self.weightA + self.eye_const) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(self.weightB + self.eye_const).matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA + self.eye_const).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(weightB + self.eye_const).matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_588": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_607": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "self.weightB.matmul(self.weightA)",
                            "Call"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weight_size)",
                            "Call"
                        ],
                        [
                            "self.weightB.matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "self.weightB.matmul(self.weightA + self.eye_const) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(self.weightB + self.eye_const).matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA + self.eye_const).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(weightB + self.eye_const).matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_636": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_679": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "self.weightB.matmul(self.weightA)",
                            "Call"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weight_size)",
                            "Call"
                        ],
                        [
                            "self.weightB.matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "self.weightB.matmul(self.weightA + self.eye_const) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(self.weightB + self.eye_const).matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA + self.eye_const).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(weightB + self.eye_const).matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_719": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_734": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "self.weightB.matmul(self.weightA)",
                            "Call"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weight_size)",
                            "Call"
                        ],
                        [
                            "self.weightB.matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "self.weightB.matmul(self.weightA + self.eye_const) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(self.weightB + self.eye_const).matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA + self.eye_const).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(weightB + self.eye_const).matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_766": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_799": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "self.weightB.matmul(self.weightA)",
                            "Call"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weight_size)",
                            "Call"
                        ],
                        [
                            "self.weightB.matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "self.weightB.matmul(self.weightA + self.eye_const) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(self.weightB + self.eye_const).matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA + self.eye_const).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(weightB + self.eye_const).matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_85": {
                "input": {
                    "value": "(u * u).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_86": {
                "input": {
                    "value": "(v * v).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_87": {
                "input": {
                    "value": "(w * w).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_89": {
                "input": {
                    "value": "uscale * vscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_90": {
                "input": {
                    "value": "vscale * uscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "svd_144": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "self.weightB.matmul(self.weightA)",
                            "Call"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weight_size)",
                            "Call"
                        ],
                        [
                            "self.weightB.matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "self.weightB.matmul(self.weightA + self.eye_const) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(self.weightB + self.eye_const).matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA + self.eye_const).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(weightB + self.eye_const).matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ]
                    ]
                }
            },
            "svd_147": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "m.weight.view(m.out_channels, m.in_channels * m.kernel_size[0] * m.kernel_size[1]).data",
                            "Attribute"
                        ],
                        [
                            "m.weight.data",
                            "Attribute"
                        ],
                        [
                            "self.weightB.matmul(self.weightA)",
                            "Call"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weight_size)",
                            "Call"
                        ],
                        [
                            "self.weightB.matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "self.weightB.matmul(self.weightA + self.eye_const) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(self.weightB + self.eye_const).matmul(self.weightA) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "weightB.matmul(weightA + self.eye_const).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ],
                        [
                            "(weightB + self.eye_const).matmul(weightA).view(self.weightC.size()) + self.weightC",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_150": {
                "variable": {
                    "value": "S_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_154": {
                "variable": {
                    "value": "S_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S[:ranks[i]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_186": {
                "variable": {
                    "value": "S_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_190": {
                "variable": {
                    "value": "S_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S[:ranks[i]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_232": {
                "variable": {
                    "value": "eye_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "ranks[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_234": {
                "variable": {
                    "value": "eye_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "ranks[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_269": {
                "variable": {
                    "value": "S_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_273": {
                "variable": {
                    "value": "S_sqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S[:ranks[i]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_311": {
                "input": {
                    "value": "res1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(res, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool2d_448": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_452": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_458": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_712": {
                "*size": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(c, d)",
                            "Call"
                        ],
                        [
                            "min(c * m.kernel_size[0] * m.kernel_size[1], d)",
                            "Call"
                        ],
                        [
                            "nnz_idx.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_713": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(c, d)",
                            "Call"
                        ],
                        [
                            "min(c * m.kernel_size[0] * m.kernel_size[1], d)",
                            "Call"
                        ],
                        [
                            "nnz_idx.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_714": {
                "*size": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_759": {
                "*size": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(c, d)",
                            "Call"
                        ],
                        [
                            "min(c * m.kernel_size[0] * m.kernel_size[1], d)",
                            "Call"
                        ],
                        [
                            "nnz_idx.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*kernel_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_760": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(c, d)",
                            "Call"
                        ],
                        [
                            "min(c * m.kernel_size[0] * m.kernel_size[1], d)",
                            "Call"
                        ],
                        [
                            "nnz_idx.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_761": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*kernel_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "norm_84": {
                "input": {
                    "value": "v.matmul(u) - w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_91": {
                "input": {
                    "value": "torch.mean((v * v).view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_92": {
                "input": {
                    "value": "v.matmul(u) - w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_96": {
                "input": {
                    "value": "v.matmul(u) * alpha * alpha - w * (1 - t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_98": {
                "input": {
                    "value": "torch.mean((u * u * alpha ** 4).view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_99": {
                "input": {
                    "value": "torch.mean((v * v * alpha ** 4).view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "input": {
                    "value": "torch.mean((w * w * t ** 2).view(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_195": {
                "input": {
                    "value": "(u * u).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_196": {
                "input": {
                    "value": "(v * v).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_197": {
                "input": {
                    "value": "uscale * vscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_198": {
                "input": {
                    "value": "vscale * uscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_238": {
                "input": {
                    "value": "(u * u).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_239": {
                "input": {
                    "value": "(v * v).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_240": {
                "input": {
                    "value": "uscale * vscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_241": {
                "input": {
                    "value": "vscale * uscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_91": {
                "input": {
                    "value": "(v * v).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_98": {
                "input": {
                    "value": "(u * u * alpha ** 4).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_99": {
                "input": {
                    "value": "(v * v * alpha ** 4).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_100": {
                "input": {
                    "value": "(w * w * t ** 2).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_161": {
                "input": {
                    "value": "restore_w - weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_202": {
                "input": {
                    "value": "restore_w - weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_250": {
                "input": {
                    "value": "restore_w - weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_279": {
                "input": {
                    "value": "restore_w - weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_330": {
                "input": {
                    "value": "restore_w - orig_weights[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_505": {
                "input": {
                    "value": "weightA",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "self.weightA.view(self.rank, -1)",
                            "Call"
                        ],
                        [
                            "self.weightA.view(self.rank, -1)",
                            "Call"
                        ],
                        [
                            "self.weightA.view(self.rank, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_507": {
                "input": {
                    "value": "weightB",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "weight",
                            "Name"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.weightB.view(self.out_channels, -1)",
                            "Call"
                        ],
                        [
                            "self.weightB.view(self.out_channels, -1)",
                            "Call"
                        ],
                        [
                            "self.weightB.view(self.out_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "svhn/dataset.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(root=data_root, split='train', download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(root=data_root, split='test', download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "show_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN(root=data_root, split='test', download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/inference_model.py": {
        "torch": {
            "is_available_98": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_220": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_99": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_165": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_174": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_202": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_179": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_195": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.prefix_name + descripter + args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "svhn/inference_model_with_sparse_and_quant.py": {
        "torch": {
            "is_available_100": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_169": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_179": {
                "f": {
                    "value": "sparse_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'sparse_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_180": {
                "f": {
                    "value": "quant_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'quant_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_206": {
                "f": {
                    "value": "sparse_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'sparse_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_209": {
                "f": {
                    "value": "quant_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'quant_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_185": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_201": {
                "f": {
                    "value": "sparse_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'sparse_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_202": {
                "f": {
                    "value": "quant_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, 'quant_' + descripter + args.model_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "svhn/train_proj_admm_quant.py": {
        "torch": {
            "is_available_92": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_203": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_93": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_196": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_abc",
                            "Name"
                        ],
                        [
                            "CLabcv2(depth=16, num_classes=10, widen_factor=8, dropRate=0.4, ranks=ranks_up)",
                            "Call"
                        ],
                        [
                            "CLlr(depth=16, num_classes=10, widen_factor=8, dropRate=0.4, ranks=ranks_up)",
                            "Call"
                        ],
                        [
                            "model_base",
                            "Name"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(args.ngpu))",
                            "Call"
                        ],
                        [
                            "CLlr(depth=16, num_classes=10, widen_factor=8, dropRate=0.4, ranks=ranks_up)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_197": {
                "variable": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelu, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_198": {
                "variable": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "modelz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(modelz, device_ids=range(args.ngpu))",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(args.ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_154": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_163": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_168": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_182": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_187": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.loaddir, args.model_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, args.defend_algo + '_densepretrain.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.loaddir, '_densepretrain.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "svhn/util.py": {
        "torch": {
            "LogSoftmax_43": {
                "variable": {
                    "value": "logsoftmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "eps_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "attack_eps(rho)",
                            "Call"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "Constant"
                        ],
                        [
                            "0.062",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, max=1 - label_smoothing, min=label_smoothing / 9.0)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "Name"
                        ]
                    ]
                },
                "max": {
                    "value": "1 - label_smoothing",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "label_smoothing / 9.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_330": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_368": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_387": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_411": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_433": {
                "variable": {
                    "value": "xadv[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "max_range[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "min": {
                    "value": "min_range[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "equal_448": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_482": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "preds_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_510": {
                "variable": {
                    "value": "target_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, max=1 - label_smoothing, min=label_smoothing / 9.0)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "torch.sum(-target * logsoftmax(input), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "-target * logsoftmax(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_109": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_150": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_377": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_393": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_396": {
                "input": {
                    "value": "grad0.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_522": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_522": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "-target * logsoftmax(input)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_188": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_233": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_270": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_311": {
                "outputs": {
                    "value": "loss_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * criterion(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_348": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_378": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_423": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sign_455": {
                "input": {
                    "value": "2.0 * torch.rand_like(x_adv) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_460": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_491": {
                "outputs": {
                    "value": "loss_adv0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "criterion(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "gamma * loss_fn(model(x_adv), y, reduction='sum') - 0.5 * torch.sum(torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2)",
                            "BinOp"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ],
                        [
                            "loss_fn(model(x_adv), y, reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_114": {
                "input": {
                    "value": "grad0.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sign_154": {
                "input": {
                    "value": "grad0.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_310": {
                "input": {
                    "value": "torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_344": {
                "input": {
                    "value": "torch.norm((x_adv - x.data).view(x_adv.size(0), -1), p=ord, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_424": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_461": {
                "input": {
                    "value": "grad0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_337": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_418": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_142": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_179": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_192": {
                "input": {
                    "value": "grad.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_224": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_237": {
                "input": {
                    "value": "grad.data[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_like_260": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_299": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_310": {
                "input": {
                    "value": "(x_adv - x.data).view(x_adv.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "ord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_344": {
                "input": {
                    "value": "(x_adv - x.data).view(x_adv.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "ord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_like_455": {
                "input": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x_adv + torch.sign(2.0 * torch.rand_like(x_adv) - 1.0) * eps",
                            "BinOp"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "clamp(x_adv, min_range, max_range)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_523": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/util_trts.py": {
        "torch": {
            "tensor_166": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.2471, 0.2435, 0.2616]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fmod_46": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(pred, dim=1).data.max(1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fmod_159": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(pred, dim=1).data.max(1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_193": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "F.softmax(op, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_195": {
                "input": {
                    "value": "linfdist_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max((data - data_adv).view(data.size(0), data.size(1), -1).abs(), dim=-1)[0] * std",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_194": {
                "input": {
                    "value": "(data - data_adv).view(data.size(0), data.size(1), -1).abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_46": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_159": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ],
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "tensors": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ],
                        [
                            "output.data.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.fmod(torch.cat(pred, dim=1).data.max(1)[1], 10)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/wrn/wideresnet.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_82": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_29": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_31": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/wrn/wideresnet_abcv2.py": {
        "torch": {
            "randn_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/wrn/wideresnet_dense.py": {
        "torch": {
            "randn_32": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/wrn/wideresnet_lr.py": {
        "torch": {
            "randn_36": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "svhn/wrn/wideresnet_super.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_140": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_59": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_146": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utee/kmeans.py": {
        "torch": {
            "argmin_28": {
                "variable": {
                    "value": "choice_cluster",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((X - centers) ** 2.0).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_60": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nonzero_97": {
                "variable": {
                    "value": "nnz_dix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xp.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "zero_el",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "initial_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X[idx0], zero_el]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_120": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "K + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_160": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nonzero_198": {
                "variable": {
                    "value": "nnz_dix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xp.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_218": {
                "variable": {
                    "value": "nnz_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xp.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(nnz_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "K - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_221": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_75": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xsum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_80": {
                "input": {
                    "value": "(centers - centers_old) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_135": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xsum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_140": {
                "input": {
                    "value": "(centers - centers_old) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_176": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xsum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_181": {
                "input": {
                    "value": "(centers - centers_old) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_236": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xsum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_242": {
                "input": {
                    "value": "(centers - centers_old) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_43": {
                "n": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_99": {
                "n": {
                    "value": "len(nnz_dix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_200": {
                "n": {
                    "value": "len(nnz_dix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_80": {
                "input": {
                    "value": "torch.sum((centers - centers_old) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_140": {
                "input": {
                    "value": "torch.sum((centers - centers_old) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_181": {
                "input": {
                    "value": "torch.sum((centers - centers_old) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_242": {
                "input": {
                    "value": "torch.sum((centers - centers_old) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utee/misc.py": {
        "torch": {
            "DataParallel_193": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "ModelWrapper(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(ngpu)).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "model_zoo.load_url(model_urls, model_root)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "expand_user(new_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_124": {
                "f": {
                    "value": "os.path.join(root, descripter + model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utee/pruning_tools.py": {
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "param_flats_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "param_flats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[p.data.view(-1) for p in weight_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "knapsack_weight_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones_like(p) * weight_bits[i] for (i, p) in enumerate(param_flats)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_53": {
                "variable": {
                    "value": "(_, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([p.abs() for p in param_flats], dim=0) * knapsack_weight_all",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_54": {
                "variable": {
                    "value": "cumsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "knapsack_weight_all[sorted_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_55": {
                "variable": {
                    "value": "res_nnz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumsum <= model_size",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_55": {
                "variable": {
                    "value": "res_nnz",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_68": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xnnz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Xnnz.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "X.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "n_clusters",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_111": {
                "variable": {
                    "value": "(km_dist, km_code)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(input.view(-1, 1) - val_dict) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_147": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "profit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "profit - (profit.min() - 1e-06)",
                            "BinOp"
                        ],
                        [
                            "profit[raw_sorted_idx].clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(R_score)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_220": {
                "variable": {
                    "value": "raw_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "profit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "profit - (profit.min() - 1e-06)",
                            "BinOp"
                        ],
                        [
                            "profit[raw_sorted_idx].clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "variable": {
                    "value": "nbits_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "nbits_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8]",
                            "List"
                        ],
                        [
                            "torch.tensor(nbits_dict, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8]",
                            "List"
                        ],
                        [
                            "torch.tensor(nbits_dict, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "mckp_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mckp_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mckp_p, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mckp_p, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "mckp_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mckp_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mckp_w, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mckp_w, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_275": {
                "variable": {
                    "value": "nbits_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "nbits_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8]",
                            "List"
                        ],
                        [
                            "torch.tensor(nbits_dict, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[1, 2, 3, 4, 5, 6, 7, 8]",
                            "List"
                        ],
                        [
                            "torch.tensor(nbits_dict, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_301": {
                "variable": {
                    "value": "mckp_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mckp_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mckp_p, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mckp_p, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "mckp_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mckp_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mckp_w, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mckp_w, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "val_dict[km_code].view(input.shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(R_score), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "'########### layer stat ###########\\n'",
                            "Constant"
                        ],
                        [
                            "res + ('{:>20}'.format(layer_name) + 'abs(W): min={:.4e}, mean={:.4e}, max={:.4e}, nnz={:.4f}\\n'.format(W_data_abs.min().item(), W_data_abs.mean().item(), W_data_abs.max().item(), nnz))",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_492": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "val_dict[km_code].view(input.shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(R_score), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "'########### layer stat ###########\\n'",
                            "Constant"
                        ],
                        [
                            "res + ('{:>20}'.format(layer_name) + 'abs(W): min={:.4e}, mean={:.4e}, max={:.4e}, nnz={:.4f}\\n'.format(W_data_abs.min().item(), W_data_abs.mean().item(), W_data_abs.max().item(), nnz))",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((profit[cur_idx] - profit[stack[-1][0]]) / (weight[cur_idx] - weight[stack[-1][0]])).item()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(score, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "val_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X[indices].clone().view(-1), torch.zeros(n_clusters - idx.shape[0]).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "val_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X[idx0].clone().view(-1), torch.zeros(1).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_83": {
                "variable": {
                    "value": "(km_dist, km_code)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(X.view(-1, 1) - val_dict) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_94": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Xsum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "one_hot.sum(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_134": {
                "variable": {
                    "value": "raw_sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "profit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "profit - (profit.min() - 1e-06)",
                            "BinOp"
                        ],
                        [
                            "profit[raw_sorted_idx].clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_223": {
                "variable": {
                    "value": "raw_raw_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(profit, dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_470": {
                "variable": {
                    "value": "(_, z_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(res)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(res.shape[0] - nnz)",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "topk_503": {
                "variable": {
                    "value": "(_, z_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((profit[cur_idx] - profit[stack[-1][0]]) / (weight[cur_idx] - weight[stack[-1][0]])).item()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(score, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "int(res.shape[0] - nnz)",
                    "type": "Call",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_535": {
                "variable": {
                    "value": "self.xi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.LongTensor(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_537": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.LongTensor(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_539": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.LongTensor(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_565": {
                "variable": {
                    "value": "self.hw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.LongTensor(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_582": {
                "variable": {
                    "value": "self.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, h_in, w_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_621": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*feature_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_623": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(16 * 5 * 5, 120)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "[p.abs() for p in param_flats]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_337": {
                "variable": {
                    "value": "W_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_409": {
                "variable": {
                    "value": "W_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W.view(rank, -1).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_409": {
                "variable": {
                    "value": "W_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_422": {
                "variable": {
                    "value": "W_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W.view(outputs, -1).sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_422": {
                "variable": {
                    "value": "W_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_440": {
                "variable": {
                    "value": "W_nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_74": {
                "n": {
                    "value": "idx.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argsort_137": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight[offset[i]:offset[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argsort_140": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight[offset[i]:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_470": {
                "input": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "val_dict[km_code].view(input.shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(R_score), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "'########### layer stat ###########\\n'",
                            "Constant"
                        ],
                        [
                            "res + ('{:>20}'.format(layer_name) + 'abs(W): min={:.4e}, mean={:.4e}, max={:.4e}, nnz={:.4f}\\n'.format(W_data_abs.min().item(), W_data_abs.mean().item(), W_data_abs.max().item(), nnz))",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_606": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_608": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_615": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_617": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_624": {
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_625": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_626": {
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_627": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_628": {
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_50": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_list",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "n_clusters - idx.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_249": {
                "data": {
                    "value": "dist4nbits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "data": {
                    "value": "dist4nbits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numel_342": {
                "input": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "numel_361": {
                "input": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "numel_380": {
                "input": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "numel_417": {
                "input": {
                    "value": "W.data.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "numel_430": {
                "input": {
                    "value": "W.data.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utee/quantize.py": {
        "torch": {
            "nonzero_112": {
                "variable": {
                    "value": "nnz_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Wp.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_64": {
                "input": {
                    "value": "Wp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dict[param_name]",
                            "Subscript"
                        ],
                        [
                            "sparse_dict[param_name]",
                            "Subscript"
                        ],
                        [
                            "sparse_dict[param_name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nonzero_86": {
                "input": {
                    "value": "Wp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dict[param_name]",
                            "Subscript"
                        ],
                        [
                            "sparse_dict[param_name]",
                            "Subscript"
                        ],
                        [
                            "sparse_dict[param_name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nonzero_108": {
                "input": {
                    "value": "Wp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sparse_dict[param_name]",
                            "Subscript"
                        ],
                        [
                            "sparse_dict[param_name]",
                            "Subscript"
                        ],
                        [
                            "sparse_dict[param_name]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}