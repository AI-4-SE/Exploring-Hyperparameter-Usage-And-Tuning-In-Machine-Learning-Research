{
    "builder.py": {
        "sklearn": {
            "f1_score_199": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold_s.cpu().data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output_s.cpu().data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "binary",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_201": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gold_s.cpu().data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output_s.cpu().data.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_29": {
                "variable": {
                    "value": "we",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pre + 'we.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_46": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adagrad_48": {
                "variable": {
                    "value": "self.e_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "para_filter(self.encoder)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.conf.l2_penalty",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_49": {
                "variable": {
                    "value": "self.c_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "para_filter(self.classifier)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.conf.l2_penalty",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "output_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_197": {
                "variable": {
                    "value": "gold_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gold_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_33": {
                "variable": {
                    "value": "char_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pre + 'char_table.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "sub_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pre + 'sub_table.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adagrad_51": {
                "variable": {
                    "value": "self.con_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "para_filter(self.conn_classifier)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.conf.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.conf.l2_penalty",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./weights/' + filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_93": {
                "variable": {
                    "value": "(_, output_sense)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(repr)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.encoder(a1, a2))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_182": {
                "variable": {
                    "value": "(_, output_sense)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.classifier(repr)",
                            "Call"
                        ],
                        [
                            "self.classifier(self.encoder(a1, a2))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_72": {
                "f": {
                    "value": "'./weights/' + filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_96": {
                "input": {
                    "value": "tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(output_sense == sense).long()",
                            "Call"
                        ],
                        [
                            "(output_sense == gold_sense).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_188": {
                "input": {
                    "value": "tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(output_sense == sense).long()",
                            "Call"
                        ],
                        [
                            "(output_sense == gold_sense).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "config.py": {
        "torch": {}
    },
    "data.py": {
        "torch": {
            "load_7": {
                "variable": {
                    "value": "(self.d1, self.d2, self.d3, self.d4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "data_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_34": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset(pre + 'train.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "self.dev_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset(pre + 'dev.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_36": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset(pre + 'test.pkl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/process.py": {
        "torch": {
            "load_335": {
                "variable": {
                    "value": "we",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pre + 'we.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_336": {
                "variable": {
                    "value": "(lookup_table, len_table)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "pre + 'char_table.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_337": {
                "variable": {
                    "value": "(sub_lookup, sub_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "pre + 'sub_table.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_338": {
                "variable": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pre + 'train.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_339": {
                "variable": {
                    "value": "dev_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pre + 'dev.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_340": {
                "variable": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pre + 'test.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "self.we",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "we",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(pre + 'we.pkl')",
                            "Call"
                        ],
                        [
                            "np.zeros((self.v_size, conf.wordvec_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "lookup_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lookup_table",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.v_size, 50))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lookup_table)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.v_size, 12))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lookup_table)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "len_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "len_table",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.v_size, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(len_table)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.v_size, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(len_table)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_240": {
                "variable": {
                    "value": "lookup_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lookup_table",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.v_size, 50))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lookup_table)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.v_size, 12))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lookup_table)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "len_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "len_table",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.v_size, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(len_table)",
                            "Call"
                        ],
                        [
                            "np.zeros((self.v_size, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(len_table)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_323": {
                "obj": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(pre + 'train.pkl')",
                            "Call"
                        ],
                        [
                            "[self._text2i(self.arg1_train_r), self._text2i(self.arg2_train_r), self._sense2i(self.sense_train_r), self._conn2i(self.conn_train_r)]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "pre + 'train.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_324": {
                "obj": {
                    "value": "dev_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(pre + 'dev.pkl')",
                            "Call"
                        ],
                        [
                            "[self._text2i(self.arg1_dev_r), self._text2i(self.arg2_dev_r), self._sense2i(self.sense1_dev_r), self._sense2i(self.sense2_dev_r)]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "pre + 'dev.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_325": {
                "obj": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(pre + 'test.pkl')",
                            "Call"
                        ],
                        [
                            "[self._text2i(self.arg1_test_r), self._text2i(self.arg2_test_r), self._sense2i(self.sense1_test_r), self._sense2i(self.sense2_test_r)]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "pre + 'test.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_163": {
                "obj": {
                    "value": "self.we",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "./processed/lin/we.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "[lookup_table, len_table]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "./processed/lin/char_table.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_243": {
                "obj": {
                    "value": "[lookup_table, len_table]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "./processed/lin/sub_table.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "self.we",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "./processed/ji/we.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "[lookup_table, len_table]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "./processed/ji/char_table.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_245": {
                "obj": {
                    "value": "[lookup_table, len_table]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "./processed/ji/sub_table.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "self.we",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "./processed/l/we.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "[lookup_table, len_table]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "./processed/l/char_table.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "[lookup_table, len_table]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "./processed/l/sub_table.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "is_available_12": {
                "variable": {
                    "value": "havecuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_13": {
                "seed": {
                    "value": "conf.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_15": {
                "seed": {
                    "value": "conf.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "load_275": {
                "variable": {
                    "value": "we",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/processed/ji/we.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_18": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conf.cnn_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conf.cnn_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.conf.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_21": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_26": {
                "variable": {
                    "value": "vr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(self.softmax(attn))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_27": {
                "variable": {
                    "value": "qr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dropout(self.softmax(attn.transpose(1, 2)))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.highway_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.size()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.gate_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.size()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.nonlinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_42": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate_linear(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_50": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "in_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.conf.cnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_52": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.conf.cnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_58": {
                "variable": {
                    "value": "(lens, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_62": {
                "variable": {
                    "value": "(_, _indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_65": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, self.conf.max_sent_len - maxlen)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_74": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "k // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.conf.cnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_87": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dropout(input.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "tmp[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "tmp",
                            "Name"
                        ],
                        [
                            "output.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "a * nn.functional.sigmoid(b)",
                            "BinOp"
                        ],
                        [
                            "output + input",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.nonlinear(self.dropout(self.fc[i](output)))",
                            "Call"
                        ],
                        [
                            "self.lastfc(self.dropout(output))",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_98": {
                "variable": {
                    "value": "self.char_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.conf.char_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.conf.char_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.conf.char_padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_99": {
                "variable": {
                    "value": "self.lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "lookup.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "lookup.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_109": {
                "variable": {
                    "value": "self.nonlinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_110": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "lookup.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.conf.char_hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "conv_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_141": {
                "variable": {
                    "value": "self.lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "lookup.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "lookup.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.5, 0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_152": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conf.elmo_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_171": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "we_tensor.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "we_tensor.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.conf.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_182": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_183": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_234": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.conf.clf_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_235": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.lastfc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "lastfcdim",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.conf.pair_rep_dim",
                            "Attribute"
                        ],
                        [
                            "self.conf.clf_fc_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_244": {
                "variable": {
                    "value": "self.nonlinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_279": {
                "variable": {
                    "value": "char_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/processed/ji/char_table.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_281": {
                "variable": {
                    "value": "sub_table",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/processed/ji/sub_table.pkl",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "arg1repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(arg1repr, char1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "arg2repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(arg2repr, char2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "arg1repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(arg1repr, self.elmo(a1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "arg2repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(arg2repr, self.elmo(a2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_25": {
                "input": {
                    "value": "q_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.w(q.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_28": {
                "input": {
                    "value": "vr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(self.dropout(self.softmax(attn)), v)",
                            "Call"
                        ],
                        [
                            "torch.topk(vr, k=self.conf.attn_topk, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "vr.view(vr.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.conf.attn_topk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_30": {
                "input": {
                    "value": "qr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(self.dropout(self.softmax(attn.transpose(1, 2))), q)",
                            "Call"
                        ],
                        [
                            "torch.topk(qr, k=self.conf.attn_topk, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "qr.view(qr.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.conf.attn_topk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_228": {
                "tensors": {
                    "value": "outputs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "unpack(outputs, batch_first=True)[0]",
                            "Subscript"
                        ],
                        [
                            "outputs[_indices]",
                            "Subscript"
                        ],
                        [
                            "F.pad(outputs.unsqueeze(0), (0, 0, 0, self.conf.max_sent_len - maxlen)).view(size[0], -1, size[2])",
                            "Call"
                        ],
                        [
                            "self.conv(self.dropout(outputs.transpose(1, 2))).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_104": {
                "in_channels": {
                    "value": "self.conf.char_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conf.char_enc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.conf.char_filter_dim[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.conf.char_filter_dim[i] // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_127": {
                "input": {
                    "value": "tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "self.nonlinear(self.convs[i](charseq))",
                            "Call"
                        ],
                        [
                            "tmp[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.topk(tmp, k=1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "input": {
                    "value": "tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv(output)",
                            "Call"
                        ],
                        [
                            "self.nonlinear(self.convs[i](charseq))",
                            "Call"
                        ],
                        [
                            "tmp[:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.topk(tmp, k=1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "outputs",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "unpack(outputs, batch_first=True)[0]",
                            "Subscript"
                        ],
                        [
                            "outputs[_indices]",
                            "Subscript"
                        ],
                        [
                            "F.pad(outputs.unsqueeze(0), (0, 0, 0, self.conf.max_sent_len - maxlen)).view(size[0], -1, size[2])",
                            "Call"
                        ],
                        [
                            "self.conv(self.dropout(outputs.transpose(1, 2))).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_237": {
                "in_features": {
                    "value": "self.conf.pair_rep_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.conf.clf_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "in_features": {
                    "value": "self.conf.clf_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.conf.clf_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_195": {
                "input": {
                    "value": "a1[i, :].data.nonzero()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_196": {
                "input": {
                    "value": "a2[i, :].data.nonzero()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}