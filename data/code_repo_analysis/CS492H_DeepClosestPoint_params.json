{
    "data.py": {
        "torch": {
            "device_51": {
                "variable": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.point_clouds[idx][np.arange(2048)[:self.num_samples]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_71": {
                "n": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Conv1d_22": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_24": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_25": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_26": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_28": {
                "variable": {
                    "value": "self.n1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_29": {
                "variable": {
                    "value": "self.n2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.n3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "variable": {
                    "value": "self.n4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.n5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.n1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.n2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.n3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.n4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.n5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ],
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n1(self.conv1(KNN(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n2(self.conv2(KNN(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n3(self.conv3(KNN(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n4(self.conv4(KNN(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.n5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.WQ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(d_model, d_k, bias=False) for i in range(h)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.WK",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(d_model, d_k, bias=False) for i in range(h)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.WV",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(d_model, d_v, bias=False) for i in range(h)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.WO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Attention(d_k) for i in range(h)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.head[i](self.WQ[i](Q), self.WK[i](K), self.WV[i](V)) for i in range(self.h)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_146": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_156": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[d_model]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LayerNorm_174": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[d_model]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LayerNorm_194": {
                "variable": {
                    "value": "self.layernorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[d_model]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_232": {
                "variable": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_232": {
                "variable": {
                    "value": "self.M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_245": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(ftarget.transpose(1, 2), fsource)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_246": {
                "variable": {
                    "value": "predicted_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(torch.matmul(ftarget.transpose(1, 2), fsource), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_249": {
                "variable": {
                    "value": "source_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_250": {
                "variable": {
                    "value": "target_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(target, weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_255": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_residue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source - source_mean",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "target_residue.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_257": {
                "variable": {
                    "value": "(UT, Sigma, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(source_residue, target_residue.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "det_263": {
                "variable": {
                    "value": "M_[:, 2, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(V, UT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_266": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.svd(S)",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "M_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.M.expand(B, -1, -1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_278": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_279": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_285": {
                "variable": {
                    "value": "self.rotation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mlp_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_286": {
                "variable": {
                    "value": "self.translation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mlp_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fsource, ftarget]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "input": {
                    "value": "torch.softmax(x, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.svd(S)",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_298": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn[i](self.fc[i](x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(inter, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x))).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(1, 2)) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([self.head[i](self.WQ[i](Q), self.WK[i](K), self.WV[i](V)) for i in range(self.h)], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x).transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.fc2(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(lambda x: self.co_attention(x, y, y), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer3(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([fsource, ftarget], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 2 * self.embed_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn[i](self.fc[i](x)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_84": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(inter, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x))).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(1, 2)) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([self.head[i](self.WQ[i](Q), self.WK[i](K), self.WV[i](V)) for i in range(self.h)], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x).transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.fc2(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(lambda x: self.co_attention(x, y, y), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer3(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([fsource, ftarget], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 2 * self.embed_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn[i](self.fc[i](x)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_88": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(inter, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x))).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(1, 2)) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([self.head[i](self.WQ[i](Q), self.WK[i](K), self.WV[i](V)) for i in range(self.h)], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x).transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.fc2(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(lambda x: self.co_attention(x, y, y), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer3(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([fsource, ftarget], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 2 * self.embed_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn[i](self.fc[i](x)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_92": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(inter, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x))).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(1, 2)) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([self.head[i](self.WQ[i](Q), self.WK[i](K), self.WV[i](V)) for i in range(self.h)], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x).transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.fc2(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(lambda x: self.co_attention(x, y, y), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer3(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([fsource, ftarget], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 2 * self.embed_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn[i](self.fc[i](x)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q",
                            "Method Argument"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "K.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(inter, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x))).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(1, 2)) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([self.head[i](self.WQ[i](Q), self.WK[i](K), self.WV[i](V)) for i in range(self.h)], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x).transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.fc2(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(lambda x: self.co_attention(x, y, y), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer3(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([fsource, ftarget], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 2 * self.embed_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn[i](self.fc[i](x)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_245": {
                "input": {
                    "value": "ftarget.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "fsource",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fsource",
                            "Method Argument"
                        ],
                        [
                            "fsource",
                            "Method Argument"
                        ],
                        [
                            "fsource",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_263": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.svd(S)",
                            "Call"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "UT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.svd(S)",
                            "Call"
                        ],
                        [
                            "UT.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_294": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n1(self.conv1(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n2(self.conv2(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n3(self.conv3(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "F.relu(self.n4(self.conv4(KNN(x))))",
                            "Call"
                        ],
                        [
                            "torch.max(x, -1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(inter, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.n5(self.conv5(x))).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K.transpose(1, 2)) / np.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([self.head[i](self.WQ[i](Q), self.WK[i](K), self.WV[i](V)) for i in range(self.h)], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x).transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.fc2(x.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "self.sublayer1(lambda x: self.self_attention(x, x, x), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer2(lambda x: self.co_attention(x, y, y), x)",
                            "Call"
                        ],
                        [
                            "self.sublayer3(self.ffn, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([fsource, ftarget], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.view(-1, 2 * self.embed_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn[i](self.fc[i](x)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_302": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rotation(x)",
                            "Call"
                        ],
                        [
                            "rot / torch.linalg.norm(rot, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "transforms.quaternion_to_matrix(rot)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model // h",
                            "BinOp"
                        ],
                        [
                            "d_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model // h",
                            "BinOp"
                        ],
                        [
                            "d_k",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model // h",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_282": {
                "in_features": {
                    "value": "self.mlp_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mlp_dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_283": {
                "num_features": {
                    "value": "self.mlp_dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_267": {
                "input": {
                    "value": "Rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(V, M_), UT)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "source_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(source, dim=2, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "device_16": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40(path=args.in_data_dir, task='train', num_samples=num_points, generalize=args.generalize, robustness=args.robustness)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "args.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(args.n_workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40(path=args.in_data_dir, task='test', num_samples=num_points, generalize=args.generalize, robustness=args.robustness)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "args.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(args.n_workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_86": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_86": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_331": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + list(net[key].parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MultiStepLR_335": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, lr=args.learning_rate, betas=(args.beta1, args.beta2), weight_decay=0.0001)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_292": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_293": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            },
            "is_available_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_323": {
                "variable": {
                    "value": "checkpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_344": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.out_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_88": {
                "input": {
                    "value": "gt_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_tr.to(device)",
                            "Call"
                        ],
                        [
                            "gt_tr.to(device)",
                            "Call"
                        ],
                        [
                            "gt_tr",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "pred_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net['backend'].train()(source, target, fsource, ftarget)",
                            "Call"
                        ],
                        [
                            "net['backend'].eval()(source, target, fsource, ftarget)",
                            "Call"
                        ],
                        [
                            "pred_tr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_88": {
                "input": {
                    "value": "gt_rot.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pred_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net['backend'].train()(source, target, fsource, ftarget)",
                            "Call"
                        ],
                        [
                            "net['backend'].eval()(source, target, fsource, ftarget)",
                            "Call"
                        ],
                        [
                            "pred_rot",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_356": {
                "obj": {
                    "value": "{key: net[key].state_dict() for key in net.keys()}",
                    "type": "DictComp",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.out_dir, 'origin_dcp_model_{:d}.pth'.format(epoch + 1))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.out_dir, 'best_dcp_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_364": {
                "obj": {
                    "value": "{key: net[key].state_dict() for key in net.keys()}",
                    "type": "DictComp",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.out_dir, 'origin_dcp_model_{:d}.pth'.format(epoch + 1))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.out_dir, 'best_dcp_model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "device_5": {
                "variable": {
                    "value": "default_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cdist_18": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "nns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "nns.unsqueeze(2).expand(-1, -1, k, -1)",
                            "Call"
                        ],
                        [
                            "torch.gather(nns, 1, idx)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "nns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "nns.unsqueeze(2).expand(-1, -1, k, -1)",
                            "Call"
                        ],
                        [
                            "torch.gather(nns, 1, idx)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "compute_mode": {
                    "value": "use_mm_for_euclid_dist",
                    "type": "str",
                    "possible_values": []
                }
            },
            "topk_19": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cdist(nns, nns, p=2.0, compute_mode='use_mm_for_euclid_dist')",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_23": {
                "variable": {
                    "value": "nns",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "nns.unsqueeze(2).expand(-1, -1, k, -1)",
                            "Call"
                        ],
                        [
                            "torch.gather(nns, 1, idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(input=d, k=k, dim=-1, largest=False)",
                            "Call"
                        ],
                        [
                            "idx.unsqueeze(-1).expand(-1, -1, -1, F)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "[nns.permute(0, 3, 1, 2), inp.unsqueeze(-1).repeat(1, 1, 1, k)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_32": {
                "input": {
                    "value": "torch.normal(0.0, std, size=(num_pt, 3), device=dev)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-thr",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "thr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_32": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_pt, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_dev",
                            "Method Argument"
                        ],
                        [
                            "default_dev",
                            "Method Argument"
                        ],
                        [
                            "default_dev",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_39": {
                "size": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_dev",
                            "Method Argument"
                        ],
                        [
                            "default_dev",
                            "Method Argument"
                        ],
                        [
                            "default_dev",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_47": {
                "size": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_dev",
                            "Method Argument"
                        ],
                        [
                            "default_dev",
                            "Method Argument"
                        ],
                        [
                            "default_dev",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}