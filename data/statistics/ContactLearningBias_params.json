{
    "contactlearning/RNNPredictor.py": {
        "sklearn": {},
        "torch": {
            "Linear_60": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.hidden_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.hidden_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(hidden_output.squeeze(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_units[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.fc1(hidden_output.squeeze(0)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 0)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RNN_47": {
                "variable": {
                    "value": "self.recurrent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_50": {
                "variable": {
                    "value": "self.recurrent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_53": {
                "variable": {
                    "value": "self.recurrent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_size",
                            "Attribute"
                        ],
                        [
                            "self.hidden_units[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_units[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_56": {
                "variable": {
                    "value": "self.recurrent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "contactlearning/eval_utils.py": {
        "sklearn": {},
        "torch": {
            "from_numpy_184": {
                "variable": {
                    "value": "input_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.expand_dims(state_sequence, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "variable": {
                    "value": "state_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(state_labels).float()",
                            "Call"
                        ],
                        [
                            "test_data_[tw:, :] - test_data_[tw - 1:-1, :]",
                            "BinOp"
                        ],
                        [
                            "test_data_[-1:]",
                            "Subscript"
                        ],
                        [
                            "test_data_[tw:]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "state_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_301": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_302": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "trained_model_path + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(trained_model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "gt_trajectory",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_trajectory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gt_trajectory).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_354": {
                "variable": {
                    "value": "rollout_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "rollout_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CubeTossDataset(X_roll, y_roll)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_180": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_224": {
                "variable": {
                    "value": "input_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate((input_sequence[1:,], np.expand_dims(full_pred_state, axis=1)), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_236": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_181": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_237": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "contactlearning/learning_utils.py": {
        "sklearn": {
            "train_test_split_36": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X.transpose((1, 0, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_37": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "2 / 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_39": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X.transpose((1, 0, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_79": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_162": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "std_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.std(X, (0, 1))",
                            "Call"
                        ],
                        [
                            "np.array([1])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_147": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "TRAIN_SAVE_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models_path + 'train_states/' + model_name + '-train.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "{'model_state_dict': model.state_dict(), 'epoch': epoch, 'mean_': scale_mean, 'std_': scale_std, 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "SAVE_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models_path + model_name + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "contactlearning/train.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_157": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CubeTossDataset(X_train.transpose((1, 0, 2)), y_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_160": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CubeTossDataset(X_val.transpose((1, 0, 2)), y_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_163": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CubeTossDataset(X_test.transpose((1, 0, 2)), y_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_165": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_192": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_193": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.lr",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if WEIGHT_DECAY is None else WEIGHT_DECAY",
                            "IfExp"
                        ]
                    ]
                }
            },
            "SummaryWriter_200": {
                "variable": {
                    "value": "logger",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(ROOT_LOG_DIR, TENSORBOARD_DIR)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_204": {
                "f": {
                    "value": "os.path.join(MODELS_PATH + '/train_states', MODEL_NAME + '-train') + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}