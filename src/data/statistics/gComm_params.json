{
    "baseline_models.py": {
        "torch": {
            "RNNCell_31": {
                "variable": {
                    "value": "self.rnn_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.init_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.hidden_size, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(message)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.project_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_msgs * message_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "17",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_113": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_image",
                            "Name"
                        ],
                        [
                            "self.target_encoder(speaker_out, grid_image)",
                            "Call"
                        ],
                        [
                            "grid_image.contiguous().permute(2, 0, 1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gru_projected.view(-1, 17, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "new_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_image, attention]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_120": {
                "variable": {
                    "value": "new_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.action_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_dim, self.hidden_dim1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_58": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "logits.view(batch_size, self.output_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_79": {
                "input": {
                    "value": "(probs * predict).sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_191": {
                "in_features": {
                    "value": "self.hidden_dim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_193": {
                "in_features": {
                    "value": "self.hidden_dim2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_62": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.argmax(probs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "binary_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "logits.view(batch_size, self.output_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_input.size(0)",
                            "Call"
                        ],
                        [
                            "grid_representation.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_76": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "logits.view(batch_size, self.output_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_62": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, self.output_size).to(self.device)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_71": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_layer(decoder_hidden)",
                            "Call"
                        ],
                        [
                            "logits.view(batch_size, self.output_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "baselines.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "entropy_term",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "train_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_151": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_152": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(log_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_253": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "all_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(listener_agent.listener_model.parameters())",
                            "Call"
                        ],
                        [
                            "all_params + list(speaker_agent.speaker_model.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "grid_representation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grid_representation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.grid_image_input()",
                            "Call"
                        ],
                        [
                            "env.grid_input()",
                            "Call"
                        ],
                        [
                            "torch.tensor(grid_representation, dtype=torch.float32).contiguous().view(1, flags['grid_size'] ** 2, grid_vector_size).to(DEVICE)",
                            "Call"
                        ],
                        [
                            "env.grid_input(specify_target=True)",
                            "Call"
                        ],
                        [
                            "torch.tensor(grid_representation, dtype=torch.float32).contiguous().view(1, flags['grid_size'] ** 2, grid_vector_size).to(DEVICE)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_64": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "grid_representation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grid_representation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.grid_image_input()",
                            "Call"
                        ],
                        [
                            "env.grid_input()",
                            "Call"
                        ],
                        [
                            "torch.tensor(grid_representation, dtype=torch.float32).contiguous().view(1, flags['grid_size'] ** 2, grid_vector_size).to(DEVICE)",
                            "Call"
                        ],
                        [
                            "env.grid_input(specify_target=True)",
                            "Call"
                        ],
                        [
                            "torch.tensor(grid_representation, dtype=torch.float32).contiguous().view(1, flags['grid_size'] ** 2, grid_vector_size).to(DEVICE)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gComm/agent.py": {
        "torch": {
            "Gumbel_64": {
                "variable": {
                    "value": "self.gumbel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([0.0], device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([1.0], device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogSoftmax_65": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_66": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "y_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RelaxedOneHotCategorical_92": {
                "variable": {
                    "value": "cat_distr",
                    "type": "variable",
                    "possible_values": []
                },
                "temperature": {
                    "value": "self.temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_97": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(y.size(0), y.size(1)).to(self.device)",
                            "Call"
                        ],
                        [
                            "cat_distr.rsample()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_113": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_msgs * self.msg_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_120": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_msgs * self.msg_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, self.num_msgs * self.msg_len, dtype=torch.float32).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, self.num_msgs * self.msg_len, dtype=torch.float32).to(self.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(12, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(message, dtype=torch.float32).unsqueeze(0).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_199": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "policy_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(policy_logits, dim=-1) + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_195": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "policy_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(policy_logits, dim=-1) + 1e-08",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_197": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "policy_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(policy_logits, dim=-1) + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_192": {
                "input": {
                    "value": "policy_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.listener_model(grid_image=state[0], speaker_out=state[1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_79": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y + self.gumbel.sample(y.size()).squeeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.softmax(y_hat * self.temp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "concept",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "concept[:12]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_171": {
                "variable": {
                    "value": "concept",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_200": {
                "input": {
                    "value": "policy_dist + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}