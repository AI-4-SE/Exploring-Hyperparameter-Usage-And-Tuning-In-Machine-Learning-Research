{
    "nff/data/dataset.py": {
        "sklearn": {
            "train_test_split_580": {
                "variable": {
                    "value": "(idx_train, idx_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "load_392": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_271": {
                "obj": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_283": {
                "variable": {
                    "value": "bond_type_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z[bond_list[:, 0]], z[bond_list[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_283": {
                "variable": {
                    "value": "bond_type_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_350": {
                "variable": {
                    "value": "bond_type_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z[bond_list[:, 0]], z[bond_list[:, 1]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_350": {
                "variable": {
                    "value": "bond_type_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_292": {
                "tensors": {
                    "value": "bond_len_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_292": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "tensors": {
                    "value": "[y.view(-1) for y in x]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_355": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_460": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_483": {}
        }
    },
    "example/cgae.py": {
        "torch": {
            "rand_17": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.size()",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_23": {
                "input": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.out_dim, self.in_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(self.out_dim, self.in_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "input": {
                    "value": "self.CG.expand(xyz.shape[0], self.out_dim, self.in_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_64": {
                "input": {
                    "value": "weight.expand(xyz.shape[0], self.out_dim, self.in_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_48": {
                "*size": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_61": {
                "*size": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nff/data/graphs.py": {
        "torch": {
            "Tensor_118": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_161": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_163": {
                "variable": {
                    "value": "box_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_181": {
                "variable": {
                    "value": "box_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_210": {
                "variable": {
                    "value": "sys_xyz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_211": {
                "variable": {
                    "value": "box_len",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nff/data/loader.py": {
        "torch": {
            "cat_41": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[key] for data in dicts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[key] for data in dicts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nff/data/sparse.py": {
        "torch": {}
    },
    "nff/data/topology.py": {
        "torch": {
            "zeros_85": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sub_dic['num_atoms']",
                            "Subscript"
                        ],
                        [
                            "sub_dic['num_atoms']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sub_dic['num_atoms']",
                            "Subscript"
                        ],
                        [
                            "sub_dic['num_atoms']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "sub_dic[bonded_nbr_list]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "bonded_nbr_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(bond_dic[smiles])",
                            "Call"
                        ],
                        [
                            "sub_dic['bonded_nbr_list']",
                            "Subscript"
                        ],
                        [
                            "bonded_nbr_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "sub_dic[num_bonds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "len(bonds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "sub_dic[num_angles]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "len(angles)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "sub_dic[num_dihedrals]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "len(dihedrals)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "sub_dic[num_impropers]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "len(impropers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_259": {
                "variable": {
                    "value": "pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sub_dic['num_atoms']",
                            "Subscript"
                        ],
                        [
                            "sub_dic['num_atoms']",
                            "Subscript"
                        ]
                    ]
                },
                "m": {
                    "value": "num_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sub_dic['num_atoms']",
                            "Subscript"
                        ],
                        [
                            "sub_dic['num_atoms']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "sub_dic[num_pairs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "len(pairs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_147": {
                "tensor": {
                    "value": "bonded_nbr_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(bond_dic[smiles])",
                            "Call"
                        ],
                        [
                            "sub_dic['bonded_nbr_list']",
                            "Subscript"
                        ],
                        [
                            "bonded_nbr_list",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "degree_vec.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_112": {
                "input": {
                    "value": "pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bonded_nbr_list",
                            "variable"
                        ],
                        [
                            "itertools.combinations(interaction_list, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nff/io/ase.py": {
        "torch": {
            "cat_274": {
                "variable": {
                    "value": "intra_nbr_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intra_nbr_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(intra_nbr_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "offsets_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.get_number_of_atoms()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.get_number_of_atoms()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "variable": {
                    "value": "nbr_list_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.get_number_of_atoms()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.get_number_of_atoms()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "atom_nbr_list_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.get_number_of_atoms()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.get_number_of_atoms()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_219": {},
            "Tensor_240": {},
            "Tensor_100": {}
        }
    },
    "nff/md/nve.py": {
        "torch": {}
    },
    "nff/nn/activations.py": {
        "torch": {
            "softplus_11": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nff/nn/glue.py": {
        "torch": {
            "ModuleDict_17": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "model_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dict",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nff/nn/graphconv.py": {
        "torch": {}
    },
    "nff/nn/graphop.py": {
        "torch": {
            "cat_93": {
                "variable": {
                    "value": "atoms_in_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.LongTensor(list(x)) for x in atoms_in_cell]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_28": {
                "variable": {
                    "value": "batched_prop[batch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "batched_prop[batch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_30": {
                "tensors": {
                    "value": "batched_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(torch.split(tensor, N))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_25": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N.to(torch.long).tolist()",
                            "Call"
                        ],
                        [
                            "[N]",
                            "List"
                        ],
                        [
                            "[len(n) for n in atoms_in_cell]",
                            "ListComp"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_88": {
                "tensor": {
                    "value": "pbc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pbc",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N.to(torch.long).tolist()",
                            "Call"
                        ],
                        [
                            "[N]",
                            "List"
                        ],
                        [
                            "[len(n) for n in atoms_in_cell]",
                            "ListComp"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nff/nn/layers.py": {
        "torch": {
            "exp_30": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coeff * torch.pow(diff, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_57": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "stop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stop",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_gaussians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_gaussians",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_111": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DEFAULT_DROPOUT_RATE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor((offset[1] - offset[0]) * torch.ones_like(offset))",
                            "Call"
                        ],
                        [
                            "widths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(start, stop, n_gaussians)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_20": {
                "input": {
                    "value": "widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor((offset[1] - offset[0]) * torch.ones_like(offset))",
                            "Call"
                        ],
                        [
                            "widths",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_25": {
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(start, stop, n_gaussians)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_30": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distances - offset",
                            "BinOp"
                        ],
                        [
                            "distances",
                            "variable"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(start, stop, n_gaussians)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nff/nn/models/cg_temp_graph.py": {
        "torch": {
            "Parameter_30": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([modelparams['V_ex_sigma']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_37": {
                "variable": {
                    "value": "self.atom_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_atom_basis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modelparams['n_atom_basis']",
                            "Subscript"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.molecule_convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SchNetConv(n_atom_basis=n_atom_basis, n_filters=n_filters, n_gaussians=n_gaussians, cutoff=mol_cutoff, trainable_gauss=trainable_gauss, dropout_rate=dropout_rate) for _ in range(mol_n_convolutions)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.system_convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SchNetConv(n_atom_basis=n_atom_basis, n_filters=n_filters, n_gaussians=n_gaussians, cutoff=sys_cutoff, trainable_gauss=trainable_gauss, dropout_rate=dropout_rate) for _ in range(sys_n_convolutions)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.thermo_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_atom_basis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modelparams['n_atom_basis']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nff/nn/modules.py": {
        "torch": {
            "ModuleDict_48": {
                "variable": {
                    "value": "self.moduledict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'message_edge_filter': Sequential(GaussianSmearing(start=0.0, stop=cutoff, n_gaussians=n_gaussians, trainable=trainable_gauss), Dense(in_features=n_gaussians, out_features=n_gaussians, dropout_rate=dropout_rate), shifted_softplus(), Dense(in_features=n_gaussians, out_features=n_filters, dropout_rate=dropout_rate)), 'message_node_filter': Dense(in_features=n_atom_basis, out_features=n_filters, dropout_rate=dropout_rate), 'update_function': Sequential(Dense(in_features=n_filters, out_features=n_atom_basis, dropout_rate=dropout_rate), shifted_softplus(), Dense(in_features=n_atom_basis, out_features=n_atom_basis, dropout_rate=dropout_rate))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "stack_191": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r for r in torch.split(r, num_bonds[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_198": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e.sum(0) for e in torch.split(e, num_bonds[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "GaussianSmearing(start=0.0, stop=cutoff, n_gaussians=n_gaussians, trainable=trainable_gauss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "Dense(in_features=n_filters, out_features=n_atom_basis, dropout_rate=dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_191": {
                "tensor": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.moduledict['message_node_filter'](r)",
                            "Call"
                        ],
                        [
                            "r * aggr_wgt",
                            "BinOp"
                        ],
                        [
                            "(xyz[bond_list[:, 0]] - xyz[bond_list[:, 1]]).pow(2).sum(-1).sqrt()",
                            "Call"
                        ],
                        [
                            "torch.stack([r for r in torch.split(r, num_bonds[0])])",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_bonds[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_198": {
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.moduledict['message_edge_filter'](e)",
                            "Call"
                        ],
                        [
                            "self.k * (r - r_0).pow(2)",
                            "BinOp"
                        ],
                        [
                            "e",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_bonds[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nff/nn/utils.py": {
        "torch": {
            "ModuleDict_50": {
                "variable": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_93": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_95": {
                "variable": {
                    "value": "cell_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_95": {
                "variable": {
                    "value": "cell_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "*args": {
                    "value": "collections.OrderedDict(([layer['name'] + str(i), layer_types[layer['name']](**layer['param'])] for (i, layer) in enumerate(layers)))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nff/train/builders/model.py": {
        "torch": {
            "load_90": {
                "f": {
                    "value": "os.path.join(path, 'best_model')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_95": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "nff/train/builders/trainer.py": {
        "torch": {
            "Adam_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nff/train/evaluate.py": {
        "torch": {}
    },
    "nff/train/hooks/logging.py": {
        "torch": {
            "max_memory_allocated_445": {
                "device": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "nff/train/hooks/scheduling.py": {
        "torch": {
            "CosineAnnealingLR_66": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "trainer.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.Tmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_247": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "patience": {
                    "value": "self.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "self.factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "self.min_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_293": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100000",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.96",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nff/train/loss.py": {
        "torch": {
            "bitwise_not_58": {
                "variable": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.isnan(targ)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_58": {
                "input": {
                    "value": "targ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ground_truth[ground_key]",
                            "Subscript"
                        ],
                        [
                            "targ[valid_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_64": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(targ - pred) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nff/train/metrics.py": {
        "torch": {
            "sum_77": {
                "input": {
                    "value": "diff.view(-1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "torch.abs(diff).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_132": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y - yp.view(y.shape)",
                            "BinOp"
                        ],
                        [
                            "y - yp.view(y.shape)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nff/train/temp/transfer.py": {
        "torch": {}
    },
    "nff/train/trainer.py": {
        "torch": {
            "load_155": {
                "variable": {
                    "value": "self.state_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "chkpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_path, 'checkpoint-' + str(self.epoch) + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_path, 'checkpoint-' + str(epoch) + '.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_101": {
                "f": {
                    "value": "self.best_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_133": {
                "obj": {
                    "value": "self.state_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "chkpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_path, 'checkpoint-' + str(self.epoch) + '.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_path, 'checkpoint-' + str(epoch) + '.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_289": {
                "obj": {
                    "value": "self._model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.best_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "nff/utils/cuda.py": {
        "torch": {}
    },
    "nff/utils/fixing_pbc.py": {
        "torch": {
            "Tensor_92": {
                "variable": {
                    "value": "box_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_99": {
                "variable": {
                    "value": "traj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_122": {
                "variable": {
                    "value": "atom_type",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "traj2write",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(atom_type.reshape(1, -1).repeat(n_frame, 1).reshape(-1, n_mol * n_atom, 1), traj_unwrap)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nff/utils/scatter.py": {
        "torch": {
            "grad_18": {
                "variable": {
                    "value": "(gradspred,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "output.data.new(output.shape).fill_(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nff/utils/tools.py": {
        "torch": {
            "ModuleDict_60": {
                "variable": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "collections.OrderedDict(([layer['name'] + str(i), layer_types[layer['name']](**layer['param'])] for (i, layer) in enumerate(layers)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_90": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(time.time() * 1000.0)",
                            "Call"
                        ],
                        [
                            "((seed & 4278190080) >> 24) + ((seed & 16711680) >> 8) + ((seed & 65280) << 8) + ((seed & 255) << 24)",
                            "BinOp"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}