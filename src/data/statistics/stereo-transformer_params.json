{
    "dataset/__init__.py": {
        "torch": {
            "DataLoader_79": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SceneFlowFlyingThingsDataset(dataset_dir, 'train')",
                            "Call"
                        ],
                        [
                            "SceneFlowMonkaaDataset(dataset_dir, 'train')",
                            "Call"
                        ],
                        [
                            "KITTI2015Dataset(dataset_dir, 'train')",
                            "Call"
                        ],
                        [
                            "KITTI2012Dataset(dataset_dir, 'train')",
                            "Call"
                        ],
                        [
                            "KITTIDataset(dataset_dir, split='train')",
                            "Call"
                        ],
                        [
                            "Middlebury2014Dataset(dataset_dir, 'train')",
                            "Call"
                        ],
                        [
                            "ScaredDataset(dataset_dir, 'train')",
                            "Call"
                        ],
                        [
                            "SintelDataset(dataset_dir, 'train')",
                            "Call"
                        ],
                        [
                            "SceneFlowSamplePackDataset(dataset_dir, 'train')",
                            "Call"
                        ],
                        [
                            "KITTI2015Dataset(dataset_dir, 'train')",
                            "Call"
                        ],
                        [
                            "Middlebury2014Dataset(dataset_dir, 'train')",
                            "Call"
                        ],
                        [
                            "ScaredDataset(dataset_dir, 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "data_loader_validation",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_validation",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SceneFlowFlyingThingsDataset(dataset_dir, args.validation)",
                            "Call"
                        ],
                        [
                            "SceneFlowMonkaaDataset(dataset_dir, args.validation)",
                            "Call"
                        ],
                        [
                            "KITTI2015Dataset(dataset_dir, args.validation)",
                            "Call"
                        ],
                        [
                            "KITTI2012Dataset(dataset_dir, args.validation)",
                            "Call"
                        ],
                        [
                            "KITTIDataset(dataset_dir, split=args.validation)",
                            "Call"
                        ],
                        [
                            "Middlebury2014Dataset(dataset_dir, args.validation)",
                            "Call"
                        ],
                        [
                            "ScaredDataset(dataset_dir, args.validation)",
                            "Call"
                        ],
                        [
                            "SintelDataset(dataset_dir, args.validation)",
                            "Call"
                        ],
                        [
                            "SceneFlowSamplePackDataset(dataset_dir, 'validation')",
                            "Call"
                        ],
                        [
                            "KITTI2015Dataset(dataset_dir, 'validation')",
                            "Call"
                        ],
                        [
                            "Middlebury2014Dataset(dataset_dir, 'validation')",
                            "Call"
                        ],
                        [
                            "ScaredDataset(dataset_dir, 'validation')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SceneFlowFlyingThingsDataset(dataset_dir, 'test')",
                            "Call"
                        ],
                        [
                            "SceneFlowMonkaaDataset(dataset_dir, 'test')",
                            "Call"
                        ],
                        [
                            "KITTI2015Dataset(dataset_dir, 'test')",
                            "Call"
                        ],
                        [
                            "KITTI2012Dataset(dataset_dir, 'test')",
                            "Call"
                        ],
                        [
                            "KITTIDataset(dataset_dir, split='test')",
                            "Call"
                        ],
                        [
                            "Middlebury2014Dataset(dataset_dir, 'test')",
                            "Call"
                        ],
                        [
                            "ScaredDataset(dataset_dir, 'test')",
                            "Call"
                        ],
                        [
                            "SintelDataset(dataset_dir, 'test')",
                            "Call"
                        ],
                        [
                            "SceneFlowSamplePackDataset(dataset_dir, 'validation')",
                            "Call"
                        ],
                        [
                            "KITTI2015Dataset(dataset_dir, 'validation')",
                            "Call"
                        ],
                        [
                            "Middlebury2014Dataset(dataset_dir, 'validation')",
                            "Call"
                        ],
                        [
                            "ScaredDataset(dataset_dir, 'validation')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/kitti.py": {
        "torch": {}
    },
    "dataset/middlebury.py": {
        "torch": {}
    },
    "dataset/preprocess.py": {
        "torch": {
            "tensor_32": {
                "data": {
                    "value": "__imagenet_stats['std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "__imagenet_stats['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/scared.py": {
        "torch": {}
    },
    "dataset/scene_flow.py": {
        "torch": {}
    },
    "dataset/sintel.py": {
        "torch": {}
    },
    "dataset/stereo_albumentation.py": {
        "torch": {
            "tensor_254": {
                "data": {
                    "value": "image.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_130": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamW_157": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_dicts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model.named_parameters() if 'backbone' not in n and 'regression' not in n and p.requires_grad]}, {'params': [p for (n, p) in model.named_parameters() if 'backbone' in n and p.requires_grad], 'lr': args.lr_backbone}, {'params': [p for (n, p) in model.named_parameters() if 'regression' in n and p.requires_grad], 'lr': args.lr_regression}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_158": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(param_dicts, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.lr_decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_134": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_172": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "module/attention.py": {
        "torch": {
            "einsum_99": {
                "variable": {
                    "value": "attn_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "wnec,vnec->newv",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.linear(query, _w, _b)",
                            "Call"
                        ],
                        [
                            "q * scaling",
                            "BinOp"
                        ],
                        [
                            "q.contiguous().view(w, bsz, self.num_heads, head_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "attn_feat + attn_feat_pos + attn_pos_feat",
                            "BinOp"
                        ],
                        [
                            "attn_feat",
                            "Name"
                        ],
                        [
                            "attn + attn_mask",
                            "BinOp"
                        ],
                        [
                            "F.softmax(attn, dim=-1)",
                            "Call"
                        ],
                        [
                            "attn.sum(dim=1) / self.num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_127": {
                "variable": {
                    "value": "v_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn.view(bsz * self.num_heads, w, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v.permute(1, 2, 0, 3).view(bsz * self.num_heads, w, head_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_131": {
                "variable": {
                    "value": "v_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(attn.view(bsz * self.num_heads, w, w), v.permute(1, 2, 0, 3).view(bsz * self.num_heads, w, head_dim))",
                            "Call"
                        ],
                        [
                            "v_o.reshape(bsz, self.num_heads, w, head_dim).permute(2, 0, 1, 3).reshape(w, bsz, embed_dim)",
                            "Call"
                        ],
                        [
                            "F.linear(v_o, self.out_proj.weight, self.out_proj.bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.out_proj.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.out_proj.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_40": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_40": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_68": {
                "variable": {
                    "value": "pos_enc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(pos_enc, 0, pos_indexes).view(w, w, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_indexes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_75": {
                "variable": {
                    "value": "(q_r, k_r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_enc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(pos_enc, 0, pos_indexes).view(w, w, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight": {
                    "value": "_w",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "chunk_75": {
                "variable": {
                    "value": "(q_r, k_r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_104": {
                "variable": {
                    "value": "attn_feat_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "wnec,wvec->newv",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.linear(query, _w, _b)",
                            "Call"
                        ],
                        [
                            "q * scaling",
                            "BinOp"
                        ],
                        [
                            "q.contiguous().view(w, bsz, self.num_heads, head_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_105": {
                "variable": {
                    "value": "attn_pos_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "vnec,wvec->newv",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "k.contiguous().view(-1, bsz, self.num_heads, head_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_38": {
                "input": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_42": {
                "input": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_50": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_63": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "_w",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:_end, :]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_weight[_start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "_b",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "self.in_proj_bias[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "_b[_start:_end]",
                            "Subscript"
                        ],
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "_b[_start:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "chunk_63": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "module/context_adjustment_layer.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.in_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_21": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResBlock(feature_dim, expansion) for _ in range(num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.occ_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "weight_norm(nn.Conv2d(1 + 3, feature_dim, kernel_size=3, padding=1))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "weight_norm(nn.Conv2d(n_feats + 1, n_feats * expansion_ratio, kernel_size=3, padding=1))",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_26": {
                "module": {
                    "value": "nn.Conv2d(1 + 3, feature_dim, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_27": {
                "module": {
                    "value": "nn.Conv2d(feature_dim, feature_dim, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_29": {
                "module": {
                    "value": "nn.Conv2d(feature_dim, feature_dim, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_30": {
                "module": {
                    "value": "nn.Conv2d(feature_dim, feature_dim, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_45": {
                "tensors": {
                    "value": "[disp_raw, img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "[occ_raw, img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_61": {
                "module": {
                    "value": "nn.Conv2d(n_feats + 1, n_feats * expansion_ratio, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weight_norm_63": {
                "module": {
                    "value": "nn.Conv2d(n_feats * expansion_ratio, n_feats, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "1 + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "n_feats + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_feats * expansion_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "n_feats * expansion_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "[disp, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "module/feat_extractor_backbone.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.in_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 16, kernel_size=3, padding=1, stride=2, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d((16, 16), stride=(16, 16))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d((8, 8), stride=(8, 8))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d((4, 4), stride=(4, 4))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.branch4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d((2, 2), stride=(2, 2))",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "src_stereo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.left, x.right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_93": {
                "variable": {
                    "value": "spp_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spp_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch1(output_2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(spp_1, size=(h_spp, w_spp), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_spp, w_spp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_95": {
                "variable": {
                    "value": "spp_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spp_2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch2(output_2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(spp_2, size=(h_spp, w_spp), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_spp, w_spp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "spp_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spp_3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3(output_2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(spp_3, size=(h_spp, w_spp), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_spp, w_spp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_99": {
                "variable": {
                    "value": "spp_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spp_4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch4(output_2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(spp_4, size=(h_spp, w_spp), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h_spp, w_spp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "output_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[spp_1, spp_2, spp_3, spp_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_37": {
                "kernel_size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_42": {
                "kernel_size": {
                    "value": "(8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_47": {
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_52": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "module/feat_extractor_tokenizer.py": {
        "torch": {
            "cat_37": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.double_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "up",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.dense_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dense_block",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_20": {
                "variable": {
                    "value": "self.convTrans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.convTrans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, stride=2, padding=0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_25": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_29": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "module/loss.py": {
        "torch": {
            "SmoothL1Loss_28": {
                "variable": {
                    "value": "self.l1_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_29": {
                "variable": {
                    "value": "self.epe_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_43": {
                "variable": {
                    "value": "loss_dict[error_px]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pred[~invalid_mask] - disp[~invalid_mask]) > self.px_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_45": {
                "variable": {
                    "value": "loss_dict[total_px]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "~invalid_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logical_and_76": {
                "variable": {
                    "value": "inter_occ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred > 0.5",
                            "Compare"
                        ]
                    ]
                },
                "other": {
                    "value": "occ_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.occ_mask",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_76": {
                "variable": {
                    "value": "inter_occ",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logical_or_77": {
                "variable": {
                    "value": "union_occ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logical_and(pred_mask, ~invalid_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "occ_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.occ_mask",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_77": {
                "variable": {
                    "value": "union_occ",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logical_and_80": {
                "variable": {
                    "value": "inter_noc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~pred_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "~invalid_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_80": {
                "variable": {
                    "value": "inter_noc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logical_or_81": {
                "variable": {
                    "value": "union_noc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logical_and(~pred_mask, occ_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "~invalid_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_81": {
                "variable": {
                    "value": "union_noc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "entropy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[entropy_loss_occ, entropy_loss_noc]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "rr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rr_loss, rr_loss_occ_left]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "rr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rr_loss, rr_loss_occ_right]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_or_195": {
                "variable": {
                    "value": "invalid_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.disp <= 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "inputs.disp >= self.validation_max_disp",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_197": {
                "input": {
                    "value": "invalid_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batched_index_select(invalid_mask, 2, inputs.sampled_cols)",
                            "Call"
                        ],
                        [
                            "batched_index_select(invalid_mask, 1, inputs.sampled_rows)",
                            "Call"
                        ],
                        [
                            "batched_index_select(invalid_mask, 2, inputs.sampled_cols)",
                            "Call"
                        ],
                        [
                            "batched_index_select(invalid_mask, 1, inputs.sampled_rows)",
                            "Call"
                        ],
                        [
                            "inputs.disp <= 0.0",
                            "Compare"
                        ],
                        [
                            "torch.logical_or(inputs.disp <= 0.0, inputs.disp >= self.validation_max_disp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_106": {
                "input": {
                    "value": "gt_response + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_163": {
                "input": {
                    "value": "occ_pred[occ_mask] + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_164": {
                "input": {
                    "value": "1.0 - occ_pred[~invalid_mask] + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_113": {
                "input": {
                    "value": "outputs['gt_response_occ_left'] + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_119": {
                "input": {
                    "value": "outputs['gt_response_occ_right'] + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_and_77": {
                "input": {
                    "value": "pred_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred > 0.5",
                            "Compare"
                        ]
                    ]
                },
                "other": {
                    "value": "~invalid_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_and_81": {
                "input": {
                    "value": "~pred_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "occ_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.occ_mask",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_44": {
                "input": {
                    "value": "pred[~invalid_mask] - disp[~invalid_mask]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "module/pos_encoder.py": {
        "torch": {
            "linspace_45": {
                "variable": {
                    "value": "x_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-w + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "2 * w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_55": {
                "variable": {
                    "value": "dim_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, 0::2].sin(), pos_x[:, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_60": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "module/regression_head.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_50": {
                "variable": {
                    "value": "high_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "response_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[high_response - 1, high_response, high_response + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_56": {
                "variable": {
                    "value": "attn_weight_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_57": {
                "variable": {
                    "value": "attn_weight_rw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weight_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(attn_weight, [1, 1], value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "response_range + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_68": {
                "variable": {
                    "value": "pos_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_shift",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._compute_unscaled_pos_shift(attn_weight.shape[2], attn_weight.device)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_69": {
                "variable": {
                    "value": "pos_rw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.pad(pos_shift, [1, 1]).expand_as(attn_weight_pad)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "response_range + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_121": {
                "variable": {
                    "value": "disp_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "disp_pred_attn[None,]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_122": {
                "variable": {
                    "value": "occ_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "occ_pred[None,]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn, self.phi.expand(bs, h, w, 1).to(attn.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[similarity_matrix, self.phi.expand(bs, h, 1, w + 1).to(attn.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn, self.phi.expand(bs, h, w, 1).to(attn.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[similarity_matrix, self.phi.expand(bs, h, 1, w + 1).to(attn.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_205": {
                "variable": {
                    "value": "attn_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([attn, self.phi.expand(bs, h, w, 1).to(attn.device)], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([similarity_matrix, self.phi.expand(bs, h, 1, w + 1).to(attn.device)], -2)",
                            "Call"
                        ],
                        [
                            "torch.cat([attn, self.phi.expand(bs, h, w, 1).to(attn.device)], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([similarity_matrix, self.phi.expand(bs, h, 1, w + 1).to(attn.device)], -2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_156": {
                "input": {
                    "value": "log_nu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "marginal.log().to(attn.device).expand(bs, h, w + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "[torch.ones([w]), torch.tensor([w]).float()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_159": {
                "input": {
                    "value": "attn + u.unsqueeze(3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_160": {
                "input": {
                    "value": "attn + v.unsqueeze(2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_33": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_34": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_91": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_176": {
                "*size": {
                    "value": "[w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "[w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_188": {
                "input": {
                    "value": "torch.tensor([2.0 * w]).to(attn.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "[2.0 * w]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "module/sttr.py": {
        "torch": {}
    },
    "module/transformer.py": {
        "torch": {
            "LayerNorm_31": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat_left, feat_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_125": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_159": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_160": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat_left, feat_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triu_220": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(sz, sz)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_181": {
                "variable": {
                    "value": "pos_flipped",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_100": {
                "variable": {
                    "value": "indexes_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feat_left_2.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_101": {
                "variable": {
                    "value": "indexes_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feat_left_2.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_220": {
                "*size": {
                    "value": "sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "sz",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utilities/checkpoint_saver.py": {
        "torch": {
            "save_29": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.experiment_dir, filename)",
                            "Call"
                        ],
                        [
                            "'model.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utilities/eval.py": {
        "torch": {
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utilities/foward_pass.py": {
        "torch": {
            "arange_47": {
                "start": {
                    "value": "col_offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(downsample / 2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "args.downsample",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_48": {
                "start": {
                    "value": "row_offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(downsample / 2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "downsample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "args.downsample",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "utilities/inference.py": {
        "torch": {
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_25": {
                "start": {
                    "value": "col_offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(downsample / 2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_26": {
                "start": {
                    "value": "row_offset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(downsample / 2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/misc.py": {
        "torch": {
            "floor_49": {
                "variable": {
                    "value": "idx_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_points",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "variable": {
                    "value": "idx_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "min": {
                    "value": "source.size(-1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_50": {
                "variable": {
                    "value": "idx_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_points",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_50": {
                "variable": {
                    "value": "idx_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "min": {
                    "value": "source.size(-1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_37": {
                "input": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "index.view(views).expand(expanse)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_66": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_124": {
                "obj": {
                    "value": "output_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_61": {
                "input": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ceil(sample_points).long().clamp(0, source.size(-1) - 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utilities/train.py": {
        "torch": {
            "empty_cache_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__52": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}