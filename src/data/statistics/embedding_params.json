{
    "autoencoder/ae_for_LPNC/train_lp.py": {
        "sklearn": {}
    },
    "autoencoder/ae_for_LPNC/train_lp_with_feats.py": {
        "sklearn": {
            "MaxAbsScaler_16": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_62": {
                "variable": {
                    "value": "batch_adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_82": {
                "variable": {
                    "value": "batch_adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "autoencoder/ae_for_LPNC/train_multitask_lpnc.py": {
        "sklearn": {
            "MaxAbsScaler_16": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "manifold/digits.py": {
        "sklearn": {
            "load_digits_9": {
                "variable": {
                    "value": "digits",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_class": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Isomap_65": {
                "variable": {
                    "value": "X_iso",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LocallyLinearEmbedding_74": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "method": {
                    "value": "standard",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "manifold/swiss_roll.py": {
        "sklearn": {
            "make_swiss_roll_21": {
                "variable": {
                    "value": "(X, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LocallyLinearEmbedding_31": {
                "variable": {
                    "value": "lle",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Isomap_32": {
                "variable": {
                    "value": "isomap",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "autoencoder/ae_for_LPNC/ae_LPNC.py": {
        "tensorflow": {
            "weighted_cross_entropy_with_logits_33": {
                "targets": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_true[:, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "pos_ratio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 - num_pos / num_neg",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "autoencoder/ae_for_digits/autoencoder.py": {
        "tensorflow": {
            "placeholder_20": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_69": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(y_true - y_pred, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "layer_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(x, weights['encoder_h1']), biases['encoder_b1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "layer_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_1, weights['encoder_h2']), biases['encoder_b2'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "layer_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_2, weights['encoder_h3']), biases['encoder_b3'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_51": {
                "variable": {
                    "value": "layer_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(layer_3, weights['encoder_h4'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['encoder_b4']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_54": {
                "variable": {
                    "value": "layer_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(x, weights['decoder_h1']), biases['decoder_b1'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "variable": {
                    "value": "layer_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_1, weights['decoder_h2']), biases['decoder_b2'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "layer_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_2, weights['decoder_h3']), biases['decoder_b3'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "variable": {
                    "value": "layer_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(tf.matmul(layer_3, weights['decoder_h4']), biases['decoder_b4'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_75": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_26": {
                "initial_value": {
                    "value": "tf.truncated_normal([n_input, n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_27": {
                "initial_value": {
                    "value": "tf.truncated_normal([n_hidden_1, n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "initial_value": {
                    "value": "tf.truncated_normal([n_hidden_2, n_hidden_3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_29": {
                "initial_value": {
                    "value": "tf.truncated_normal([n_hidden_3, n_hidden_4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "initial_value": {
                    "value": "tf.truncated_normal([n_hidden_4, n_hidden_3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_31": {
                "initial_value": {
                    "value": "tf.truncated_normal([n_hidden_3, n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_32": {
                "initial_value": {
                    "value": "tf.truncated_normal([n_hidden_2, n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "initial_value": {
                    "value": "tf.truncated_normal([n_hidden_1, n_input])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "initial_value": {
                    "value": "tf.random_normal([n_input])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_69": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_26": {
                "shape": {
                    "value": "[n_input, n_hidden_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_27": {
                "shape": {
                    "value": "[n_hidden_1, n_hidden_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_28": {
                "shape": {
                    "value": "[n_hidden_2, n_hidden_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_29": {
                "shape": {
                    "value": "[n_hidden_3, n_hidden_4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_30": {
                "shape": {
                    "value": "[n_hidden_4, n_hidden_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_31": {
                "shape": {
                    "value": "[n_hidden_3, n_hidden_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_32": {
                "shape": {
                    "value": "[n_hidden_2, n_hidden_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_33": {
                "shape": {
                    "value": "[n_hidden_1, n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_47": {
                "x": {
                    "value": "tf.matmul(x, weights['encoder_h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['encoder_b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_48": {
                "x": {
                    "value": "tf.matmul(layer_1, weights['encoder_h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['encoder_b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_49": {
                "x": {
                    "value": "tf.matmul(layer_2, weights['encoder_h3'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['encoder_b3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "a": {
                    "value": "layer_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_2, weights['encoder_h3']), biases['encoder_b3']))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_2, weights['decoder_h3']), biases['decoder_b3']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['encoder_h4']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_54": {
                "x": {
                    "value": "tf.matmul(x, weights['decoder_h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['decoder_b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_55": {
                "x": {
                    "value": "tf.matmul(layer_1, weights['decoder_h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['decoder_b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_56": {
                "x": {
                    "value": "tf.matmul(layer_2, weights['decoder_h3'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['decoder_b3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_57": {
                "x": {
                    "value": "tf.matmul(layer_3, weights['decoder_h4'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['decoder_b4']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights['encoder_h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "a": {
                    "value": "layer_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(x, weights['encoder_h1']), biases['encoder_b1']))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(x, weights['decoder_h1']), biases['decoder_b1']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['encoder_h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "a": {
                    "value": "layer_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['encoder_h2']), biases['encoder_b2']))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['decoder_h2']), biases['decoder_b2']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['encoder_h3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights['decoder_h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "a": {
                    "value": "layer_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(x, weights['encoder_h1']), biases['encoder_b1']))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(x, weights['decoder_h1']), biases['decoder_b1']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['decoder_h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "a": {
                    "value": "layer_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['encoder_h2']), biases['encoder_b2']))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_1, weights['decoder_h2']), biases['decoder_b2']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['decoder_h3']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "a": {
                    "value": "layer_3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_2, weights['encoder_h3']), biases['encoder_b3']))",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(tf.add(tf.matmul(layer_2, weights['decoder_h3']), biases['decoder_b3']))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['decoder_h4']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}