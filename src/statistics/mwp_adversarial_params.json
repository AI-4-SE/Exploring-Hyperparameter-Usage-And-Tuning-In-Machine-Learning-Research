{
    "code/GTS/src/components/contextual_embeddings.py": {
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "token_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.bert_tokenizer.convert_tokens_to_ids(tokens) for tokens in padded_tokens]",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "token_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.roberta_tokenizer.convert_tokens_to_ids(tokens) for tokens in padded_tokens]",
                    "possible_values": []
                }
            }
        }
    },
    "code/GTS/src/components/masked_cross_entropy.py": {
        "torch": {
            "arange_9": {
                "variable": {
                    "value": "seq_range",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_39": {
                "variable": {
                    "value": "log_probs_flat",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_79": {
                "variable": {
                    "value": "log_probs_flat",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat + 1e-12",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gather_43": {
                "input": {
                    "value": "log_probs_flat",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.log(logits_flat + 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_84": {
                "input": {
                    "value": "log_probs_flat",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.log(logits_flat + 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/GTS/src/components/models.py": {
        "torch": {
            "Dropout_20": {
                "variable": {
                    "value": "self.em_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_24": {
                "variable": {
                    "value": "weight_req",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_size",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.embedding_size",
                    "possible_values": []
                }
            },
            "GRU_53": {
                "variable": {
                    "value": "self.gru",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_60": {
                "variable": {
                    "value": "packed",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seq)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "embedded.view(1, batch_size, self.embedding_size)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_62": {
                "variable": {
                    "value": "(outputs, output_lengths)",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.attn",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.score",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Softmax_74": {
                "variable": {
                    "value": "self.softmax",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "energy_in",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "variable": {
                    "value": "self.em_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_109": {
                "variable": {
                    "value": "self.embedding",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "GRU_110": {
                "variable": {
                    "value": "self.gru",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size + embedding_size",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.concat",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.out",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.attn",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.score",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "energy_in",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, num_embeddings)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.attn",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.score",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "energy_in",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tanh_187": {
                "variable": {
                    "value": "score_feature",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(energy_in)",
                    "possible_values": []
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "attn_energies",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "possible_values": [
                        [
                            "self.score(torch.tanh(self.attn(energy_in)))",
                            "Call"
                        ],
                        [
                            "attn_energies.squeeze(1)",
                            "Call"
                        ],
                        [
                            "attn_energies.view(max_len, this_batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "attn_energies.masked_fill_(seq_mask, -1000000000000.0)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn_energies)",
                            "Call"
                        ],
                        [
                            "self.score(score_feature)",
                            "Call"
                        ],
                        [
                            "attn_energies.squeeze(1)",
                            "Call"
                        ],
                        [
                            "attn_energies.view(max_len, this_batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "attn_energies.masked_fill_(seq_mask, -1000000000000.0)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(attn_energies, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_231": {
                "variable": {
                    "value": "packed",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seq)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "embedded.view(1, batch_size, self.embedding_size)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_235": {
                "variable": {
                    "value": "(pade_outputs, _)",
                    "possible_values": []
                },
                "sequence": {
                    "value": "pade_outputs",
                    "possible_values": [
                        [
                            "pade_outputs.index_select(1, orig_idx)",
                            "Call"
                        ],
                        [
                            "pade_outputs[:, :, :self.hidden_size] + pade_outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_257": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_259": {
                "variable": {
                    "value": "self.embedding_weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, input_size, hidden_size)",
                    "possible_values": []
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.concat_l",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_263": {
                "variable": {
                    "value": "self.concat_r",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.concat_lg",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_265": {
                "variable": {
                    "value": "self.concat_rg",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.ops",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "op_nums",
                    "possible_values": []
                }
            },
            "stack_296": {
                "variable": {
                    "value": "current_node",
                    "possible_values": []
                },
                "tensors": {
                    "value": "current_node_temp",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_310": {
                "variable": {
                    "value": "embedding_weight",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding_weight, num_pades)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "leaf_input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(current_node, current_context)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Embedding_337": {
                "variable": {
                    "value": "self.embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "op_nums",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "possible_values": []
                }
            },
            "Dropout_338": {
                "variable": {
                    "value": "self.em_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_339": {
                "variable": {
                    "value": "self.generate_l",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_340": {
                "variable": {
                    "value": "self.generate_r",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "variable": {
                    "value": "self.generate_lg",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_342": {
                "variable": {
                    "value": "self.generate_rg",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "tanh_352": {
                "variable": {
                    "value": "l_child",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_l(torch.cat((node_embedding, current_context, node_label), 1))",
                    "possible_values": []
                }
            },
            "sigmoid_353": {
                "variable": {
                    "value": "l_child_g",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_lg(torch.cat((node_embedding, current_context, node_label), 1))",
                    "possible_values": []
                }
            },
            "tanh_354": {
                "variable": {
                    "value": "r_child",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_r(torch.cat((node_embedding, current_context, node_label), 1))",
                    "possible_values": []
                }
            },
            "sigmoid_355": {
                "variable": {
                    "value": "r_child_g",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_rg(torch.cat((node_embedding, current_context, node_label), 1))",
                    "possible_values": []
                }
            },
            "Dropout_368": {
                "variable": {
                    "value": "self.em_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_369": {
                "variable": {
                    "value": "self.merge",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_370": {
                "variable": {
                    "value": "self.merge_g",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "tanh_377": {
                "variable": {
                    "value": "sub_tree",
                    "possible_values": []
                },
                "input": {
                    "value": "self.merge(torch.cat((node_embedding, sub_tree_1, sub_tree_2), 1))",
                    "possible_values": []
                }
            },
            "sigmoid_378": {
                "variable": {
                    "value": "sub_tree_g",
                    "possible_values": []
                },
                "input": {
                    "value": "self.merge_g(torch.cat((node_embedding, sub_tree_1, sub_tree_2), 1))",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.embedding",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LSTM_213": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.n_layers",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if self.n_layers == 1 else self.dropout",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tanh_84": {
                "input": {
                    "value": "self.attn(energy_in)",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(embedded, context.transpose(0, 1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tanh_133": {
                "input": {
                    "value": "self.concat(torch.cat((rnn_output.squeeze(0), context.squeeze(1)), 1))",
                    "possible_values": []
                }
            },
            "tanh_161": {
                "input": {
                    "value": "self.attn(energy_in)",
                    "possible_values": []
                }
            },
            "GRU_218": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "RNN_220": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.n_layers",
                    "possible_values": []
                },
                "nonlinearity": {
                    "value": "tanh",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if self.n_layers == 1 else self.dropout",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "randn_259": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "input_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "tanh_286": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_l(c)",
                    "possible_values": []
                }
            },
            "sigmoid_287": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_lg(c)",
                    "possible_values": []
                }
            },
            "tanh_292": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_r(torch.cat((ld, c), 1))",
                    "possible_values": []
                }
            },
            "sigmoid_293": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_rg(torch.cat((ld, c), 1))",
                    "possible_values": []
                }
            },
            "cat_352": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_353": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_354": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_355": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_377": {
                "tensors": {
                    "value": "(node_embedding, sub_tree_1, sub_tree_2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_378": {
                "tensors": {
                    "value": "(node_embedding, sub_tree_1, sub_tree_2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_133": {
                "tensors": {
                    "value": "(rnn_output.squeeze(0), context.squeeze(1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_292": {
                "tensors": {
                    "value": "(ld, c)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_293": {
                "tensors": {
                    "value": "(ld, c)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "code/GTS/src/main.py": {
        "torch": {}
    },
    "code/GTS/src/train_and_evaluate.py": {
        "torch": {
            "is_available_16": {
                "variable": {
                    "value": "USE_CUDA",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "transpose_384": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_385": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_408": {
                "variable": {
                    "value": "all_decoder_outputs",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_target_length",
                    "possible_values": [
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "decoder_input.size(0)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "decoder.output_size",
                    "possible_values": []
                }
            },
            "unsqueeze_525": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_647": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_649": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_651": {
                "variable": {
                    "value": "padding_hidden",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_754": {
                "variable": {
                    "value": "all_node_outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_node_outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_786": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_797": {
                "variable": {
                    "value": "padding_hidden",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "transpose_947": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_949": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_951": {
                "variable": {
                    "value": "padding_hidden",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_1011": {
                "variable": {
                    "value": "all_node_outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_node_outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_1040": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_1049": {
                "variable": {
                    "value": "padding_hidden",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_428": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "decoder_input.size(0)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_554": {
                "variable": {
                    "value": "beam_scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "decoder.output_size * beam_len",
                    "possible_values": []
                }
            },
            "zeros_557": {
                "variable": {
                    "value": "all_hidden",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_len",
                    "possible_values": [
                        [
                            "len(beam_list)",
                            "Call"
                        ],
                        [
                            "len(beam_list)",
                            "Call"
                        ],
                        [
                            "beam_len - 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_size_0",
                    "possible_values": [
                        [
                            "decoder_hidden.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "hidden_size_2",
                    "possible_values": [
                        [
                            "decoder_hidden.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_720": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(op, num_score)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_991": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(op, num_score)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_435": {
                "variable": {
                    "value": "beam_scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "decoder_input.size(0)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "decoder.output_size * beam_len",
                    "possible_values": []
                }
            },
            "zeros_436": {
                "variable": {
                    "value": "all_hidden",
                    "possible_values": []
                },
                "*size": {
                    "value": "decoder_hidden.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size * beam_len",
                    "possible_values": []
                },
                "dtype": {
                    "value": "decoder_hidden.size(2)",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "variable": {
                    "value": "all_outputs",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_target_length",
                    "possible_values": [
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size * beam_len",
                    "possible_values": []
                },
                "dtype": {
                    "value": "decoder.output_size",
                    "possible_values": []
                }
            },
            "clip_grad_norm__510": {
                "parameters": {
                    "value": "encoder.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__511": {
                "parameters": {
                    "value": "decoder.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_580": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_output",
                    "possible_values": [
                        [
                            "decoder_output.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_867": {
                "tensors": {
                    "value": "(op, num_score)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_1099": {
                "tensors": {
                    "value": "(op, num_score)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_456": {
                "input": {
                    "value": "decoder_output",
                    "possible_values": [
                        [
                            "decoder_output.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "code/GTS/src/utils/helper.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(gpu_num) if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_93": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "possible_values": [
                        [
                            "os.path.join(model_path, '{}.pt'.format(ckpt))",
                            "Call"
                        ],
                        [
                            "ckpts[0]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "set_device_20": {
                "device": {
                    "value": "int(gpu_num)",
                    "possible_values": []
                }
            },
            "save_87": {
                "obj": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "possible_values": [
                        [
                            "os.path.join(model_path, '{}.pt'.format(ckpt))",
                            "Call"
                        ],
                        [
                            "ckpts[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "code/Graph2Tree/src/components/contextual_embeddings.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "token_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.bert_tokenizer.convert_tokens_to_ids(tokens) for tokens in padded_tokens]",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "token_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.roberta_tokenizer.convert_tokens_to_ids(tokens) for tokens in padded_tokens]",
                    "possible_values": []
                }
            }
        }
    },
    "code/Graph2Tree/src/components/masked_cross_entropy.py": {
        "torch": {
            "arange_9": {
                "variable": {
                    "value": "seq_range",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_39": {
                "variable": {
                    "value": "log_probs_flat",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_79": {
                "variable": {
                    "value": "log_probs_flat",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat + 1e-12",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gather_43": {
                "input": {
                    "value": "log_probs_flat",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.log(logits_flat + 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_84": {
                "input": {
                    "value": "log_probs_flat",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.log(logits_flat + 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/Graph2Tree/src/components/models.py": {
        "torch": {
            "Dropout_25": {
                "variable": {
                    "value": "self.em_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_29": {
                "variable": {
                    "value": "weight_req",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_size",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.embedding_size",
                    "possible_values": []
                }
            },
            "Embedding_55": {
                "variable": {
                    "value": "self.embedding",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.em_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRU_57": {
                "variable": {
                    "value": "self.gru",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_63": {
                "variable": {
                    "value": "packed",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seq)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "embedded.view(1, batch_size, self.embedding_size)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_65": {
                "variable": {
                    "value": "(outputs, output_lengths)",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.attn",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.score",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Softmax_77": {
                "variable": {
                    "value": "self.softmax",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "energy_in",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "variable": {
                    "value": "self.em_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_112": {
                "variable": {
                    "value": "self.embedding",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "GRU_113": {
                "variable": {
                    "value": "self.gru",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size + embedding_size",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.concat",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.out",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.attn",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.score",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "energy_in",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, num_embeddings)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.attn",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.score",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "energy_in",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tanh_190": {
                "variable": {
                    "value": "score_feature",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(energy_in)",
                    "possible_values": []
                }
            },
            "softmax_196": {
                "variable": {
                    "value": "attn_energies",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "possible_values": [
                        [
                            "self.score(torch.tanh(self.attn(energy_in)))",
                            "Call"
                        ],
                        [
                            "attn_energies.squeeze(1)",
                            "Call"
                        ],
                        [
                            "attn_energies.view(max_len, this_batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "attn_energies.masked_fill_(seq_mask, -1000000000000.0)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn_energies)",
                            "Call"
                        ],
                        [
                            "self.score(score_feature)",
                            "Call"
                        ],
                        [
                            "attn_energies.squeeze(1)",
                            "Call"
                        ],
                        [
                            "attn_energies.view(max_len, this_batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "attn_energies.masked_fill_(seq_mask, -1000000000000.0)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(attn_energies, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_235": {
                "variable": {
                    "value": "packed",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seq)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "embedded.view(1, batch_size, self.embedding_size)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_239": {
                "variable": {
                    "value": "(pade_outputs, _)",
                    "possible_values": []
                },
                "sequence": {
                    "value": "pade_outputs",
                    "possible_values": [
                        [
                            "pade_outputs.index_select(1, orig_idx)",
                            "Call"
                        ],
                        [
                            "pade_outputs[:, :, :self.hidden_size] + pade_outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "pade_outputs.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_264": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_266": {
                "variable": {
                    "value": "self.embedding_weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, input_size, hidden_size)",
                    "possible_values": []
                }
            },
            "Linear_269": {
                "variable": {
                    "value": "self.concat_l",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.concat_r",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_271": {
                "variable": {
                    "value": "self.concat_lg",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_272": {
                "variable": {
                    "value": "self.concat_rg",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_274": {
                "variable": {
                    "value": "self.ops",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "op_nums",
                    "possible_values": []
                }
            },
            "stack_303": {
                "variable": {
                    "value": "current_node",
                    "possible_values": []
                },
                "tensors": {
                    "value": "current_node_temp",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_317": {
                "variable": {
                    "value": "embedding_weight",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding_weight, num_pades)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "leaf_input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(current_node, current_context)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Embedding_344": {
                "variable": {
                    "value": "self.embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "op_nums",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "possible_values": []
                }
            },
            "Dropout_345": {
                "variable": {
                    "value": "self.em_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.generate_l",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "self.generate_r",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_348": {
                "variable": {
                    "value": "self.generate_lg",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.generate_rg",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "tanh_359": {
                "variable": {
                    "value": "l_child",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_l(torch.cat((node_embedding, current_context, node_label), 1))",
                    "possible_values": []
                }
            },
            "sigmoid_360": {
                "variable": {
                    "value": "l_child_g",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_lg(torch.cat((node_embedding, current_context, node_label), 1))",
                    "possible_values": []
                }
            },
            "tanh_361": {
                "variable": {
                    "value": "r_child",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_r(torch.cat((node_embedding, current_context, node_label), 1))",
                    "possible_values": []
                }
            },
            "sigmoid_362": {
                "variable": {
                    "value": "r_child_g",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_rg(torch.cat((node_embedding, current_context, node_label), 1))",
                    "possible_values": []
                }
            },
            "Dropout_375": {
                "variable": {
                    "value": "self.em_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_376": {
                "variable": {
                    "value": "self.merge",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Linear_377": {
                "variable": {
                    "value": "self.merge_g",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "tanh_384": {
                "variable": {
                    "value": "sub_tree",
                    "possible_values": []
                },
                "input": {
                    "value": "self.merge(torch.cat((node_embedding, sub_tree_1, sub_tree_2), 1))",
                    "possible_values": []
                }
            },
            "sigmoid_385": {
                "variable": {
                    "value": "sub_tree_g",
                    "possible_values": []
                },
                "input": {
                    "value": "self.merge_g(torch.cat((node_embedding, sub_tree_1, sub_tree_2), 1))",
                    "possible_values": []
                }
            },
            "ModuleList_394": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "possible_values": []
                }
            },
            "Parameter_400": {
                "variable": {
                    "value": "self.a_2",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "possible_values": []
                }
            },
            "Parameter_401": {
                "variable": {
                    "value": "self.b_2",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "possible_values": []
                }
            },
            "Linear_413": {
                "variable": {
                    "value": "self.w_1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_ff",
                    "possible_values": []
                }
            },
            "Linear_414": {
                "variable": {
                    "value": "self.w_2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_out",
                    "possible_values": []
                }
            },
            "Dropout_415": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_466": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.edge_layer_1(graph_nodes)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.edge_layer_2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.K, self.combined_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_470": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.edge_layer_1(graph_nodes)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.edge_layer_2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.K, self.combined_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_474": {
                "variable": {
                    "value": "adjacency_matrix",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.edge_layer_1(graph_nodes)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.edge_layer_2(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.K, self.combined_dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h.transpose(1, 2)",
                    "possible_values": []
                }
            },
            "relu_559": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(x, adj)",
                    "possible_values": []
                }
            },
            "dropout_560": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "Parameter_574": {
                "variable": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "possible_values": []
                }
            },
            "matmul_590": {
                "variable": {
                    "value": "support",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "possible_values": []
                }
            },
            "matmul_593": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "possible_values": [
                        [
                            "self.get_adj(graph_nodes)",
                            "Call"
                        ],
                        [
                            "graph.float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "support",
                    "possible_values": [
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_24": {
                "variable": {
                    "value": "self.embedding",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LSTM_216": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.n_layers",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if self.n_layers == 1 else self.dropout",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "diag_491": {
                "variable": {
                    "value": "D",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(d, -0.5)",
                    "possible_values": []
                }
            },
            "diag_494": {
                "variable": {
                    "value": "D",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(d, -1)",
                    "possible_values": []
                }
            },
            "Parameter_576": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "possible_values": []
                }
            },
            "tanh_87": {
                "input": {
                    "value": "self.attn(energy_in)",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "(embedded, context.transpose(0, 1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "tanh_136": {
                "input": {
                    "value": "self.concat(torch.cat((rnn_output.squeeze(0), context.squeeze(1)), 1))",
                    "possible_values": []
                }
            },
            "tanh_164": {
                "input": {
                    "value": "self.attn(energy_in)",
                    "possible_values": []
                }
            },
            "GRU_221": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "RNN_223": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.n_layers",
                    "possible_values": []
                },
                "nonlinearity": {
                    "value": "tanh",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if self.n_layers == 1 else self.dropout",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "randn_266": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "input_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "tanh_293": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_l(c)",
                    "possible_values": []
                }
            },
            "sigmoid_294": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_lg(c)",
                    "possible_values": []
                }
            },
            "tanh_299": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_r(torch.cat((ld, c), 1))",
                    "possible_values": []
                }
            },
            "sigmoid_300": {
                "variable": {
                    "value": "t",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_rg(torch.cat((ld, c), 1))",
                    "possible_values": []
                }
            },
            "ones_400": {
                "*size": {
                    "value": "features",
                    "possible_values": []
                }
            },
            "zeros_401": {
                "*size": {
                    "value": "features",
                    "possible_values": []
                }
            },
            "eye_487": {
                "n": {
                    "value": "A.size(0)",
                    "possible_values": []
                }
            },
            "cat_359": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_360": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_361": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_362": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_384": {
                "tensors": {
                    "value": "(node_embedding, sub_tree_1, sub_tree_2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_385": {
                "tensors": {
                    "value": "(node_embedding, sub_tree_1, sub_tree_2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_418": {
                "input": {
                    "value": "self.w_1(x)",
                    "possible_values": []
                }
            },
            "pow_491": {
                "input": {
                    "value": "d",
                    "possible_values": [
                        [
                            "A.sum(1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "possible_values": []
                }
            },
            "pow_494": {
                "input": {
                    "value": "d",
                    "possible_values": [
                        [
                            "A.sum(1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_535": {
                "tensors": {
                    "value": "g_feature",
                    "possible_values": [
                        [
                            "tuple([l(graph_nodes, x) for (l, x) in zip(self.graph, adj_list)])",
                            "Call"
                        ],
                        [
                            "self.norm(torch.cat(g_feature, 2)) + graph_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_136": {
                "tensors": {
                    "value": "(rnn_output.squeeze(0), context.squeeze(1))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_299": {
                "tensors": {
                    "value": "(ld, c)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_300": {
                "tensors": {
                    "value": "(ld, c)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "code/Graph2Tree/src/main.py": {
        "torch": {}
    },
    "code/Graph2Tree/src/train_and_evaluate.py": {
        "torch": {
            "is_available_16": {
                "variable": {
                    "value": "USE_CUDA",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "transpose_396": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_397": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_420": {
                "variable": {
                    "value": "all_decoder_outputs",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_target_length",
                    "possible_values": [
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "decoder_input.size(0)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "decoder.output_size",
                    "possible_values": []
                }
            },
            "unsqueeze_538": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_659": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_661": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_664": {
                "variable": {
                    "value": "padding_hidden",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_779": {
                "variable": {
                    "value": "all_node_outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_node_outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_810": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_822": {
                "variable": {
                    "value": "padding_hidden",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "transpose_984": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_986": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_988": {
                "variable": {
                    "value": "padding_hidden",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_1048": {
                "variable": {
                    "value": "all_node_outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_node_outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_1078": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_1087": {
                "variable": {
                    "value": "padding_hidden",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_440": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "decoder_input.size(0)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_567": {
                "variable": {
                    "value": "beam_scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "decoder.output_size * beam_len",
                    "possible_values": []
                }
            },
            "zeros_570": {
                "variable": {
                    "value": "all_hidden",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_len",
                    "possible_values": [
                        [
                            "len(beam_list)",
                            "Call"
                        ],
                        [
                            "len(beam_list)",
                            "Call"
                        ],
                        [
                            "beam_len - 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_size_0",
                    "possible_values": [
                        [
                            "decoder_hidden.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "hidden_size_2",
                    "possible_values": [
                        [
                            "decoder_hidden.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_745": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(op, num_score)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_1028": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(op, num_score)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "variable": {
                    "value": "beam_scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "decoder_input.size(0)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "decoder.output_size * beam_len",
                    "possible_values": []
                }
            },
            "zeros_448": {
                "variable": {
                    "value": "all_hidden",
                    "possible_values": []
                },
                "*size": {
                    "value": "decoder_hidden.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size * beam_len",
                    "possible_values": []
                },
                "dtype": {
                    "value": "decoder_hidden.size(2)",
                    "possible_values": []
                }
            },
            "zeros_449": {
                "variable": {
                    "value": "all_outputs",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_target_length",
                    "possible_values": [
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size * beam_len",
                    "possible_values": []
                },
                "dtype": {
                    "value": "decoder.output_size",
                    "possible_values": []
                }
            },
            "clip_grad_norm__522": {
                "parameters": {
                    "value": "encoder.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__523": {
                "parameters": {
                    "value": "decoder.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_593": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_output",
                    "possible_values": [
                        [
                            "decoder_output.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_903": {
                "tensors": {
                    "value": "(op, num_score)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_1137": {
                "tensors": {
                    "value": "(op, num_score)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_468": {
                "input": {
                    "value": "decoder_output",
                    "possible_values": [
                        [
                            "decoder_output.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "code/Graph2Tree/src/utils/helper.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(gpu_num) if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_93": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "possible_values": [
                        [
                            "os.path.join(model_path, '{}.pt'.format(ckpt))",
                            "Call"
                        ],
                        [
                            "ckpts[0]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "set_device_20": {
                "device": {
                    "value": "int(gpu_num)",
                    "possible_values": []
                }
            },
            "save_87": {
                "obj": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "possible_values": [
                        [
                            "os.path.join(model_path, '{}.pt'.format(ckpt))",
                            "Call"
                        ],
                        [
                            "ckpts[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "code/RNN_Seq2Seq/src/components/attention.py": {
        "torch": {
            "Dropout_61": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.concat",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.out",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "concat_input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_output, context)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "concat_output",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat(concat_input)",
                    "possible_values": []
                }
            },
            "log_softmax_95": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self.out(concat_output)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.attn",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "hidden * encoder_outputs",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "hidden * energy",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "self.v * energy",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "input": {
                    "value": "attn_energies",
                    "possible_values": [
                        [
                            "self.general_score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "attn_energies.t()",
                            "Call"
                        ],
                        [
                            "self.concat_score(hidden, encoder_outputs)",
                            "Call"
                        ],
                        [
                            "self.dot_score(hidden, encoder_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "GRU_63": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if self.nlayers == 1 else self.dropout",
                    "possible_values": []
                }
            },
            "LSTM_65": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if self.nlayers == 1 else self.dropout",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.attn",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.v",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, hidden_size)",
                    "possible_values": []
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "(hidden.expand(encoder_outputs.size(0), -1, -1), encoder_outputs)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "code/RNN_Seq2Seq/src/components/contextual_embeddings.py": {
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "token_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.bert_tokenizer.convert_tokens_to_ids(tokens) for tokens in padded_tokens]",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "token_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.roberta_tokenizer.convert_tokens_to_ids(tokens) for tokens in padded_tokens]",
                    "possible_values": []
                }
            }
        }
    },
    "code/RNN_Seq2Seq/src/components/decoder.py": {
        "torch": {
            "Dropout_27": {
                "variable": {
                    "value": "self.embedding_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.out",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self.embedding(input_step)",
                            "Call"
                        ],
                        [
                            "self.embedding_dropout(output)",
                            "Call"
                        ],
                        [
                            "output.view(1, input_step.size(0), self.embedding_size)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "output.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.out(output)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_58": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self.embedding(input_step)",
                            "Call"
                        ],
                        [
                            "self.embedding_dropout(output)",
                            "Call"
                        ],
                        [
                            "output.view(1, input_step.size(0), self.embedding_size)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "output.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.out(output)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LSTM_32": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.nlayers",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if nlayers == 1 else dropout",
                    "possible_values": []
                }
            },
            "GRU_34": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.nlayers",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if nlayers == 1 else dropout",
                    "possible_values": []
                }
            }
        }
    },
    "code/RNN_Seq2Seq/src/components/encoder.py": {
        "torch": {
            "pack_padded_sequence_64": {
                "variable": {
                    "value": "packed",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_seqs",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sorted_len",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_67": {
                "variable": {
                    "value": "(outputs, output_lengths)",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "outputs.index_select(1, orig_idx)",
                            "Call"
                        ],
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LSTM_32": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.nlayers",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if self.nlayers == 1 else dropout",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRU_37": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.nlayers",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if self.nlayers == 1 else dropout",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RNN_42": {
                "variable": {
                    "value": "self.rnn",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_size",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.nlayers",
                    "possible_values": []
                },
                "nonlinearity": {
                    "value": "tanh",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0 if self.nlayers == 1 else dropout",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "code/RNN_Seq2Seq/src/confidence_estimation.py": {
        "torch": {
            "cat_51": {
                "variable": {
                    "value": "keys_rep",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[model.bert(keys[i:min(i + 16, len(keys)),])[0][:, 0] for i in range(0, len(keys), 16)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "code/RNN_Seq2Seq/src/dataloader.py": {
        "torch": {}
    },
    "code/RNN_Seq2Seq/src/main.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "possible_values": [
                        [
                            "TextDataset(data_path=data_path, dataset=config.dataset, datatype='train', max_length=config.max_length, is_debug=config.debug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "val_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "possible_values": [
                        [
                            "TextDataset(data_path=data_path, dataset=config.dataset, datatype='dev', max_length=config.max_length, is_debug=config.debug, grade_info=config.grade_disp, type_info=config.type_disp, challenge_info=config.challenge_disp)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "config.seed",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "test_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "possible_values": [
                        [
                            "TextDataset(data_path=data_path, dataset=config.dataset, datatype='test', max_length=config.max_length, is_debug=config.debug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "tensor_320": {
                "variable": {
                    "value": "min_val_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "float('inf')",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "variable": {
                    "value": "min_train_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "float('inf')",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "min_val_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "float('inf')",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "min_train_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "float('inf')",
                    "possible_values": []
                }
            }
        }
    },
    "code/RNN_Seq2Seq/src/model.py": {
        "torch": {
            "Embedding_55": {
                "variable": {
                    "value": "self.embedding2",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.voc2.nwords",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.config.emb2_size",
                    "possible_values": []
                }
            },
            "NLLLoss_99": {
                "variable": {
                    "value": "self.criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_105": {
                "variable": {
                    "value": "weight_req",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.voc1.nwords",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.emb1_size",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "decoder_input",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.SOS_token for i in range(input_seq1.size(1))]",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "possible_values": []
                }
            },
            "tensor_224": {
                "variable": {
                    "value": "decoder_input",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.SOS_token for i in range(input_seq1.size(1))]",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "variable": {
                    "value": "decoder_input",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.SOS_token for i in range(input_seq1.size(1))]",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "Adadelta_132": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "possible_values": []
                }
            },
            "clip_grad_norm__202": {
                "parameters": {
                    "value": "self.params",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.config.max_grad_norm",
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_270": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ASGD_134": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "possible_values": []
                }
            },
            "SGD_136": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "possible_values": []
                }
            }
        }
    },
    "code/RNN_Seq2Seq/src/modelv2.py": {
        "torch": {
            "Embedding_44": {
                "variable": {
                    "value": "self.embedding2",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.voc2.nwords",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.config.emb2_size",
                    "possible_values": []
                }
            },
            "NLLLoss_92": {
                "variable": {
                    "value": "self.criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_98": {
                "variable": {
                    "value": "weight_req",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.voc1.nwords",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config.emb1_size",
                    "possible_values": []
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "decoder_input",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.SOS_token for i in range(input_seq1.size(1))]",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.encoder.parameters()}, {'params': self.decoder.parameters()}]",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "decoder_input",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.SOS_token for i in range(input_seq1.size(1))]",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "variable": {
                    "value": "decoder_input",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.SOS_token for i in range(input_seq1.size(1))]",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.embedding1.parameters(), 'lr': self.config.emb_lr}, {'params': self.encoder.parameters()}, {'params': self.decoder.parameters()}]",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "possible_values": []
                }
            },
            "clip_grad_norm__217": {
                "parameters": {
                    "value": "self.params",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.config.max_grad_norm",
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Embedding_55": {
                "variable": {
                    "value": "self.embedding1",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.voc1.nwords",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.config.emb1_size",
                    "possible_values": []
                }
            },
            "Adadelta_126": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.embedding1.parameters(), 'lr': self.config.emb_lr}, {'params': self.encoder.parameters()}, {'params': self.decoder.parameters()}]",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "possible_values": []
                }
            },
            "ASGD_133": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.embedding1.parameters(), 'lr': self.config.emb_lr}, {'params': self.encoder.parameters()}, {'params': self.decoder.parameters()}]",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "possible_values": []
                }
            },
            "SGD_140": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.embedding1.parameters(), 'lr': self.config.emb_lr}, {'params': self.encoder.parameters()}, {'params': self.decoder.parameters()}]",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "possible_values": []
                }
            }
        }
    },
    "code/RNN_Seq2Seq/src/utils/helper.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(gpu_num) if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "load_72": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "possible_values": [
                        [
                            "os.path.join(model_path, '{}.pt'.format(ckpt))",
                            "Call"
                        ],
                        [
                            "ckpts[0]",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "set_device_18": {
                "device": {
                    "value": "int(gpu_num)",
                    "possible_values": []
                }
            },
            "save_41": {
                "obj": {
                    "value": "state",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "possible_values": [
                        [
                            "os.path.join(model_path, '{}.pt'.format(ckpt))",
                            "Call"
                        ],
                        [
                            "ckpts[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "code/RNN_Seq2Seq/src/utils/sentence_processing.py": {
        "torch": {
            "transpose_114": {
                "variable": {
                    "value": "sent1_var",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_115": {
                "variable": {
                    "value": "sent2_var",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "indexes",
                    "possible_values": [
                        [
                            "sent_to_idx(voc, sentence, max_length)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}