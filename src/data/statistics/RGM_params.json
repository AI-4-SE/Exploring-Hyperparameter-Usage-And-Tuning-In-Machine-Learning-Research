{
    "data/data_transform_realdata.py": {
        "sklearn": {
            "NearestNeighbors_383": {
                "variable": {
                    "value": "neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "data/data_transform_realdata_creat.py": {
        "sklearn": {
            "NearestNeighbors_384": {
                "variable": {
                    "value": "neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "data/data_transform_syndata.py": {
        "sklearn": {
            "NearestNeighbors_371": {
                "variable": {
                    "value": "neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "data/data_loader.py": {
        "torch": {
            "DataLoader_603": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.DATASET.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATALOADER_NUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_302": {
                "data": {
                    "value": "sample['perm_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_306": {
                "data": {
                    "value": "sample['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "data": {
                    "value": "sample['perm_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_394": {
                "data": {
                    "value": "sample['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_493": {
                "data": {
                    "value": "sample['perm_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_497": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_301": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_388": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_491": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_492": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_554": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "next(it)",
                            "Call"
                        ],
                        [
                            "next(it)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_pattern",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros(2 * len(max_shape), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "tuple(pad_pattern.tolist())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_572": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pad_tensor(inp)",
                            "Call"
                        ],
                        [
                            "pad_tensor([torch.from_numpy(x) for x in inp])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_575": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pad_tensor(inp)",
                            "Call"
                        ],
                        [
                            "pad_tensor([torch.from_numpy(x) for x in inp])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_574": {
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "data/data_loader_creatrealdata.py": {
        "torch": {
            "DataLoader_603": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.DATASET.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.DATALOADER_NUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_301": {
                "data": {
                    "value": "sample['perm_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "data": {
                    "value": "sample['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "data": {
                    "value": "sample['perm_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_393": {
                "data": {
                    "value": "sample['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_492": {
                "data": {
                    "value": "sample['perm_mat'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_496": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_299": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_387": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_388": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_490": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_491": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_554": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "next(it)",
                            "Call"
                        ],
                        [
                            "next(it)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad_pattern",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros(2 * len(max_shape), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "tuple(pad_pattern.tolist())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_572": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pad_tensor(inp)",
                            "Call"
                        ],
                        [
                            "pad_tensor([torch.from_numpy(x) for x in inp])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_575": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pad_tensor(inp)",
                            "Call"
                        ],
                        [
                            "pad_tensor([torch.from_numpy(x) for x in inp])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_574": {
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "device_180": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "Label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[_ for _ in inputs['label']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "manual_seed_168": {
                "seed": {
                    "value": "cfg.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_59": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "permevalloss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bmm_137": {
                "input": {
                    "value": "P1_gt_copy[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "R_pre.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/Net.py": {
        "torch": {
            "ZeroPad2d_32": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_35": {
                "variable": {
                    "value": "log_alpha_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_alpha_padded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zero_pad(log_alpha[:, None, :, :])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(log_alpha_padded, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((log_alpha_padded[:, :-1, :] - torch.logsumexp(log_alpha_padded[:, :-1, :], dim=2, keepdim=True), log_alpha_padded[:, -1, None, :]), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((log_alpha_padded[:, :, :-1] - torch.logsumexp(log_alpha_padded[:, :, :-1], dim=1, keepdim=True), log_alpha_padded[:, :, -1, None]), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "log_alpha_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_alpha_padded[:, :-1, :] - torch.logsumexp(log_alpha_padded[:, :-1, :], dim=2, keepdim=True), log_alpha_padded[:, -1, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "log_alpha_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_alpha_padded[:, :, :-1] - torch.logsumexp(log_alpha_padded[:, :, :-1], dim=1, keepdim=True), log_alpha_padded[:, :, -1, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_124": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sinkhorn_rpm(s, n_iters=20, slack=cfg.PGM.SKADDCR)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_134": {
                "variable": {
                    "value": "srcinlier_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "affinity(emb_src, emb_tgt)",
                            "Call"
                        ],
                        [
                            "InstNorm_layer(s[:, None, :, :]).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_55": {
                "variable": {
                    "value": "prev_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_alpha_padded[:, :-1, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clone_55": {
                "variable": {
                    "value": "prev_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_71": {
                "variable": {
                    "value": "prev_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_alpha",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha_padded[:, :-1, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clone_71": {
                "variable": {
                    "value": "prev_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "(Node_src, Edge_src)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_100": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "(Node_tgt, Edge_tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_101": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "A_src1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_src",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(src_embedding.transpose(2, 1).contiguous(), src_embedding) / math.sqrt(d_k)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "A_tgt1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_tgt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(tgt_embedding.transpose(2, 1).contiguous(), tgt_embedding) / math.sqrt(d_k)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_52": {
                "variable": {
                    "value": "abs_dev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(log_alpha_padded[:, :-1, :-1]) - prev_alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_61": {
                "input": {
                    "value": "log_alpha",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha_padded[:, :-1, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_64": {
                "input": {
                    "value": "log_alpha",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha_padded[:, :-1, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_68": {
                "variable": {
                    "value": "abs_dev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(log_alpha) - prev_alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_91": {
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "affinity(emb_src, emb_tgt)",
                            "Call"
                        ],
                        [
                            "InstNorm_layer(s[:, None, :, :]).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "cfg.PGM.GNN_FEAT * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.PGM.GNN_FEAT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "input": {
                    "value": "src_embedding.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "src_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "input": {
                    "value": "tgt_embedding.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "tgt_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_128": {
                "tensors": {
                    "value": "(emb_src, torch.bmm(s, emb_tgt))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(emb_tgt, torch.bmm(s.transpose(1, 2), emb_src))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_40": {
                "input": {
                    "value": "log_alpha_padded[:, :-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_46": {
                "input": {
                    "value": "log_alpha_padded[:, :, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_53": {
                "input": {
                    "value": "torch.sum(abs_dev, dim=[1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_69": {
                "input": {
                    "value": "torch.sum(abs_dev, dim=[1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_52": {
                "input": {
                    "value": "log_alpha_padded[:, :-1, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "abs_dev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(torch.exp(log_alpha) - prev_alpha)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.exp(log_alpha_padded[:, :-1, :-1]) - prev_alpha)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_68": {
                "input": {
                    "value": "log_alpha",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha_padded[:, :-1, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_69": {
                "input": {
                    "value": "abs_dev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(torch.exp(log_alpha) - prev_alpha)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.exp(log_alpha_padded[:, :-1, :-1]) - prev_alpha)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bmm_128": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "affinity(emb_src, emb_tgt)",
                            "Call"
                        ],
                        [
                            "InstNorm_layer(s[:, None, :, :]).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_s)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "emb_tgt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb2_new",
                            "Name"
                        ]
                    ]
                }
            },
            "bmm_129": {
                "input": {
                    "value": "s.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "emb_src",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb1_new",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "models/Net_noais.py": {
        "torch": {
            "ZeroPad2d_60": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "variable": {
                    "value": "log_alpha_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_alpha_padded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zero_pad(log_alpha[:, None, :, :])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(log_alpha_padded, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((log_alpha_padded[:, :-1, :] - torch.logsumexp(log_alpha_padded[:, :-1, :], dim=2, keepdim=True), log_alpha_padded[:, -1, None, :]), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((log_alpha_padded[:, :, :-1] - torch.logsumexp(log_alpha_padded[:, :, :-1], dim=1, keepdim=True), log_alpha_padded[:, :, -1, None]), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.key_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_110": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_113": {
                "variable": {
                    "value": "y_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y_avg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.key_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_127": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "y_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y_avg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_143": {
                "variable": {
                    "value": "self.key_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_144": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_147": {
                "variable": {
                    "value": "y_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y_avg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_151": {
                "variable": {
                    "value": "atweight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_152": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atweight",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.mean(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.max(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(self.softmax(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(dist_s, dim=-1, keepdim=True).values",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "atweight.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.key_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_162": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_168": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atweight",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.mean(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.max(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(self.softmax(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(dist_s, dim=-1, keepdim=True).values",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "atweight.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.key_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_178": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_184": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atweight",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.mean(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.max(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(self.softmax(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(dist_s, dim=-1, keepdim=True).values",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "atweight.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_214": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.key_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_216": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_223": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atweight",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.mean(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.max(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(self.softmax(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(dist_s, dim=-1, keepdim=True).values",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "atweight.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_232": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_239": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atweight",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.mean(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.max(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(self.softmax(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(dist_s, dim=-1, keepdim=True).values",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "atweight.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_248": {
                "variable": {
                    "value": "self.instnorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_256": {
                "variable": {
                    "value": "dist_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_dist_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sinkhorn_rpm(dist_s, n_iters=20, slack=cfg.PGM.SKADDCR)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_258": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atweight",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.mean(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.max(self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(self.softmax(torch.einsum('bqf,bkf->bqk', queries, keys)), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(torch.exp(-1 * dist), dim=-1, keepdim=True).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(dist_s, dim=-1, keepdim=True).values",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "atweight.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.key_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_268": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_269": {
                "variable": {
                    "value": "self.query_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.key_w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_271": {
                "variable": {
                    "value": "self.softmax1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_277": {
                "variable": {
                    "value": "y_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.softmax1(torch.sum(torch.einsum('bqf,bkf->bqk', queries1, keys1), dim=-2, keepdim=True))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y_avg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.key_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_292": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_307": {
                "variable": {
                    "value": "self.query_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_308": {
                "variable": {
                    "value": "self.key_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.key_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_309": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "log_alpha_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_alpha_padded[:, :-1, :] - torch.logsumexp(log_alpha_padded[:, :-1, :], dim=2, keepdim=True), log_alpha_padded[:, -1, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "log_alpha_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_alpha_padded[:, :, :-1] - torch.logsumexp(log_alpha_padded[:, :, :-1], dim=1, keepdim=True), log_alpha_padded[:, :, -1, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_204": {
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "dst.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_205": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_206": {
                "input": {
                    "value": "dst ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_565": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sinkhorn_rpm(s, n_iters=20, slack=cfg.PGM.SKADDCR)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_585": {
                "variable": {
                    "value": "srcinlier_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "affinity(emb_src, emb_tgt)",
                            "Call"
                        ],
                        [
                            "InstNorm_layer(s[:, None, :, :]).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "compute_affinity(featmatch)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_591": {
                "input": {
                    "value": "torch.isnan(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_83": {
                "variable": {
                    "value": "prev_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_alpha_padded[:, :-1, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clone_83": {
                "variable": {
                    "value": "prev_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_99": {
                "variable": {
                    "value": "prev_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_alpha",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha_padded[:, :-1, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clone_99": {
                "variable": {
                    "value": "prev_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_117": {
                "equation": {
                    "value": "bqf,bkf->bqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "queries",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_134": {
                "equation": {
                    "value": "bqf,bkf->bqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "queries",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_167": {
                "input": {
                    "value": "self.sigmoid(torch.einsum('bqf,bkf->bqk', queries, keys))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_183": {
                "input": {
                    "value": "self.softmax(torch.einsum('bqf,bkf->bqk', queries, keys))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_222": {
                "input": {
                    "value": "torch.exp(-1 * dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_238": {
                "input": {
                    "value": "torch.exp(-1 * dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_257": {
                "input": {
                    "value": "dist_s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.instnorm(torch.exp(-1 * dist)[:, None, :, :]).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_dist_s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_276": {
                "input": {
                    "value": "torch.einsum('bqf,bkf->bqk', queries1, keys1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_282": {
                "equation": {
                    "value": "bqf,bkf->bqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "queries",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_299": {
                "equation": {
                    "value": "bqf,bkf->bqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "queries",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_315": {
                "equation": {
                    "value": "bqf,bkf->bqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "queries",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_428": {
                "tensors": {
                    "value": "(Node_src, Edge_src)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_428": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_429": {
                "tensors": {
                    "value": "(Node_tgt, Edge_tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_429": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_591": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "affinity(emb_src, emb_tgt)",
                            "Call"
                        ],
                        [
                            "InstNorm_layer(s[:, None, :, :]).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "compute_affinity(featmatch)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_80": {
                "variable": {
                    "value": "abs_dev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(log_alpha_padded[:, :-1, :-1]) - prev_alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_89": {
                "input": {
                    "value": "log_alpha",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha_padded[:, :-1, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_92": {
                "input": {
                    "value": "log_alpha",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha_padded[:, :-1, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_96": {
                "variable": {
                    "value": "abs_dev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(log_alpha) - prev_alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_151": {
                "equation": {
                    "value": "bqf,bkf->bqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "queries",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_222": {
                "input": {
                    "value": "-1 * dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_238": {
                "input": {
                    "value": "-1 * dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_276": {
                "equation": {
                    "value": "bqf,bkf->bqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "queries1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_w1(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_413": {
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_586": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "affinity(emb_src, emb_tgt)",
                            "Call"
                        ],
                        [
                            "InstNorm_layer(s[:, None, :, :]).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "compute_affinity(featmatch)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_167": {
                "equation": {
                    "value": "bqf,bkf->bqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "queries",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_183": {
                "equation": {
                    "value": "bqf,bkf->bqk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "queries",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ],
                        [
                            "self.query_w(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_415": {
                "in_features": {
                    "value": "cfg.PGM.GNN_FEAT * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.PGM.GNN_FEAT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_458": {
                "variable": {
                    "value": "A_src1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_src",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(src_embedding.transpose(2, 1).contiguous(), src_embedding) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(src_embedding.transpose(2, 1).contiguous(), src_embedding) / math.sqrt(d_ksrc)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_459": {
                "variable": {
                    "value": "A_tgt1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_tgt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(tgt_embedding.transpose(2, 1).contiguous(), tgt_embedding) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(tgt_embedding.transpose(2, 1).contiguous(), tgt_embedding) / math.sqrt(d_ktgt)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_569": {
                "tensors": {
                    "value": "(emb_src, torch.bmm(s, emb_tgt))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_570": {
                "tensors": {
                    "value": "(emb_tgt, torch.bmm(s.transpose(1, 2), emb_src))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_68": {
                "input": {
                    "value": "log_alpha_padded[:, :-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_74": {
                "input": {
                    "value": "log_alpha_padded[:, :, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_81": {
                "input": {
                    "value": "torch.sum(abs_dev, dim=[1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_97": {
                "input": {
                    "value": "torch.sum(abs_dev, dim=[1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_254": {
                "input": {
                    "value": "-1 * dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_470": {
                "variable": {
                    "value": "A_src1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_src",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(src_embedding.transpose(2, 1).contiguous(), src_embedding) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(src_embedding.transpose(2, 1).contiguous(), src_embedding) / math.sqrt(d_ksrc)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_471": {
                "variable": {
                    "value": "A_tgt1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_tgt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(tgt_embedding.transpose(2, 1).contiguous(), tgt_embedding) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(tgt_embedding.transpose(2, 1).contiguous(), tgt_embedding) / math.sqrt(d_ktgt)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_80": {
                "input": {
                    "value": "log_alpha_padded[:, :-1, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "abs_dev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(torch.exp(log_alpha) - prev_alpha)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.exp(log_alpha_padded[:, :-1, :-1]) - prev_alpha)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_96": {
                "input": {
                    "value": "log_alpha",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha - torch.logsumexp(log_alpha, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "log_alpha_padded[:, :-1, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_97": {
                "input": {
                    "value": "abs_dev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.abs(torch.exp(log_alpha) - prev_alpha)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.exp(log_alpha_padded[:, :-1, :-1]) - prev_alpha)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_444": {
                "tensors": {
                    "value": "(Node_src1, Edge_src1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_444": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_445": {
                "tensors": {
                    "value": "(Node_tgt1, Edge_tgt1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_445": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_456": {
                "input": {
                    "value": "src_embedding.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "src_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_457": {
                "input": {
                    "value": "tgt_embedding.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "tgt_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_569": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "affinity(emb_src, emb_tgt)",
                            "Call"
                        ],
                        [
                            "InstNorm_layer(s[:, None, :, :]).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "compute_affinity(featmatch)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_s)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "emb_tgt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb2_new",
                            "Name"
                        ]
                    ]
                }
            },
            "bmm_570": {
                "input": {
                    "value": "s.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "emb_src",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "emb1_new",
                            "Name"
                        ]
                    ]
                }
            },
            "matmul_468": {
                "input": {
                    "value": "src_embedding.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "src_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_469": {
                "input": {
                    "value": "tgt_embedding.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "tgt_embedding",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_515": {
                "tensors": {
                    "value": "(Node_src1, Edge_src1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_515": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_516": {
                "tensors": {
                    "value": "(Node_tgt1, Edge_tgt1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_516": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_529": {
                "tensors": {
                    "value": "(Node_src1, Edge_src1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_529": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_530": {
                "tensors": {
                    "value": "(Node_tgt1, Edge_tgt1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_530": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/affinity_layer.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(self.d, self.d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "(self.A + self.A.transpose(0, 1).contiguous()) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(X, (self.A + self.A.transpose(0, 1).contiguous()) / 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(M, Y.transpose(1, 2).contiguous())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Y.transpose(1, 2).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_25": {
                "n": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/correspondSlover.py": {
        "torch": {
            "sum_51": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_perm_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_53": {
                "variable": {
                    "value": "centroid_src_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_o * weights_normalized",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_54": {
                "variable": {
                    "value": "centroid_tgt_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_o * weights_normalized",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "svd_61": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src_o_centered.transpose(-2, -1) @ (tgt_o_centered * weights_normalized)",
                            "BinOp"
                        ]
                    ]
                },
                "some": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "compute_uv": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_66": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.det(rot_mat_pos)[:, None, None] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "rot_mat_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v @ u.transpose(-1, -2)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "rot_mat_neg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v_neg @ u.transpose(-1, -2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_86": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_perm_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_87": {
                "variable": {
                    "value": "weights_inlier",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "weights == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(s_perm_mat.shape[0], 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(s_perm_mat.shape[0], 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_96": {
                "variable": {
                    "value": "s_perm_mat_re",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_perm_mat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(emb_dims * 2, emb_dims // 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.proj_rot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dims // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.proj_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dims // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_embedding, tgt_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_67": {
                "input": {
                    "value": "torch.det(R) > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "R[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "reg_result.transformation[:3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "emb_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dims // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_18": {
                "num_features": {
                    "value": "emb_dims // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "emb_dims // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dims // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "num_features": {
                    "value": "emb_dims // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "emb_dims // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dims // 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "num_features": {
                    "value": "emb_dims // 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_35": {
                "input": {
                    "value": "rotation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.proj_rot(embedding)",
                            "Call"
                        ],
                        [
                            "rotation / torch.norm(rotation, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "weights[..., None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "det_67": {
                "input": {
                    "value": "R",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(torch.det(rot_mat_pos)[:, None, None] > 0, rot_mat_pos, rot_mat_neg)",
                            "Call"
                        ],
                        [
                            "torch.zeros((s_perm_mat.shape[0], 3, 3)).to(s_perm_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "det_66": {
                "input": {
                    "value": "rot_mat_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v @ u.transpose(-1, -2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "ndarray": {
                    "value": "reg_result.transformation[:3, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/dgcnn.py": {
        "torch": {
            "sum_34": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "cross_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v1[..., 1] * v2[..., 2] - v1[..., 2] * v2[..., 1], v1[..., 2] * v2[..., 0] - v1[..., 0] * v2[..., 2], v1[..., 0] * v2[..., 1] - v1[..., 1] * v2[..., 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_59": {
                "variable": {
                    "value": "cross_prod_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cross_prod",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([v1[..., 1] * v2[..., 2] - v1[..., 2] * v2[..., 1], v1[..., 2] * v2[..., 0] - v1[..., 0] * v2[..., 2], v1[..., 0] * v2[..., 1] - v1[..., 1] * v2[..., 0]], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "dot_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1 * v2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, xyz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_211": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atan2_62": {
                "input": {
                    "value": "cross_prod_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(cross_prod, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "dot_prod",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(v1 * v2, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_89": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, neighbor_gxyz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, neighbor_lxyz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_110": {
                "variable": {
                    "value": "d_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbor_lxyz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "neighbor_gxyz - xyz",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "ppf_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[nr_d, ni_d, nr_ni, d_norm]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, ppf_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_116": {
                "variable": {
                    "value": "neighbor_gxyz_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbor_gxyz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "xyz.view(batch_size * num_points, -1)[idx, :]",
                            "Subscript"
                        ],
                        [
                            "neighbor_gxyz.view(batch_size, num_points, k, num_dims)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_120": {
                "variable": {
                    "value": "nrnc_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nrnc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "neighbor_gxyz_center - xyz",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_121": {
                "variable": {
                    "value": "ncni_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ncni",
                    "type": "Name",
                    "possible_values": [
                        [
                            "neighbor_gxyz - neighbor_gxyz_center",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_122": {
                "variable": {
                    "value": "ninr_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ninr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "xyz - neighbor_gxyz",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "pcf_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[nrnc_norm, ncni_norm, ninr_norm, nr_angle, nc_angle, ni_angle]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, pcf_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "raw_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum([_raw_features_sizes[f] for f in self.features])",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "emb_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_150": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_152": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "emb_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_161": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_167": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "x_edge",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_185": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "emb_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_186": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_187": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_188": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_189": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_196": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_198": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_200": {
                "variable": {
                    "value": "x_inlier",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_200": {
                "variable": {
                    "value": "x_inlier",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_228": {
                "variable": {
                    "value": "self.conv00",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "emb_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "emb_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_229": {
                "variable": {
                    "value": "self.conv01",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "emb_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "emb_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_230": {
                "variable": {
                    "value": "self.bn00",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "emb_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_231": {
                "variable": {
                    "value": "self.bn01",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "emb_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_232": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "emb_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_233": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_234": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_235": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_236": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_243": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn00(self.conv00(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_244": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn01(self.conv01(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_248": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_250": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_252": {
                "variable": {
                    "value": "x_inlier",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_252": {
                "variable": {
                    "value": "x_inlier",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_263": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "emb_dims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_264": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_265": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_266": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_267": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_273": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_275": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_277": {
                "variable": {
                    "value": "x_inlier",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_277": {
                "variable": {
                    "value": "x_inlier",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "self.prepool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(emb_dims + 1, 1024, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_293": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "variable": {
                    "value": "self.postpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_307": {
                "variable": {
                    "value": "src_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_308": {
                "variable": {
                    "value": "ref_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "concatenated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src_padded, ref_padded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_312": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pooling(prepool_feat)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_316": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_weights[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_24": {
                "input": {
                    "value": "src.transpose(1, 0).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "dst",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "src ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "input": {
                    "value": "x.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_graph_feature(xyz, self.features, self.neighboursnum)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "get_graph_feature_cross(x, y)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, y), dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_72": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_203": {
                "input": {
                    "value": "torch.isnan(x_inlier)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "input": {
                    "value": "x.transpose(2, 1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn00(self.conv00(y)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn01(self.conv01(y)))",
                            "Call"
                        ],
                        [
                            "torch.max(y, dim=2, keepdim=True)[0].repeat(1, 1, num_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_255": {
                "input": {
                    "value": "torch.isnan(x_inlier)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_280": {
                "input": {
                    "value": "torch.isnan(x_inlier)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_203": {
                "input": {
                    "value": "x_inlier",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.conv3(x)).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.conv3(x)).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.conv3(x)).permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_255": {
                "input": {
                    "value": "x_inlier",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.conv3(x)).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.conv3(x)).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.conv3(x)).permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_280": {
                "input": {
                    "value": "x_inlier",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.conv3(x)).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.conv3(x)).permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.conv3(x)).permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_289": {
                "in_channels": {
                    "value": "emb_dims + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_290": {
                "num_groups": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_295": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_299": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_303": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_25": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_245": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn00(self.conv00(y)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn01(self.conv01(y)))",
                            "Call"
                        ],
                        [
                            "torch.max(y, dim=2, keepdim=True)[0].repeat(1, 1, num_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/gconv.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.a_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.u_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_19": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(A, p=1, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_23": {
                "input": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(A, p=1, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "F.relu(ax)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_23": {
                "input": {
                    "value": "ax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.a_fc(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/transformer.py": {
        "torch": {
            "softmax_24": {
                "variable": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1).contiguous()) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_16": {
                "modules": {
                    "value": "[copy.deepcopy(module) for _ in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(emb_dims, emb_dims // 2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.proj_rot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dims // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.proj_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dims // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_198": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_21": {
                "input": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "key.transpose(-2, -1).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "input": {
                    "value": "p_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "emb_dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dims // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_58": {
                "num_features": {
                    "value": "emb_dims // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "emb_dims // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dims // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "num_features": {
                    "value": "emb_dims // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "emb_dims // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dims // 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_64": {
                "num_features": {
                    "value": "emb_dims // 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_73": {
                "input": {
                    "value": "rotation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.proj_rot(x)",
                            "Call"
                        ],
                        [
                            "rotation / torch.norm(rotation, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_202": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_202": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "parallel/data_parallel.py": {
        "torch": {}
    },
    "parallel/scatter_gather.py": {
        "torch": {
            "device_54": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "sparse_torch/csx_matrix.py": {
        "torch": {
            "load_8": {
                "variable": {
                    "value": "sparse_dot",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sparse_dot",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "['extension/sparse_dot/sparse_dot.cpp', 'extension/sparse_dot/csr_dot_csc_cuda.cu', 'extension/sparse_dot/csr_dot_diag_cuda.cu']",
                    "type": "List",
                    "possible_values": []
                },
                "extra_include_paths": {
                    "value": "['/usr/include/python{}.{}/'.format(sys.version_info.major, sys.version_info.minor)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_437": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indices",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indices)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_438": {
                "variable": {
                    "value": "indptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indptr",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indptr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indptr)",
                            "Call"
                        ],
                        [
                            "self.indptr[start_idx:end_idx].clone()",
                            "Call"
                        ],
                        [
                            "indptr - indptr[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_439": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data)",
                            "Call"
                        ],
                        [
                            "self.data[indptr[0]:indptr[-1]].clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_394": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "indices_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "mats[0].device if device is None else device",
                            "IfExp"
                        ],
                        [
                            "ind.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "indptr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "mats[0].device if device is None else device",
                            "IfExp"
                        ],
                        [
                            "ind.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "data_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data)",
                            "Call"
                        ],
                        [
                            "self.data[indptr[0]:indptr[-1]].clone()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "mats[0].device if device is None else device",
                            "IfExp"
                        ],
                        [
                            "ind.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_116": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indices",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indices)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "indptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indptr",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indptr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(indptr)",
                            "Call"
                        ],
                        [
                            "self.indptr[start_idx:end_idx].clone()",
                            "Call"
                        ],
                        [
                            "indptr - indptr[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_118": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(data)",
                            "Call"
                        ],
                        [
                            "self.data[indptr[0]:indptr[-1]].clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_448": {
                "input": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "MultiStepLR_58": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=cfg.TRAIN.LR, momentum=cfg.TRAIN.MOMENTUM, nesterov=True)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=cfg.TRAIN.LR, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "cfg.TRAIN.LR_STEP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "cfg.TRAIN.LR_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "cfg.TRAIN.START_EPOCH - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_222": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_199": {
                "seed": {
                    "value": "cfg.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_229": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_231": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_136": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(checkpoint_path / 'optim_{:04}.pt'.format(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_56": {
                "f": {
                    "value": "optim_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "str(checkpoint_path / 'optim_{:04}.pt'.format(start_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_90": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/build_graphs.py": {
        "torch": {}
    },
    "utils/dcputil.py": {
        "torch": {
            "stack_27": {
                "variable": {
                    "value": "rotMat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w2 + x2 - y2 - z2, 2 * xy - 2 * wz, 2 * wy + 2 * xz, 2 * wz + 2 * xy, w2 - x2 + y2 - z2, 2 * yz - 2 * wx, 2 * xz - 2 * wy, 2 * wx + 2 * yz, w2 - x2 - y2 + z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "rotMat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": [
                        [
                            "quat.size(0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "concatenated",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([r_ab, t_ab], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/draw_figures.py": {
        "torch": {}
    },
    "utils/evaluation_metric.py": {
        "torch": {
            "argmax_36": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perm_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_num",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pmat_pred.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "x_gt.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "match_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "thresh_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dist_threshs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "total_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "thresh_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dist_threshs.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "pmat_pred.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_101": {
                "variable": {
                    "value": "pc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc2_gt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_123": {
                "variable": {
                    "value": "re_R",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initR",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_124": {
                "variable": {
                    "value": "re_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_133": {
                "variable": {
                    "value": "final_R",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "re_R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(initR)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "initR",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_159": {
                "variable": {
                    "value": "t_mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(T_gt - T_pre) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_160": {
                "variable": {
                    "value": "t_mae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(T_gt - T_pre)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "P1_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "transform(torch.cat((R_pre, T_pre[:, :, None]), dim=2).detach().cpu().numpy(), P1_gt.detach().cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_180": {
                "variable": {
                    "value": "P1_pre_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "transform(torch.cat((R_pre, T_pre[:, :, None]), dim=2).detach().cpu().numpy(), P1_gt.detach().cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "P1_gt_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "transform(torch.cat((R_gt, T_gt[:, :, None]), dim=2).detach().cpu().numpy(), P1_gt.detach().cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_185": {
                "variable": {
                    "value": "presrc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_src",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.min(square_distance(P1_transformed, P2_gt), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(square_distance(P1_pre_trans, P1_gt_trans), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P1_transformed, P2_gt)), dim=-1)[0], clip_val)",
                            "Call"
                        ],
                        [
                            "torch.min(square_distance(P1_transformed, P2_gt), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(square_distance(P1_pre_trans, P1_gt_trans), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P1_transformed, P2_gt)), dim=-1)[0], clip_val)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_188": {
                "variable": {
                    "value": "clip_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_189": {
                "variable": {
                    "value": "P1_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "transform(torch.cat((R_pre, T_pre[:, :, None]), dim=2).detach().cpu().numpy(), P1_gt.detach().cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_191": {
                "input": {
                    "value": "torch.sqrt(square_distance(P1_transformed, P2_gt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_192": {
                "input": {
                    "value": "torch.sqrt(square_distance(P2_gt, P1_transformed))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_201": {
                "variable": {
                    "value": "correspond_dis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((P1_gt_trans_corr - P2_gt_copy_coor) ** 2, dim=-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_228": {
                "variable": {
                    "value": "t_mse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(T_gt - T_pre) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_229": {
                "variable": {
                    "value": "t_mae",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(T_gt - T_pre)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_242": {
                "variable": {
                    "value": "P1_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "transform(torch.cat((R_pre, T_pre[:, :, None]), dim=2).detach().cpu().numpy(), P1_gt.detach().cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_248": {
                "variable": {
                    "value": "P1_pre_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "transform(torch.cat((R_pre, T_pre[:, :, None]), dim=2).detach().cpu().numpy(), P1_gt.detach().cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "variable": {
                    "value": "P1_gt_trans",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "transform(torch.cat((R_gt, T_gt[:, :, None]), dim=2).detach().cpu().numpy(), P1_gt.detach().cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_253": {
                "variable": {
                    "value": "presrc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_src",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.min(square_distance(P1_transformed, P2_gt), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(square_distance(P1_pre_trans, P1_gt_trans), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P1_transformed, P2_gt)), dim=-1)[0], clip_val)",
                            "Call"
                        ],
                        [
                            "torch.min(square_distance(P1_transformed, P2_gt), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(square_distance(P1_pre_trans, P1_gt_trans), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P1_transformed, P2_gt)), dim=-1)[0], clip_val)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_256": {
                "variable": {
                    "value": "clip_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "variable": {
                    "value": "P1_transformed",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "transform(torch.cat((R_pre, T_pre[:, :, None]), dim=2).detach().cpu().numpy(), P1_gt.detach().cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_259": {
                "input": {
                    "value": "torch.sqrt(square_distance(P1_transformed, P2_gt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_260": {
                "input": {
                    "value": "torch.sqrt(square_distance(P2_gt, P1_transformed))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "all_67": {
                "input": {
                    "value": "(pmat_pred == 0) + (pmat_pred == 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_68": {
                "input": {
                    "value": "(pmat_gt == 0) + (pmat_gt == 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_104": {
                "variable": {
                    "value": "pmat_predi_index1",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pmat_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "(src[:, :, None, :] - dst[:, None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "re_R[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "filterregresult.transformation[:3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "variable": {
                    "value": "re_t[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "filterregresult.transformation[:3, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_144": {
                "variable": {
                    "value": "R_pre",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "m": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "variable": {
                    "value": "T_pre",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T_gt",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_69": {
                "input": {
                    "value": "torch.sum(pmat_pred, dim=-2) <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_70": {
                "input": {
                    "value": "torch.sum(pmat_gt, dim=-2) <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "(initR, initt[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_160": {
                "input": {
                    "value": "T_gt - T_pre",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_175": {
                "input": {
                    "value": "square_distance(P1_transformed, P2_gt)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_176": {
                "input": {
                    "value": "square_distance(P2_gt, P1_transformed)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_177": {
                "input": {
                    "value": "dist_ref",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.min(square_distance(P2_gt, P1_transformed), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P2_gt, P1_transformed)), dim=-1)[0], clip_val)",
                            "Call"
                        ],
                        [
                            "torch.min(square_distance(P2_gt, P1_transformed), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P2_gt, P1_transformed)), dim=-1)[0], clip_val)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_184": {
                "input": {
                    "value": "square_distance(P1_pre_trans, P1_gt_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_193": {
                "input": {
                    "value": "dist_ref",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.min(square_distance(P2_gt, P1_transformed), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P2_gt, P1_transformed)), dim=-1)[0], clip_val)",
                            "Call"
                        ],
                        [
                            "torch.min(square_distance(P2_gt, P1_transformed), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P2_gt, P1_transformed)), dim=-1)[0], clip_val)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_197": {
                "input": {
                    "value": "s_perm_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_201": {
                "input": {
                    "value": "(P1_gt_trans_corr - P2_gt_copy_coor) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_229": {
                "input": {
                    "value": "T_gt - T_pre",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_244": {
                "input": {
                    "value": "square_distance(P1_transformed, P2_gt)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_245": {
                "input": {
                    "value": "square_distance(P2_gt, P1_transformed)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_246": {
                "input": {
                    "value": "dist_ref",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.min(square_distance(P2_gt, P1_transformed), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P2_gt, P1_transformed)), dim=-1)[0], clip_val)",
                            "Call"
                        ],
                        [
                            "torch.min(square_distance(P2_gt, P1_transformed), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P2_gt, P1_transformed)), dim=-1)[0], clip_val)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_252": {
                "input": {
                    "value": "square_distance(P1_pre_trans, P1_gt_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_261": {
                "input": {
                    "value": "dist_ref",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.min(square_distance(P2_gt, P1_transformed), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P2_gt, P1_transformed)), dim=-1)[0], clip_val)",
                            "Call"
                        ],
                        [
                            "torch.min(square_distance(P2_gt, P1_transformed), dim=-1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.min(torch.min(torch.sqrt(square_distance(P2_gt, P1_transformed)), dim=-1)[0], clip_val)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_41": {
                "input": {
                    "value": "x_correspond - x_gt[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "matches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(dist[b] < dist_threshs[b, idx])[0:ns[b]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_84": {
                "input": {
                    "value": "pmat_pred[b, :ns[b]] * pmat_gt[b, :ns[b]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "pmat_gt[b, :ns[b]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "pmat_pred[b, :ns[b]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_105": {
                "condition": {
                    "value": "torch.sum(pmat_pred[i], dim=0) == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_106": {
                "condition": {
                    "value": "torch.sum(pmat_pred[i], dim=1) == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "acos_168": {
                "input": {
                    "value": "torch.clamp(0.5 * (rot_trace - 1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_237": {
                "input": {
                    "value": "torch.clamp(0.5 * (rot_trace - 1), min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "pmat_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_70": {
                "input": {
                    "value": "pmat_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pmat_gt.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "(pmat_predi_index1[0], pmat_predi_index01)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "(pmat_predi_index1[1], pmat_predi_index00)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bmm_134": {
                "input": {
                    "value": "re_R",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(initR)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "initt[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_168": {
                "input": {
                    "value": "0.5 * (rot_trace - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_191": {
                "input": {
                    "value": "square_distance(P1_transformed, P2_gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_192": {
                "input": {
                    "value": "square_distance(P2_gt, P1_transformed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_237": {
                "input": {
                    "value": "0.5 * (rot_trace - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_259": {
                "input": {
                    "value": "square_distance(P1_transformed, P2_gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_260": {
                "input": {
                    "value": "square_distance(P2_gt, P1_transformed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "pmat_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "pmat_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "(R_pre, T_pre[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "(R_pre, T_pre[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "(R_gt, T_gt[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_189": {
                "tensors": {
                    "value": "(R_pre, T_pre[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_242": {
                "tensors": {
                    "value": "(R_pre, T_pre[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_248": {
                "tensors": {
                    "value": "(R_pre, T_pre[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "(R_gt, T_gt[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "(R_pre, T_pre[:, :, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/hungarian.py": {
        "torch": {
            "from_numpy_62": {
                "variable": {
                    "value": "perm_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "perm_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s.cpu().detach().numpy() * -1",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(perm_mat).to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/loss_func.py": {
        "torch": {
            "tensor_96": {
                "variable": {
                    "value": "d1",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0], [2.0, 3.0], [3.0, 4.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "d2",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-1.0, -2.0], [-2.0, -3.0], [-3.0, -4.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 1.0], [1.0, 1.0], [0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "variable": {
                    "value": "n_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rl(d1, d2, mask)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(pred_perm.device)",
                            "Call"
                        ],
                        [
                            "loss + F.binary_cross_entropy(pred_class[b, :gt_ns[b], :], gt_class[b, :gt_ns[b], :], reduction='sum')",
                            "BinOp"
                        ],
                        [
                            "torch.sum(phi) / d1.shape[0]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(0.0).to(pred_class.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_60": {
                "variable": {
                    "value": "xtx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * x * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_61": {
                "variable": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xtx + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_84": {
                "variable": {
                    "value": "n_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rl(d1, d2, mask)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0).to(pred_perm.device)",
                            "Call"
                        ],
                        [
                            "loss + F.binary_cross_entropy(pred_class[b, :gt_ns[b], :], gt_class[b, :gt_ns[b], :], reduction='sum')",
                            "BinOp"
                        ],
                        [
                            "torch.sum(phi) / d1.shape[0]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(0.0).to(pred_class.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_19": {
                "input": {
                    "value": "(pred_perm >= 0) * (pred_perm <= 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_20": {
                "input": {
                    "value": "(gt_perm >= 0) * (gt_perm <= 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_55": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0, 1.0], [1.0, 1.0], [0.0, 0.0]])",
                            "Call"
                        ],
                        [
                            "torch.ones_like(mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "all_80": {
                "input": {
                    "value": "(pred_class >= 0) * (pred_class <= 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_81": {
                "input": {
                    "value": "(gt_class >= 0) * (gt_class <= 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_25": {
                "input": {
                    "value": "pred_perm[b, :pred_ns[b], :gt_ns[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_perm[b, :pred_ns[b], :gt_ns[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(xtx + self.epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_86": {
                "input": {
                    "value": "pred_class[b, :gt_ns[b], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_class[b, :gt_ns[b], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/model_sl.py": {
        "torch": {
            "save_9": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_14": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_16": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/sinkhorn.py": {
        "torch": {
            "ZeroPad2d_25": {
                "variable": {
                    "value": "zero_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_28": {
                "variable": {
                    "value": "log_alpha_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_alpha_padded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zero_pad(s[:, None, :, :])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(log_alpha_padded, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((log_alpha_padded[:, :-1, :] - torch.logsumexp(log_alpha_padded[:, :-1, :], dim=2, keepdim=True), log_alpha_padded[:, -1, None, :]), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((log_alpha_padded[:, :, :-1] - torch.logsumexp(log_alpha_padded[:, :, :-1], dim=1, keepdim=True), log_alpha_padded[:, :, -1, None]), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_alpha_padded)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_43": {
                "variable": {
                    "value": "log_alpha_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_alpha_padded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "zero_pad(s[:, None, :, :])",
                            "Call"
                        ],
                        [
                            "torch.squeeze(log_alpha_padded, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((log_alpha_padded[:, :-1, :] - torch.logsumexp(log_alpha_padded[:, :-1, :], dim=2, keepdim=True), log_alpha_padded[:, -1, None, :]), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((log_alpha_padded[:, :, :-1] - torch.logsumexp(log_alpha_padded[:, :, :-1], dim=1, keepdim=True), log_alpha_padded[:, :, -1, None]), dim=2)",
                            "Call"
                        ],
                        [
                            "torch.exp(log_alpha_padded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_32": {
                "variable": {
                    "value": "log_alpha_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_alpha_padded[:, :-1, :] - torch.logsumexp(log_alpha_padded[:, :-1, :], dim=2, keepdim=True), log_alpha_padded[:, -1, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "log_alpha_padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_alpha_padded[:, :, :-1] - torch.logsumexp(log_alpha_padded[:, :, :-1], dim=1, keepdim=True), log_alpha_padded[:, :, -1, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s, torch.full(dummy_shape, 0.0).to(s.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_71": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((s, torch.full(dummy_shape, 0.0).to(s.device)), dim=1)",
                            "Call"
                        ],
                        [
                            "s + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "log_alpha_padded[:, :-1, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.exp(exp_alpha * s)",
                            "Call"
                        ],
                        [
                            "s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "s * tmp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_60": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_alpha * s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((s, torch.full(dummy_shape, 0.0).to(s.device)), dim=1)",
                            "Call"
                        ],
                        [
                            "s + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "log_alpha_padded[:, :-1, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.exp(exp_alpha * s)",
                            "Call"
                        ],
                        [
                            "s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "s * tmp",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_69": {
                "variable": {
                    "value": "sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((s, torch.full(dummy_shape, 0.0).to(s.device)), dim=1)",
                            "Call"
                        ],
                        [
                            "s + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "log_alpha_padded[:, :-1, :-1]",
                            "Subscript"
                        ],
                        [
                            "torch.exp(exp_alpha * s)",
                            "Call"
                        ],
                        [
                            "s[:, :-dummy_shape[1]]",
                            "Subscript"
                        ],
                        [
                            "s * tmp",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_50": {
                "size": {
                    "value": "dummy_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(s.shape)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_33": {
                "input": {
                    "value": "log_alpha_padded[:, :-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_39": {
                "input": {
                    "value": "log_alpha_padded[:, :, :-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/sparse.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "bilinear_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bilinear_diag",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "['extension/bilinear_diag/bilinear_diag.cpp', 'extension/bilinear_diag/bilinear_diag_cuda.cu']",
                    "type": "List",
                    "possible_values": []
                },
                "extra_include_paths": {
                    "value": "['/usr/include/python{}.{}/'.format(sys.version_info.major, sys.version_info.minor)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "nonzero_218": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_270": {
                "variable": {
                    "value": "idx_flag",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "coo.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "s_t1.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_432": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 2, 3, 4], [11, 22, 33, 44]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradcheck_442": {
                "variable": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "sbmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(dense_to_sparse(torch.randn(1, 20, 30, dtype=torch.double, requires_grad=True)), torch.randn(1, 30, 40, dtype=torch.double, requires_grad=True))",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_128": {
                "variable": {
                    "value": "outp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_s_t1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_batches(s_t1, b)",
                            "Call"
                        ],
                        [
                            "s_t1[b].cpu()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "d_t2[b, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_145": {
                "variable": {
                    "value": "outp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_t1.mul_(t2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_148": {
                "variable": {
                    "value": "outp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_t2.mul_(t1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "smm_174": {
                "variable": {
                    "value": "_outp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_s_t1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_batches(s_t1, b)",
                            "Call"
                        ],
                        [
                            "s_t1[b].cpu()",
                            "Call"
                        ]
                    ]
                },
                "mat": {
                    "value": "_d_t2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_t2[b].cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_coo_tensor_223": {
                "indices": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nonzero(x)[:, :len(x.shape) - dense_dim + 1]",
                            "Subscript"
                        ],
                        [
                            "indices.t()",
                            "Call"
                        ],
                        [
                            "torch.nonzero(d_t)",
                            "Call"
                        ],
                        [
                            "indices.t()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x[tuple((indices[i] for i in range(indices.shape[0])))]",
                            "Subscript"
                        ],
                        [
                            "d_t[tuple((indices[i] for i in range(indices.shape[0])))]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "d_t.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_t.dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "s_t1.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "req_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_t.requires_grad",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sparse_coo_tensor_243": {
                "variable": {
                    "value": "outp",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "_coo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coo[1:3, idx].view(2, -1)",
                            "Call"
                        ],
                        [
                            "coo[1:3, idx].view(2, -1)",
                            "Call"
                        ],
                        [
                            "_M._indices()",
                            "Call"
                        ],
                        [
                            "coo[1:3, idx].view(2, -1)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data[idx].view(-1)",
                            "Call"
                        ],
                        [
                            "data[idx].view(-1)",
                            "Call"
                        ],
                        [
                            "_M._values()",
                            "Call"
                        ],
                        [
                            "data[idx].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "s_t.shape[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "s_t1.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sparse_coo_tensor_295": {
                "indices": {
                    "value": "coo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "s_t._indices()",
                            "Call"
                        ],
                        [
                            "s_t._indices()",
                            "Call"
                        ],
                        [
                            "coo[:, idx]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([[0]], dtype=coo.dtype, device=device)",
                            "Call"
                        ],
                        [
                            "coo[:, idx]",
                            "Subscript"
                        ],
                        [
                            "coo[dim_flag, :]",
                            "Subscript"
                        ],
                        [
                            "np.array([_M.row, _M.col])",
                            "Call"
                        ],
                        [
                            "np.array([batch, row, col])",
                            "Call"
                        ],
                        [
                            "M._indices()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "s_t._values()",
                            "Call"
                        ],
                        [
                            "s_t._values()",
                            "Call"
                        ],
                        [
                            "data[idx]",
                            "Subscript"
                        ],
                        [
                            "_M.data",
                            "Attribute"
                        ],
                        [
                            "np.append(data, _M.data)",
                            "Call"
                        ],
                        [
                            "M._values()",
                            "Call"
                        ],
                        [
                            "np_dict['data2d'][b]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.Size(torch.tensor(s_t.shape, dtype=_dtype, device=device) * (slice == -1).type(_dtype) + torch.ones(len(s_t.shape), dtype=_dtype, device=device) * (slice != -1).type(_dtype))",
                            "Call"
                        ],
                        [
                            "torch.Size([1])",
                            "Call"
                        ],
                        [
                            "torch.Size(torch.tensor(s_t.shape)[dim_flag])",
                            "Call"
                        ],
                        [
                            "np_dict['shape'][b].astype(np.int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "s_t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "s_t.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_368": {
                "variable": {
                    "value": "outp",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "coo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "s_t._indices()",
                            "Call"
                        ],
                        [
                            "s_t._indices()",
                            "Call"
                        ],
                        [
                            "coo[:, idx]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([[0]], dtype=coo.dtype, device=device)",
                            "Call"
                        ],
                        [
                            "coo[:, idx]",
                            "Subscript"
                        ],
                        [
                            "coo[dim_flag, :]",
                            "Subscript"
                        ],
                        [
                            "np.array([_M.row, _M.col])",
                            "Call"
                        ],
                        [
                            "np.array([batch, row, col])",
                            "Call"
                        ],
                        [
                            "M._indices()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "s_t._values()",
                            "Call"
                        ],
                        [
                            "s_t._values()",
                            "Call"
                        ],
                        [
                            "data[idx]",
                            "Subscript"
                        ],
                        [
                            "_M.data",
                            "Attribute"
                        ],
                        [
                            "np.append(data, _M.data)",
                            "Call"
                        ],
                        [
                            "M._values()",
                            "Call"
                        ],
                        [
                            "np_dict['data2d'][b]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size([batch_num] + list(_M.shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_t.dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "s_t1.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_19": {
                "tensor": {
                    "value": ".",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_22": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_t1.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_103": {
                "variable": {
                    "value": "dt1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dm",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "d_t2.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_220": {
                "indices": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "values": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "d_t.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_t.dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "s_t1.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "req_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_t.requires_grad",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_281": {
                "variable": {
                    "value": "coo",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "coo.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "s_t1.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_435": {
                "data": {
                    "value": "(0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_441": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_440": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_251": {
                "indices": {
                    "value": "_coo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coo[1:3, idx].view(2, -1)",
                            "Call"
                        ],
                        [
                            "coo[1:3, idx].view(2, -1)",
                            "Call"
                        ],
                        [
                            "_M._indices()",
                            "Call"
                        ],
                        [
                            "coo[1:3, idx].view(2, -1)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data[idx].view(-1)",
                            "Call"
                        ],
                        [
                            "data[idx].view(-1)",
                            "Call"
                        ],
                        [
                            "_M._values()",
                            "Call"
                        ],
                        [
                            "data[idx].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "s_t.shape[1:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "s_t1.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sparse_coo_tensor_356": {
                "indices": {
                    "value": "coo",
                    "type": "Call",
                    "possible_values": [
                        [
                            "s_t._indices()",
                            "Call"
                        ],
                        [
                            "s_t._indices()",
                            "Call"
                        ],
                        [
                            "coo[:, idx]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor([[0]], dtype=coo.dtype, device=device)",
                            "Call"
                        ],
                        [
                            "coo[:, idx]",
                            "Subscript"
                        ],
                        [
                            "coo[dim_flag, :]",
                            "Subscript"
                        ],
                        [
                            "np.array([_M.row, _M.col])",
                            "Call"
                        ],
                        [
                            "np.array([batch, row, col])",
                            "Call"
                        ],
                        [
                            "M._indices()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "s_t._values()",
                            "Call"
                        ],
                        [
                            "s_t._values()",
                            "Call"
                        ],
                        [
                            "data[idx]",
                            "Subscript"
                        ],
                        [
                            "_M.data",
                            "Attribute"
                        ],
                        [
                            "np.append(data, _M.data)",
                            "Call"
                        ],
                        [
                            "M._values()",
                            "Call"
                        ],
                        [
                            "np_dict['data2d'][b]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "_M.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "d_t.dtype",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "s_t1.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_286": {
                "data": {
                    "value": "s_t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_291": {
                "data": {
                    "value": "s_t.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.int32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "s_t1.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_292": {
                "*size": {
                    "value": "len(s_t.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.int32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "s_t1.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t2.device",
                            "Attribute"
                        ],
                        [
                            "d_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "s_t.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/visdomshow.py": {
        "torch": {
            "cat_97": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(pc1.size(0)), torch.ones(pc2.size(0)) * 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones(pc1.size(0)), torch.ones(pc2.size(0)) * 2, torch.ones(pc3.size(0)) * 3, torch.ones(pc4.size(0)) * 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "(pc1, pc2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "(pc1, pc2, pc3, pc4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "pc2.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_102": {
                "*size": {
                    "value": "pc2.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "pc4.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}