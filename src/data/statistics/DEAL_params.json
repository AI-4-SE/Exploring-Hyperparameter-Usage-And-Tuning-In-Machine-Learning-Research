{
    "DEAL/01_LeNet/run_experimentLeNet.py": {
        "sklearn": {},
        "tensorflow": {
            "Glob_396": {
                "variable": {
                    "value": "existing_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(save_dir, filename + '*.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_309": {
                "filename": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MkDir_311": {
                "dirname": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_322": {
                "filename": {
                    "value": "save_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, FLAGS.dataset + '_' + FLAGS.sampling_method)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_399": {
                "name": {
                    "value": "filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'log-' + strftime('%Y-%m-%d-%H-%M-%S', gmtime()) + '.txt')",
                            "Call"
                        ],
                        [
                            "'results_score_' + FLAGS.score_method + '_select_' + FLAGS.select_method + '_norm_' + str(normalize_data) + '_stand_' + str(standardize_data)",
                            "BinOp"
                        ],
                        [
                            "os.path.join(save_dir, filename + '_' + str(1000 + len(existing_files))[1:] + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MkDir_324": {
                "dirname": {
                    "value": "save_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, FLAGS.dataset + '_' + FLAGS.sampling_method)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DEAL/01_LeNet/run_experimentLeNet_modelEnsemble.py": {
        "sklearn": {},
        "tensorflow": {
            "Glob_450": {
                "variable": {
                    "value": "existing_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(save_dir, filename + '*.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_359": {
                "filename": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MkDir_361": {
                "dirname": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_372": {
                "filename": {
                    "value": "save_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, FLAGS.dataset + '_' + FLAGS.sampling_method)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_453": {
                "name": {
                    "value": "filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'log-' + strftime('%Y-%m-%d-%H-%M-%S', gmtime()) + '.txt')",
                            "Call"
                        ],
                        [
                            "'results_score_' + FLAGS.score_method + '_select_' + FLAGS.select_method + '_norm_' + str(normalize_data) + '_stand_' + str(standardize_data)",
                            "BinOp"
                        ],
                        [
                            "os.path.join(save_dir, filename + '_' + str(1000 + len(existing_files))[1:] + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MkDir_374": {
                "dirname": {
                    "value": "save_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, FLAGS.dataset + '_' + FLAGS.sampling_method)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DEAL/01_LeNet/sampling_methods/kcenter_greedy.py": {
        "sklearn": {
            "pairwise_distances_73": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "Y": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features[cluster_centers]",
                            "Subscript"
                        ]
                    ]
                },
                "metric": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DEAL/01_LeNet/utils/create_data.py": {
        "sklearn": {},
        "tensorflow": {
            "GFile_175": {
                "name": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, dataset[1] + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "DEAL/01_LeNet/utils/utils.py": {
        "sklearn": {
            "shuffle_146": {
                "variable": {
                    "value": "(X_train_val, y_train_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train_val",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train_val",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "49",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "GFile_50": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, dataname + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "DEAL/02_ResNet/run_experimentResNet.py": {
        "sklearn": {},
        "tensorflow": {
            "Glob_429": {
                "variable": {
                    "value": "existing_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(save_dir, filename + '*.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_347": {
                "filename": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MkDir_349": {
                "dirname": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_360": {
                "filename": {
                    "value": "save_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, FLAGS.dataset + '_' + FLAGS.sampling_method)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_432": {
                "name": {
                    "value": "filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'log-' + strftime('%Y-%m-%d-%H-%M-%S', gmtime()) + '.txt')",
                            "Call"
                        ],
                        [
                            "'results_score_' + FLAGS.score_method + '_select_' + FLAGS.select_method + '_norm_' + str(normalize_data) + '_stand_' + str(standardize_data)",
                            "BinOp"
                        ],
                        [
                            "os.path.join(save_dir, filename + '_' + str(1000 + len(existing_files))[1:] + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MkDir_362": {
                "dirname": {
                    "value": "save_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, FLAGS.dataset + '_' + FLAGS.sampling_method)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DEAL/02_ResNet/run_experimentResNet_modelEnsemble.py": {
        "sklearn": {},
        "tensorflow": {
            "Glob_486": {
                "variable": {
                    "value": "existing_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(save_dir, filename + '*.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_400": {
                "filename": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MkDir_402": {
                "dirname": {
                    "value": "FLAGS.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_413": {
                "filename": {
                    "value": "save_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, FLAGS.dataset + '_' + FLAGS.sampling_method)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_489": {
                "name": {
                    "value": "filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'log-' + strftime('%Y-%m-%d-%H-%M-%S', gmtime()) + '.txt')",
                            "Call"
                        ],
                        [
                            "'results_score_' + FLAGS.score_method + '_select_' + FLAGS.select_method + '_norm_' + str(normalize_data) + '_stand_' + str(standardize_data)",
                            "BinOp"
                        ],
                        [
                            "os.path.join(save_dir, filename + '_' + str(1000 + len(existing_files))[1:] + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MkDir_415": {
                "dirname": {
                    "value": "save_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.save_dir, FLAGS.dataset + '_' + FLAGS.sampling_method)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DEAL/02_ResNet/sampling_methods/kcenter_greedy.py": {
        "sklearn": {
            "pairwise_distances_73": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "Y": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features[cluster_centers]",
                            "Subscript"
                        ]
                    ]
                },
                "metric": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "DEAL/02_ResNet/utils/create_data.py": {
        "sklearn": {},
        "tensorflow": {
            "GFile_175": {
                "name": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, dataset[1] + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "DEAL/02_ResNet/utils/utils.py": {
        "sklearn": {
            "shuffle_152": {
                "variable": {
                    "value": "(X_train_val, y_train_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train_val",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train_val",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "49",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shuffle_182": {
                "variable": {
                    "value": "(X_train_val, y_train_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train_val",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_train_val",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "49",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "GFile_55": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(data_dir, dataname + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "DEAL/01_LeNet/utils/lenet_evidence.py": {
        "tensorflow": {
            "constant_107": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones((1, K))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_108": {
                "variable": {
                    "value": "S_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evidence + 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evidence + 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_125": {
                "variable": {
                    "value": "loglikelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(p * (tf.digamma(tf.reduce_sum(alpha, axis=1, keepdims=True)) - tf.digamma(alpha)), 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "variable": {
                    "value": "loglikelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(p * (tf.log(tf.reduce_sum(alpha, axis=1, keepdims=True)) - tf.log(alpha)), 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_143": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_209": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "self.g",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_93": {
                "features": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(out3, W4) + b4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_96": {
                "x": {
                    "value": "logits / 1000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu6_99": {
                "features": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(out3, W4) + b4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softsign_102": {
                "features": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(out3, W4) + b4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_140": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=(1 / shape[0]) ** 0.5) if init is None else init",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, np.prod(dims) * nch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_146": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, K]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_148": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "annealing_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_153": {
                "variable": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(X, [-1, *dims, nch])",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "W1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.var('W1', [5, 5, nch, 20])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_154": {
                "variable": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1 + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_155": {
                "variable": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(c1 + b1)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_159": {
                "variable": {
                    "value": "c2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(r1, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.var('W2', [5, 5, 20, 50])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_160": {
                "variable": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2 + b2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_161": {
                "variable": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(c2 + b2)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_163": {
                "variable": {
                    "value": "Xflat",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(r2, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_168": {
                "variable": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(Xflat, W3) + b3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_175": {
                "variable": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(Xflat, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(out3, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.keep_prob",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_mean_188": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_function(Y, alpha, K, global_step, annealing_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_191": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_193": {
                "variable": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(logits, 1), tf.argmax(Y, 1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_194": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "match",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(tf.equal(tf.argmax(logits, 1), tf.argmax(Y, 1)), tf.float32), (-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_196": {
                "variable": {
                    "value": "total_evidence",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "evidence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits2evidence(logits)",
                            "Call"
                        ],
                        [
                            "self.evidence",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_197": {
                "variable": {
                    "value": "mean_ev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "total_evidence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(evidence, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_202": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "lgamma_112": {
                "x": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(np.ones((1, K)), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_119": {
                "input_tensor": {
                    "value": "alpha * (S - alpha) / (S * S * (S + 1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_121": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(global_step / annealing_step, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_126": {
                "input_tensor": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evidence + 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_128": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(global_step / annealing_step, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "input_tensor": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evidence + 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_134": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(global_step / annealing_step, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_139": {
                "stddev": {
                    "value": "(1 / shape[0]) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(np.ones((1, K)), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_121": {
                "x": {
                    "value": "global_step / annealing_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_128": {
                "x": {
                    "value": "global_step / annealing_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_134": {
                "x": {
                    "value": "global_step / annealing_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "tensor": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None, np.prod(dims) * nch], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, *dims, nch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_179": {
                "a": {
                    "value": "out3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(Xflat, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(out3, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.var('W4', [500, K])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_184": {
                "input_tensor": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evidence + 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "input_tensor": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evidence + 1",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_193": {
                "x": {
                    "value": "tf.equal(tf.argmax(logits, 1), tf.argmax(Y, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_198": {
                "input_tensor": {
                    "value": "evidence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits2evidence(logits)",
                            "Call"
                        ],
                        [
                            "self.evidence",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_199": {
                "input_tensor": {
                    "value": "evidence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits2evidence(logits)",
                            "Call"
                        ],
                        [
                            "self.evidence",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "input_tensor": {
                    "value": "tf.lgamma(alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_168": {
                "a": {
                    "value": "Xflat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(out2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.var('W3', [Xflat.get_shape()[1].value, 500])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_189": {
                "t": {
                    "value": "W4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.var('W4', [500, K])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_193": {
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_200": {
                "input_tensor": {
                    "value": "tf.abs(1 - match)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_110": {
                "input_tensor": {
                    "value": "(alpha - beta) * (tf.digamma(alpha) - tf.digamma(S_alpha))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "lgamma_111": {
                "x": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evidence + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "digamma_126": {
                "x": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evidence + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_133": {
                "x": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evidence + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_193": {
                "input": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None, K], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.Y",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_200": {
                "x": {
                    "value": "1 - match",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "digamma_110": {
                "x": {
                    "value": "S_alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(alpha, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DEAL/01_LeNet/utils/lenet_softmax.py": {
        "tensorflow": {
            "Graph_90": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_134": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ],
                        [
                            "self.g",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_87": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=(2 / shape[0]) ** 0.5) if init is None else init",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, np.prod(dims) * nch]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, K]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(X, [-1, *dims, nch])",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "W1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.var('W1', [5, 5, nch, 20])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "r1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c1 + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_100": {
                "variable": {
                    "value": "out1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(c1 + b1)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_104": {
                "variable": {
                    "value": "c2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(r1, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.var('W2', [5, 5, 20, 50])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "r2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "c2 + b2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool_106": {
                "variable": {
                    "value": "out2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(c2 + b2)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_108": {
                "variable": {
                    "value": "Xflat",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(r2, [1, 2, 2, 1], [1, 2, 2, 1], 'SAME')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_112": {
                "variable": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(Xflat, W3) + b3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_113": {
                "variable": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(Xflat, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(out3, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.keep_prob",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(out3, W4) + b4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_121": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_124": {
                "variable": {
                    "value": "step",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_126": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(prob, 1), tf.argmax(Y, 1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_86": {
                "stddev": {
                    "value": "(2 / shape[0]) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None, np.prod(dims) * nch], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, *dims, nch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "a": {
                    "value": "out3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(Xflat, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(out3, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.var('W4', [500, K])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_121": {
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(out3, W4) + b4",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None, K], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.Y",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_126": {
                "x": {
                    "value": "tf.equal(tf.argmax(prob, 1), tf.argmax(Y, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_112": {
                "a": {
                    "value": "Xflat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(out2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.var('W3', [Xflat.get_shape()[1].value, 500])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_122": {
                "t": {
                    "value": "W4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.var('W4', [500, K])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_126": {
                "x": {
                    "value": "tf.argmax(prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_126": {
                "input": {
                    "value": "Y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None, K], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.Y",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "DEAL/02_ResNet/utils/resnet_ops.py": {
        "tensorflow": {
            "reduce_mean_152": {
                "variable": {
                    "value": "gap",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias, padding=padding)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_0')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_1x1_front')",
                            "Call"
                        ],
                        [
                            "conv(shortcut, channels, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_front')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_3x3')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1x1_back')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels * 4, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_back')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 2]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 23, 3]",
                            "List"
                        ],
                        [
                            "[3, 8, 36, 3]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=label, logits=logit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_183": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logit, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(label, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_216": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones((1, K))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_217": {
                "variable": {
                    "value": "S_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_227": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_234": {
                "variable": {
                    "value": "loglikelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(p * (tf.digamma(tf.reduce_sum(alpha, axis=1, keepdims=True)) - tf.digamma(alpha)), 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_241": {
                "variable": {
                    "value": "loglikelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(p * (tf.log(tf.reduce_sum(alpha, axis=1, keepdims=True)) - tf.log(alpha)), 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_256": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_function",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loss_eq3(p, alpha, K, global_step, annealing_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_260": {
                "variable": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(tf.equal(tf.argmax(logits, 1), tf.argmax(label, 1)), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_261": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "match",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(tf.equal(tf.argmax(logits, 1), tf.argmax(label, 1)), tf.float32), (-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_22": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias, padding=padding)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_0')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_1x1_front')",
                            "Call"
                        ],
                        [
                            "conv(shortcut, channels, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_front')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_3x3')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1x1_back')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels * 4, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_back')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 2]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 23, 3]",
                            "List"
                        ],
                        [
                            "[3, 8, 36, 3]",
                            "List"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(0.0001)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias, padding=padding)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_0')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_1x1_front')",
                            "Call"
                        ],
                        [
                            "conv(shortcut, channels, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_front')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_3x3')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1x1_back')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels * 4, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_back')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 2]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 23, 3]",
                            "List"
                        ],
                        [
                            "[3, 8, 36, 3]",
                            "List"
                        ]
                    ]
                },
                "units": {
                    "value": "units",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "weight_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "weight_regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_contrib.layers.l2_regularizer(0.0001)",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_42": {
                "variable": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(x, W3) + b3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_46": {
                "variable": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(x, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out3, rate=rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(x, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out3, rate=rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_58": {
                "variable": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(x, W3) + b3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_66": {
                "variable": {
                    "value": "out3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(x, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out3, rate=rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(x, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out3, rate=rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ],
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                }
            },
            "flatten_149": {
                "structure": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias, padding=padding)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_0')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_1x1_front')",
                            "Call"
                        ],
                        [
                            "conv(shortcut, channels, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_front')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_3x3')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1x1_back')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels * 4, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_back')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 2]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 23, 3]",
                            "List"
                        ],
                        [
                            "[3, 8, 36, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "average_pooling2d_156": {
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias, padding=padding)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_0')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_1x1_front')",
                            "Call"
                        ],
                        [
                            "conv(shortcut, channels, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_front')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_3x3')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1x1_back')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels * 4, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_back')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 2]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 23, 3]",
                            "List"
                        ],
                        [
                            "[3, 8, 36, 3]",
                            "List"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_164": {
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias, padding=padding)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_0')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_1x1_front')",
                            "Call"
                        ],
                        [
                            "conv(shortcut, channels, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_front')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_3x3')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1x1_back')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels * 4, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_back')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 2]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 23, 3]",
                            "List"
                        ],
                        [
                            "[3, 8, 36, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "relu_194": {
                "features": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(out3, W4) + b4",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(out3, W4) + b4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_197": {
                "x": {
                    "value": "logits / 1000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu6_200": {
                "features": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(out3, W4) + b4",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(out3, W4) + b4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softsign_203": {
                "features": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.matmul(out3, W4) + b4",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(out3, W4) + b4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_210": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=(1 / shape[0]) ** 0.5) if init is None else init",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_0'",
                            "MethodArgument"
                        ],
                        [
                            "'Softmax_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'DEAL_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'bottle_resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_0'",
                            "MethodArgument"
                        ],
                        [
                            "'Softmax_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'DEAL_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'bottle_resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_0'",
                            "MethodArgument"
                        ],
                        [
                            "'Softmax_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'DEAL_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'bottle_resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_0'",
                            "MethodArgument"
                        ],
                        [
                            "'Softmax_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'DEAL_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'bottle_resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_0'",
                            "MethodArgument"
                        ],
                        [
                            "'Softmax_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'DEAL_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'bottle_resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'conv_0'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_0'",
                            "MethodArgument"
                        ],
                        [
                            "'Softmax_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'DEAL_dense_0'",
                            "MethodArgument"
                        ],
                        [
                            "'resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'bottle_resblock'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_v2_182": {
                "labels": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_183": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_184": {
                "x": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(logit, -1), tf.argmax(label, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_209": {
                "stddev": {
                    "value": "(1 / shape[0]) ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_221": {
                "x": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(np.ones((1, K)), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_228": {
                "input_tensor": {
                    "value": "alpha * (S - alpha) / (S * S * (S + 1))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_230": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(global_step / annealing_step, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_235": {
                "input_tensor": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_237": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(global_step / annealing_step, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_242": {
                "input_tensor": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_243": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(global_step / annealing_step, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_260": {
                "x": {
                    "value": "tf.equal(tf.argmax(logits, 1), tf.argmax(label, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "out3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(x, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out3, rate=rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(x, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out3, rate=rate)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "var('W4', [1000, units])",
                            "Call"
                        ],
                        [
                            "var('W4', [1000, units])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_70": {
                "a": {
                    "value": "out3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(x, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out3, rate=rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.matmul(x, W3) + b3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(out3, rate=rate)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "var('W4', [1000, units])",
                            "Call"
                        ],
                        [
                            "var('W4', [1000, units])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_221": {
                "input_tensor": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(np.ones((1, K)), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_230": {
                "x": {
                    "value": "global_step / annealing_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_237": {
                "x": {
                    "value": "global_step / annealing_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_243": {
                "x": {
                    "value": "global_step / annealing_step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_257": {
                "t": {
                    "value": "W4",
                    "type": "Call",
                    "possible_values": [
                        [
                            "var('W4', [1000, units])",
                            "Call"
                        ],
                        [
                            "var('W4', [1000, units])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_260": {
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(label, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias, padding=padding)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_0')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_1x1_front')",
                            "Call"
                        ],
                        [
                            "conv(shortcut, channels, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_front')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_3x3')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1x1_back')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels * 4, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_back')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 2]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 23, 3]",
                            "List"
                        ],
                        [
                            "[3, 8, 36, 3]",
                            "List"
                        ]
                    ]
                },
                "b": {
                    "value": "W3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "var('W3', [x.get_shape()[1].value, 1000])",
                            "Call"
                        ],
                        [
                            "var('W3', [x.get_shape()[1].value, 1000])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_58": {
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=x, filters=channels, kernel_size=kernel, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, strides=stride, use_bias=use_bias, padding=padding)",
                            "Call"
                        ],
                        [
                            "flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, units=units, kernel_initializer=weight_init, kernel_regularizer=weight_regularizer, use_bias=use_bias)",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_0')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_1')",
                            "Call"
                        ],
                        [
                            "batch_norm(x_init, is_training, scope='batch_norm_1x1_front')",
                            "Call"
                        ],
                        [
                            "conv(shortcut, channels, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_front')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_3x3')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=2, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "conv(x, channels, kernel=3, stride=1, use_bias=use_bias, scope='conv_0')",
                            "Call"
                        ],
                        [
                            "batch_norm(x, is_training, scope='batch_norm_1x1_back')",
                            "Call"
                        ],
                        [
                            "relu(x)",
                            "Call"
                        ],
                        [
                            "conv(x, channels * 4, kernel=1, stride=1, use_bias=use_bias, scope='conv_1x1_back')",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[2, 2, 2, 2]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 6, 3]",
                            "List"
                        ],
                        [
                            "[3, 4, 23, 3]",
                            "List"
                        ],
                        [
                            "[3, 8, 36, 3]",
                            "List"
                        ]
                    ]
                },
                "b": {
                    "value": "W3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "var('W3', [x.get_shape()[1].value, 1000])",
                            "Call"
                        ],
                        [
                            "var('W3', [x.get_shape()[1].value, 1000])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_220": {
                "input_tensor": {
                    "value": "tf.lgamma(alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_260": {
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_219": {
                "input_tensor": {
                    "value": "(alpha - beta) * (tf.digamma(alpha) - tf.digamma(S_alpha))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "lgamma_220": {
                "x": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits",
                            "Name"
                        ]
                    ]
                }
            },
            "digamma_235": {
                "x": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits",
                            "Name"
                        ]
                    ]
                }
            },
            "log_242": {
                "x": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits",
                            "Name"
                        ]
                    ]
                }
            },
            "digamma_219": {
                "x": {
                    "value": "S_alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(alpha, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "DEAL/02_ResNet/utils/resnet_utils.py": {
        "tensorflow": {
            "trainable_variables_18": {
                "variable": {
                    "value": "model_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}