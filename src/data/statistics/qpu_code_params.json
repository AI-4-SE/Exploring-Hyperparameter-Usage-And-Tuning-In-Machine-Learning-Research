{
    "CubeEdge/cube_edge.py": {
        "torch": {}
    },
    "CubeEdge/models.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channel * num_data, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "QPU(in_channel * num_data, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "QPU(in_channel * num_data, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "in_channel * num_data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cls",
                            "Method Argument"
                        ],
                        [
                            "num_cls",
                            "Method Argument"
                        ],
                        [
                            "num_cls",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cls",
                            "Method Argument"
                        ],
                        [
                            "num_cls",
                            "Method Argument"
                        ],
                        [
                            "num_cls",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cls",
                            "Method Argument"
                        ],
                        [
                            "num_cls",
                            "Method Argument"
                        ],
                        [
                            "num_cls",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "CubeEdge/train_utils.py": {
        "torch": {
            "DataLoader_12": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RDiff('datasets/rfunc_train.pkl')",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_13": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RDiff('datasets/rfunc_test.pkl')",
                            "Call"
                        ],
                        [
                            "test_data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_16": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_18": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "real_mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_43": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_81": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_111": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_121": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/fpha/feeder.py": {
        "torch": {}
    },
    "data/ntu/feeder.py": {
        "torch": {}
    },
    "models/agc_lstm.py": {
        "torch": {
            "ones_299": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "ADJ",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['device_ids'][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels * (1 + self.pa)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                }
            },
            "LSTM_32": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "feat_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cls",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "x_previous",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:1, ...], x[:-1, ...]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x - x_previous]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_88": {
                "variable": {
                    "value": "f_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(2, 5, 48, 25).to('cuda:0')",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 4, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p, x_pp], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x - x_previous], -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size, num_body, num_joints, -1)",
                            "Call"
                        ],
                        [
                            "self.tap1(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm1(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap2(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm2(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap3(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm3(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 0).reshape(batch_size * num_joints, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_joints, channels, -1).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 4, 0).reshape(batch_size * num_joints * num_body, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_body, num_joints, channels, -1).permute(4, 0, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(list(x.shape[:-1]) + [self.num_groups, -1])",
                            "Call"
                        ],
                        [
                            "x.transpose(-3, -2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=-3)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_88": {
                "variable": {
                    "value": "f_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "f_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_weights[-1] * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_89": {
                "variable": {
                    "value": "f_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "avg_pool1d_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(2, 5, 48, 25).to('cuda:0')",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 4, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p, x_pp], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x - x_previous], -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size, num_body, num_joints, -1)",
                            "Call"
                        ],
                        [
                            "self.tap1(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm1(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap2(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm2(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap3(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm3(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 0).reshape(batch_size * num_joints, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_joints, channels, -1).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 4, 0).reshape(batch_size * num_joints * num_body, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_body, num_joints, channels, -1).permute(4, 0, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(list(x.shape[:-1]) + [self.num_groups, -1])",
                            "Call"
                        ],
                        [
                            "x.transpose(-3, -2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=-3)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_115": {
                "variable": {
                    "value": "loss_attn_eq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(loss_attn_eq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "loss_attn_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(loss_attn_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_133": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.reshape(seq_len * batch_size, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.unsqueeze(0).expand(seq_len, -1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_155": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.attn_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.attn_wh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_165": {
                "variable": {
                    "value": "self.attn_wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.attn_us",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(attn_weights, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.attn_us(h))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_202": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, dim=0)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_206": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(self.attn_w(h), dim=-2, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_207": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_wh(h) + self.attn_wq(q)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_208": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_us(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool1d_235": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(2, 5, 48, 25).to('cuda:0')",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 4, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p, x_pp], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x - x_previous], -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size, num_body, num_joints, -1)",
                            "Call"
                        ],
                        [
                            "self.tap1(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm1(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap2(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm2(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap3(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm3(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 0).reshape(batch_size * num_joints, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_joints, channels, -1).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 4, 0).reshape(batch_size * num_joints * num_body, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_body, num_joints, channels, -1).permute(4, 0, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(list(x.shape[:-1]) + [self.num_groups, -1])",
                            "Call"
                        ],
                        [
                            "x.transpose(-3, -2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=-3)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels * self.num_groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_282": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(2, 5, 48, 25).to('cuda:0')",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 4, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p, x_pp], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x - x_previous], -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size, num_body, num_joints, -1)",
                            "Call"
                        ],
                        [
                            "self.tap1(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm1(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap2(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm2(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap3(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm3(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 0).reshape(batch_size * num_joints, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_joints, channels, -1).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 4, 0).reshape(batch_size * num_joints * num_body, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_body, num_joints, channels, -1).permute(4, 0, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(list(x.shape[:-1]) + [self.num_groups, -1])",
                            "Call"
                        ],
                        [
                            "x.transpose(-3, -2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=-3)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_283": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(2, 5, 48, 25).to('cuda:0')",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 4, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p, x_pp], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p], -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x - x_previous], -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size, num_body, num_joints, -1)",
                            "Call"
                        ],
                        [
                            "self.tap1(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm1(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap2(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm2(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap3(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm3(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 0).reshape(batch_size * num_joints, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_joints, channels, -1).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 4, 0).reshape(batch_size * num_joints * num_body, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_body, num_joints, channels, -1).permute(4, 0, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(list(x.shape[:-1]) + [self.num_groups, -1])",
                            "Call"
                        ],
                        [
                            "x.transpose(-3, -2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=-3)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_168": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_192": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xi[k] + self.whi(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_193": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xf[k] + self.whf(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_194": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xo[k] + self.who(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_195": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xc[k] + self.whc(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_259": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_264": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_c, x_p, x_pp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_c, x_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "input": {
                    "value": "self.o_loc[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_114": {
                "input": {
                    "value": "(1 - x.mean(dim=0)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_116": {
                "input": {
                    "value": "x.sum(dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_206": {
                "input": {
                    "value": "self.attn_w(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_197": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[1]",
                            "Subscript"
                        ],
                        [
                            "f * c + i * u",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/dgnn.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fv.size(1)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fv.size(1)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.source_M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(source_M.astype('float32'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.target_M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(target_M.astype('float32'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.H_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fv.size(1)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.H_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fv.size(1)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fv.size(1)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fv.size(1)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_89": {
                "variable": {
                    "value": "fe_in_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nce,ev->ncv",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "fe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fe.view(N, -1, V_edge)",
                            "Call"
                        ],
                        [
                            "self.dgn(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.tcn(fv, fe)",
                            "Call"
                        ],
                        [
                            "fe + fe_res",
                            "BinOp"
                        ],
                        [
                            "fe.permute(0, 4, 3, 1, 2).contiguous().view(N, M * V_edge * C, T)",
                            "Call"
                        ],
                        [
                            "fe.view(N, M, V_edge, C, T).permute(0, 1, 3, 4, 2).contiguous().view(N * M, C, T, V_edge)",
                            "Call"
                        ],
                        [
                            "self.l1(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l2(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l3(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l4(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l5(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l6(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l7(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l8(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l9(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l10(fv, fe)",
                            "Call"
                        ],
                        [
                            "fe.view(N, M, out_channels, -1).mean(3).mean(1)",
                            "Call"
                        ],
                        [
                            "fe",
                            "Method Argument"
                        ],
                        [
                            "fe",
                            "Method Argument"
                        ],
                        [
                            "fe",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_90": {
                "variable": {
                    "value": "fe_out_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "nce,ev->ncv",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "fe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fe.view(N, -1, V_edge)",
                            "Call"
                        ],
                        [
                            "self.dgn(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.tcn(fv, fe)",
                            "Call"
                        ],
                        [
                            "fe + fe_res",
                            "BinOp"
                        ],
                        [
                            "fe.permute(0, 4, 3, 1, 2).contiguous().view(N, M * V_edge * C, T)",
                            "Call"
                        ],
                        [
                            "fe.view(N, M, V_edge, C, T).permute(0, 1, 3, 4, 2).contiguous().view(N * M, C, T, V_edge)",
                            "Call"
                        ],
                        [
                            "self.l1(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l2(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l3(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l4(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l5(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l6(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l7(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l8(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l9(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l10(fv, fe)",
                            "Call"
                        ],
                        [
                            "fe.view(N, M, out_channels, -1).mean(3).mean(1)",
                            "Call"
                        ],
                        [
                            "fe",
                            "Method Argument"
                        ],
                        [
                            "fe",
                            "Method Argument"
                        ],
                        [
                            "fe",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_91": {
                "variable": {
                    "value": "fvp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fv, fe_in_agg, fe_out_agg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_97": {
                "variable": {
                    "value": "fv_in_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncv,ve->nce",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fv.view(N, -1, V_node)",
                            "Call"
                        ],
                        [
                            "self.dgn(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.tcn(fv, fe)",
                            "Call"
                        ],
                        [
                            "fv + fv_res",
                            "BinOp"
                        ],
                        [
                            "fv.permute(0, 4, 3, 1, 2).contiguous().view(N, M * V_node * C, T)",
                            "Call"
                        ],
                        [
                            "fv.view(N, M, V_node, C, T).permute(0, 1, 3, 4, 2).contiguous().view(N * M, C, T, V_node)",
                            "Call"
                        ],
                        [
                            "self.l1(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l2(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l3(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l4(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l5(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l6(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l7(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l8(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l9(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l10(fv, fe)",
                            "Call"
                        ],
                        [
                            "fv.view(N, M, out_channels, -1).mean(3).mean(1)",
                            "Call"
                        ],
                        [
                            "fv",
                            "Method Argument"
                        ],
                        [
                            "fv",
                            "Method Argument"
                        ],
                        [
                            "fv",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "einsum_98": {
                "variable": {
                    "value": "fv_out_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ncv,ve->nce",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fv.view(N, -1, V_node)",
                            "Call"
                        ],
                        [
                            "self.dgn(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.tcn(fv, fe)",
                            "Call"
                        ],
                        [
                            "fv + fv_res",
                            "BinOp"
                        ],
                        [
                            "fv.permute(0, 4, 3, 1, 2).contiguous().view(N, M * V_node * C, T)",
                            "Call"
                        ],
                        [
                            "fv.view(N, M, V_node, C, T).permute(0, 1, 3, 4, 2).contiguous().view(N * M, C, T, V_node)",
                            "Call"
                        ],
                        [
                            "self.l1(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l2(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l3(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l4(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l5(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l6(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l7(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l8(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l9(fv, fe)",
                            "Call"
                        ],
                        [
                            "self.l10(fv, fe)",
                            "Call"
                        ],
                        [
                            "fv.view(N, M, out_channels, -1).mean(3).mean(1)",
                            "Call"
                        ],
                        [
                            "fv",
                            "Method Argument"
                        ],
                        [
                            "fv",
                            "Method Argument"
                        ],
                        [
                            "fv",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_99": {
                "variable": {
                    "value": "fep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fe, fv_in_agg, fv_out_agg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_141": {
                "variable": {
                    "value": "self.data_bn_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_person * in_channels * num_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_142": {
                "variable": {
                    "value": "self.data_bn_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_person * in_channels * num_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cls",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_194": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fv, fe)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_199": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_64": {
                "ndarray": {
                    "value": "source_M.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "ndarray": {
                    "value": "target_M.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/mlp_lstm.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.num_joints * 4, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_22": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feat_dim, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size * num_person",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size * num_person",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.dev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "output.permute(1, 0, 2).reshape(batch_size, num_person * self.num_frames, -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "output.permute(1, 0, 2).reshape(batch_size, num_person * self.num_frames, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_76": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.feat_dim, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size * num_person",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config['device_ids'][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size * num_person",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.config['device_ids'][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "output.permute(1, 0, 2).reshape(batch_size, num_person * self.num_frames, -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "output.permute(1, 0, 2).reshape(batch_size, num_person * self.num_frames, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_53": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "QPU(self.num_joints * 4, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "QPU(self.num_joints * 4, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_107": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "self.num_joints * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cls",
                            "Method Argument"
                        ],
                        [
                            "num_cls",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cls",
                            "Method Argument"
                        ],
                        [
                            "num_cls",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/qagc_lstm.py": {
        "torch": {
            "ones_315": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "ADJ",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.graph.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['device_ids'][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LSTM_45": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.feat_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_cls",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_76": {
                "variable": {
                    "value": "x_previous",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:1, ...], x[:-1, ...]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x - x_previous]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_101": {
                "variable": {
                    "value": "f_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(2, 5, 48, 25).to('cuda:0')",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 4, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p, x_pp], -1).reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p], -1).reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x - x_previous], -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size, num_body, num_joints, -1)",
                            "Call"
                        ],
                        [
                            "self.tap1(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm1(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap2(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm2(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap3(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm3(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 0).reshape(batch_size * num_joints, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_joints, channels, -1).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 4, 0).reshape(batch_size * num_joints * num_body, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_body, num_joints, channels, -1).permute(4, 0, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(list(x.shape[:-1]) + [self.num_groups, -1])",
                            "Call"
                        ],
                        [
                            "x.transpose(-3, -2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=-3)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_101": {
                "variable": {
                    "value": "f_glob",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_102": {
                "variable": {
                    "value": "f_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_weights[-1] * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "f_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "avg_pool1d_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(2, 5, 48, 25).to('cuda:0')",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 4, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p, x_pp], -1).reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p], -1).reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x - x_previous], -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size, num_body, num_joints, -1)",
                            "Call"
                        ],
                        [
                            "self.tap1(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm1(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap2(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm2(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap3(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm3(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 0).reshape(batch_size * num_joints, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_joints, channels, -1).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 4, 0).reshape(batch_size * num_joints * num_body, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_body, num_joints, channels, -1).permute(4, 0, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(list(x.shape[:-1]) + [self.num_groups, -1])",
                            "Call"
                        ],
                        [
                            "x.transpose(-3, -2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=-3)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_128": {
                "variable": {
                    "value": "loss_attn_eq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(loss_attn_eq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_130": {
                "variable": {
                    "value": "loss_attn_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(loss_attn_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_146": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.reshape(seq_len * batch_size, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.unsqueeze(0).expand(seq_len, -1).reshape(-1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_168": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.attn_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.attn_wh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.attn_wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.attn_us",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_215": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(attn_weights, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.attn_us(h))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_216": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, dim=0)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_220": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(self.attn_w(h), dim=-2, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_221": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_wh(h) + self.attn_wq(q)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_222": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_us(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool1d_249": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(2, 5, 48, 25).to('cuda:0')",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 4, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p, x_pp], -1).reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p], -1).reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x - x_previous], -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size, num_body, num_joints, -1)",
                            "Call"
                        ],
                        [
                            "self.tap1(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm1(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap2(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm2(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap3(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm3(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 0).reshape(batch_size * num_joints, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_joints, channels, -1).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 4, 0).reshape(batch_size * num_joints * num_body, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_body, num_joints, channels, -1).permute(4, 0, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(list(x.shape[:-1]) + [self.num_groups, -1])",
                            "Call"
                        ],
                        [
                            "x.transpose(-3, -2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=-3)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels * self.num_groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_296": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(2, 5, 48, 25).to('cuda:0')",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 4, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p, x_pp], -1).reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p], -1).reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x - x_previous], -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size, num_body, num_joints, -1)",
                            "Call"
                        ],
                        [
                            "self.tap1(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm1(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap2(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm2(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap3(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm3(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 0).reshape(batch_size * num_joints, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_joints, channels, -1).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 4, 0).reshape(batch_size * num_joints * num_body, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_body, num_joints, channels, -1).permute(4, 0, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(list(x.shape[:-1]) + [self.num_groups, -1])",
                            "Call"
                        ],
                        [
                            "x.transpose(-3, -2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=-3)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_297": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(2, 5, 48, 25).to('cuda:0')",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 4, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p, x_pp], -1).reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_c, x_p], -1).reshape(num_frames, batch_size * num_joints * num_body, -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x - x_previous], -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(num_frames, batch_size, num_body, num_joints, -1)",
                            "Call"
                        ],
                        [
                            "self.tap1(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm1(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap2(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm2(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "self.tap3(x)",
                            "Call"
                        ],
                        [
                            "self.agc_lstm3(x, (h0, c0))",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 0).reshape(batch_size * num_joints, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_joints, channels, -1).permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.permute(1, 2, 3, 4, 0).reshape(batch_size * num_joints * num_body, channels, num_frames)",
                            "Call"
                        ],
                        [
                            "F.avg_pool1d(x, self.kernel_size, self.stride)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, num_body, num_joints, channels, -1).permute(4, 0, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(list(x.shape[:-1]) + [self.num_groups, -1])",
                            "Call"
                        ],
                        [
                            "x.transpose(-3, -2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.A, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=-3)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "QPU(in_channels * (1 + self.pa), self.feat_dim * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "QPU(in_channels * (1 + self.pa), self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_181": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_206": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xi[k] + self.whi(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_207": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xf[k] + self.whf(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_208": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xo[k] + self.who(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_209": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xc[k] + self.whc(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_273": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_278": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_c, x_p, x_pp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_frames",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_size * num_joints * num_body",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_c, x_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_frames",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "batch_size * num_joints * num_body",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_107": {
                "input": {
                    "value": "self.o_loc[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "(1 - x.mean(dim=0)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_129": {
                "input": {
                    "value": "x.sum(dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_220": {
                "input": {
                    "value": "self.attn_w(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_211": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[1]",
                            "Subscript"
                        ],
                        [
                            "f * c + i * u",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/qdgnn.py": {
        "torch": {}
    },
    "pointcloud/pointnet2/data/Indoor3DSemSegLoader.py": {
        "torch": {
            "DataLoader_111": {
                "variable": {
                    "value": "dloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Indoor3DSemSeg(16, './', train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "current_points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.points[idx, pt_idxs].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "current_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.labels[idx, pt_idxs].copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/data/ModelNet40Loader.py": {
        "torch": {
            "DataLoader_108": {
                "variable": {
                    "value": "dloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Cls(16, train=True, transforms=transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.labels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/data/data_utils.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cosval * np.eye(3) + sinval * cross_prod_mat + (1.0 - cosval) * np.outer(u, u)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "input": {
                    "value": "Rz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_axis(angles[2], np.array([0.0, 0.0, 1.0]))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_axis(angles[1], np.array([0.0, 1.0, 0.0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "points[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "points[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "variable": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "points[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "ndarray": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_171": {
                "ndarray": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_65": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_119": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/models/pointnet2_msg_cls.py": {
        "torch": {
            "ModuleList_56": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_29": {
                "variable": {
                    "value": "(_, classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_20": {
                "mode": {
                    "value": "not eval",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/models/pointnet2_msg_sem.py": {
        "torch": {
            "randn_159": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(0, 3, size=B * N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_176": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(0, 3, size=B * N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_181": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_55": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.FP_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_28": {
                "variable": {
                    "value": "(_, classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_20": {
                "mode": {
                    "value": "not eval",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/models/pointnet2_ssg_cls.py": {
        "torch": {
            "ModuleList_56": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_29": {
                "variable": {
                    "value": "(_, classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_20": {
                "mode": {
                    "value": "not eval",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "qpu_layers.QPU(4 * 8, 64 * 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/models/pointnet2_ssg_sem.py": {
        "torch": {
            "ModuleList_55": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.FP_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_28": {
                "variable": {
                    "value": "(_, classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_20": {
                "mode": {
                    "value": "not eval",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/train/eval_cls.py": {
        "torch": {
            "DataLoader_70": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Cls(args.num_points, transforms=transforms, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "torch.Tensor(acc_per_cls)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/train/train_cls.py": {
        "torch": {
            "DataLoader_99": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Cls(args.num_points, transforms=transforms, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ModelNet40Cls(args.num_points, transforms=transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_144": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lbmd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda it: max(args.lr_decay ** int(it * args.batch_size / args.decay_step), lr_clip / args.lr)",
                            "Lambda"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "max(it, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/train/train_sem_seg.py": {
        "torch": {
            "DataLoader_87": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Indoor3DSemSeg(args.num_points, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Indoor3DSemSeg(args.num_points)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_133": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lbmd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda it: max(args.lr_decay ** int(it * args.batch_size / args.decay_step), lr_clip / args.lr)",
                            "Lambda"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "max(it, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/utils/linalg_utils.py": {
        "torch": {
            "zeros_69": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "X.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "X.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Z.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_79": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_80": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_63": {
                "input": {
                    "value": "R + S - 2 * G",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dist_84": {
                "input": {
                    "value": "pdist2(X, order=PDist2Order.d_first)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pdist2_slow(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dist_74": {
                "variable": {
                    "value": "D[b, i, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "X[b, :, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "Z[b, :, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/utils/pointnet2_modules.py": {
        "torch": {
            "ModuleList_99": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_152": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_212": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_313": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_314": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_65": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_module(xyz, xyz_feats)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, feature)",
                            "Call"
                        ],
                        [
                            "new_features.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "new_features.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.cat(new_features_list, dim=2).reshape(B, -1, out_npoint)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_202": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_module(xyz, xyz_feats)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, feature)",
                            "Call"
                        ],
                        [
                            "new_features.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "new_features.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.cat(new_features_list, dim=2).reshape(B, -1, out_npoint)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_286": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_315": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_316": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/utils/pointnet2_utils.py": {
        "torch": {
            "sqrt_390": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(v * v, dim=dim, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_411": {
                "variable": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(p, dim)",
                            "Call"
                        ],
                        [
                            "normalize(p, dim)",
                            "Call"
                        ],
                        [
                            "normalize(p, dim=coord_dim)",
                            "Call"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_440": {
                "variable": {
                    "value": "sinus",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(ref, projs, coord_dim) * p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "coord_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coord_dim",
                            "Method Argument"
                        ],
                        [
                            "coord_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_441": {
                "variable": {
                    "value": "cosinus",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref * projs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "coord_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coord_dim",
                            "Method Argument"
                        ],
                        [
                            "coord_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "atan2_442": {
                "variable": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sinus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.cross(ref, projs, coord_dim) * p, dim=coord_dim, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cosinus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(ref * projs, dim=coord_dim, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_460": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(pts * pts, dim=coord_dim, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_473": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(xyz * xyz, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_477": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist / radius * math.pi / 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(1).uniform_(0, self.p)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_479": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_538": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x for x in range(1, nsample)] + [0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([grouped_xyz, grouped_features], dim=1)",
                            "Call"
                        ],
                        [
                            "grouped_features",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "torch.cat([grouped_xyz, grouped_features], dim=1)",
                            "Call"
                        ],
                        [
                            "grouped_features",
                            "variable"
                        ],
                        [
                            "[grouped_quat]",
                            "List"
                        ],
                        [
                            "torch.cat(new_features, dim=2)",
                            "Call"
                        ],
                        [
                            "new_features.reshape(B, 4 * M, npoint, nsample)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_390": {
                "input": {
                    "value": "v * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_400": {
                "input": {
                    "value": "p * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_415": {
                "input": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.select(dim=dim, index=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_446": {
                "input": {
                    "value": "projs * projs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "coord_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coord_dim",
                            "Method Argument"
                        ],
                        [
                            "coord_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_460": {
                "input": {
                    "value": "pts * pts",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "coord_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coord_dim",
                            "Method Argument"
                        ],
                        [
                            "coord_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_473": {
                "input": {
                    "value": "xyz * xyz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sin_478": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist / radius * math.pi / 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(1).uniform_(0, self.p)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_135": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ext.three_nn(unknown, known)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_328": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_440": {
                "input": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(p)",
                            "Call"
                        ],
                        [
                            "project_one(p, coord_dim)",
                            "Call"
                        ],
                        [
                            "ref.expand_as(pts)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "projs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(project(p, pts, coord_dim), coord_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "coord_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coord_dim",
                            "Method Argument"
                        ],
                        [
                            "coord_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_447": {
                "*size": {
                    "value": "close_ind.sum()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/utils/qpu_layers.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_51": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_54": {
                "variable": {
                    "value": "sinTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.split(input.shape[self.dim] // 4, self.dim)",
                            "Call"
                        ],
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "input.split(input.shape[self.dim] // 4, self.dim)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_51": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.split(input.shape[self.dim] // 4, self.dim)",
                            "Call"
                        ],
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "input.split(input.shape[self.dim] // 4, self.dim)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "-1 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/pointnet2/utils/qpu_ops.py": {
        "torch": {
            "sqrt_48": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r ** 2 + i ** 2 + j ** 2 + k ** 2 + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_64": {
                "variable": {
                    "value": "norm_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i ** 2 + j ** 2 + k ** 2 + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_65": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_71": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "theta + bias.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "weight * theta",
                            "BinOp"
                        ],
                        [
                            "w * torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_85": {
                "variable": {
                    "value": "norm_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i ** 2 + j ** 2 + k ** 2 + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_88": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "theta + bias.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "weight * theta",
                            "BinOp"
                        ],
                        [
                            "w * torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_222": {
                "variable": {
                    "value": "rl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r.split(1, dim)",
                            "Call"
                        ],
                        [
                            "quaternion_cumprod_(input_r, input_i, input_j, input_k, dim)",
                            "Call"
                        ],
                        [
                            "cumprod_r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_224": {
                "variable": {
                    "value": "il",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i.split(1, dim)",
                            "Call"
                        ],
                        [
                            "quaternion_cumprod_(input_r, input_i, input_j, input_k, dim)",
                            "Call"
                        ],
                        [
                            "cumprod_i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_226": {
                "variable": {
                    "value": "jl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "j.split(1, dim)",
                            "Call"
                        ],
                        [
                            "quaternion_cumprod_(input_r, input_i, input_j, input_k, dim)",
                            "Call"
                        ],
                        [
                            "cumprod_j",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_228": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.split(1, dim)",
                            "Call"
                        ],
                        [
                            "quaternion_cumprod_(input_r, input_i, input_j, input_k, dim)",
                            "Call"
                        ],
                        [
                            "cumprod_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_268": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_283": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "int"
                        ]
                    ]
                }
            },
            "norm_284": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 4, 21)",
                            "Call"
                        ],
                        [
                            "torch.randn(B, 4, N)",
                            "Call"
                        ],
                        [
                            "input / norm",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_301": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_out + i_out + j_out + k_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_309": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_out + i_out + j_out + k_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_19": {
                "tensors": {
                    "value": "[r, i, j, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "[r, i, j, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_65": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(-2).split(in_channels, dim=-1)",
                            "Call"
                        ],
                        [
                            "quaternion_power_bias(r, i, j, k, weight, bias)",
                            "Call"
                        ],
                        [
                            "QuaternionRemoveZeros.apply(r, i, j, k)",
                            "Call"
                        ],
                        [
                            "quaternion_chained_prod(r, i, j, k, -1)",
                            "Call"
                        ],
                        [
                            "input.split(in_channels, dim)",
                            "Call"
                        ],
                        [
                            "r / norm",
                            "BinOp"
                        ],
                        [
                            "torch.cos(theta)",
                            "Call"
                        ],
                        [
                            "torch.cos(theta)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-1 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_70": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "theta + bias.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "weight * theta",
                            "BinOp"
                        ],
                        [
                            "w * torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "acos_86": {
                "input": {
                    "value": "torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_89": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "theta + bias.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "weight * theta",
                            "BinOp"
                        ],
                        [
                            "w * torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_138": {
                "variable": {
                    "value": "r_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_out, last[0].unsqueeze(dim)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_139": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i_out, last[1].unsqueeze(dim)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_140": {
                "variable": {
                    "value": "j_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j_out, last[2].unsqueeze(dim)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_141": {
                "variable": {
                    "value": "k_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_out, last[3].unsqueeze(dim)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_86": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(-2).split(in_channels, dim=-1)",
                            "Call"
                        ],
                        [
                            "quaternion_power_bias(r, i, j, k, weight, bias)",
                            "Call"
                        ],
                        [
                            "QuaternionRemoveZeros.apply(r, i, j, k)",
                            "Call"
                        ],
                        [
                            "quaternion_chained_prod(r, i, j, k, -1)",
                            "Call"
                        ],
                        [
                            "input.split(in_channels, dim)",
                            "Call"
                        ],
                        [
                            "r / norm",
                            "BinOp"
                        ],
                        [
                            "torch.cos(theta)",
                            "Call"
                        ],
                        [
                            "torch.cos(theta)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-1 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/setup.py": {
        "torch": {}
    },
    "pointcloud/tests/conftest.py": {
        "torch": {
            "Adam_16": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_33": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(0, 3, size=B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_43": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(0, 3, size=B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_53": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(0, 3, size=B * N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_63": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(0, 3, size=B * N)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/tests/test_cls_msg.py": {
        "torch": {
            "CrossEntropyLoss_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/tests/test_cls_ssg.py": {
        "torch": {
            "CrossEntropyLoss_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/tests/test_semseg_msg.py": {
        "torch": {
            "CrossEntropyLoss_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointcloud/tests/test_semseg_ssg.py": {
        "torch": {
            "CrossEntropyLoss_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qpu_layers.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features, self.in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_51": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_54": {
                "variable": {
                    "value": "sinTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.split(input.shape[self.dim] // 4, self.dim)",
                            "Call"
                        ],
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "input.split(input.shape[self.dim] // 4, self.dim)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_51": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.split(input.shape[self.dim] // 4, self.dim)",
                            "Call"
                        ],
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "input.split(input.shape[self.dim] // 4, self.dim)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "-1 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "qpu_ops.py": {
        "torch": {
            "sqrt_48": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r ** 2 + i ** 2 + j ** 2 + k ** 2 + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_64": {
                "variable": {
                    "value": "norm_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i ** 2 + j ** 2 + k ** 2 + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_65": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_71": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "theta + bias.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "weight * theta",
                            "BinOp"
                        ],
                        [
                            "w * torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_85": {
                "variable": {
                    "value": "norm_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i ** 2 + j ** 2 + k ** 2 + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_88": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "theta + bias.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "weight * theta",
                            "BinOp"
                        ],
                        [
                            "w * torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_222": {
                "variable": {
                    "value": "rl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r.split(1, dim)",
                            "Call"
                        ],
                        [
                            "quaternion_cumprod_(input_r, input_i, input_j, input_k, dim)",
                            "Call"
                        ],
                        [
                            "cumprod_r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_224": {
                "variable": {
                    "value": "il",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i.split(1, dim)",
                            "Call"
                        ],
                        [
                            "quaternion_cumprod_(input_r, input_i, input_j, input_k, dim)",
                            "Call"
                        ],
                        [
                            "cumprod_i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_226": {
                "variable": {
                    "value": "jl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "j.split(1, dim)",
                            "Call"
                        ],
                        [
                            "quaternion_cumprod_(input_r, input_i, input_j, input_k, dim)",
                            "Call"
                        ],
                        [
                            "cumprod_j",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_228": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumprod_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.split(1, dim)",
                            "Call"
                        ],
                        [
                            "quaternion_cumprod_(input_r, input_i, input_j, input_k, dim)",
                            "Call"
                        ],
                        [
                            "cumprod_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_268": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_283": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "int"
                        ]
                    ]
                }
            },
            "norm_284": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 4, 21)",
                            "Call"
                        ],
                        [
                            "torch.randn(B, 4, N)",
                            "Call"
                        ],
                        [
                            "input / norm",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_301": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_out + i_out + j_out + k_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_309": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_out + i_out + j_out + k_out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_19": {
                "tensors": {
                    "value": "[r, i, j, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "[r, i, j, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_65": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(-2).split(in_channels, dim=-1)",
                            "Call"
                        ],
                        [
                            "quaternion_power_bias(r, i, j, k, weight, bias)",
                            "Call"
                        ],
                        [
                            "QuaternionRemoveZeros.apply(r, i, j, k)",
                            "Call"
                        ],
                        [
                            "quaternion_chained_prod(r, i, j, k, -1)",
                            "Call"
                        ],
                        [
                            "input.split(in_channels, dim)",
                            "Call"
                        ],
                        [
                            "r / norm",
                            "BinOp"
                        ],
                        [
                            "torch.cos(theta)",
                            "Call"
                        ],
                        [
                            "torch.cos(theta)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-1 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_70": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "theta + bias.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "weight * theta",
                            "BinOp"
                        ],
                        [
                            "w * torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "acos_86": {
                "input": {
                    "value": "torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_89": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "Call"
                        ],
                        [
                            "theta + bias.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "weight * theta",
                            "BinOp"
                        ],
                        [
                            "w * torch.acos(torch.clamp(r, min=-1 + 1e-06, max=1 - 1e-06))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_138": {
                "variable": {
                    "value": "r_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r_out, last[0].unsqueeze(dim)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_139": {
                "variable": {
                    "value": "i_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i_out, last[1].unsqueeze(dim)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_140": {
                "variable": {
                    "value": "j_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j_out, last[2].unsqueeze(dim)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_141": {
                "variable": {
                    "value": "k_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_out, last[3].unsqueeze(dim)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_86": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze(-2).split(in_channels, dim=-1)",
                            "Call"
                        ],
                        [
                            "quaternion_power_bias(r, i, j, k, weight, bias)",
                            "Call"
                        ],
                        [
                            "QuaternionRemoveZeros.apply(r, i, j, k)",
                            "Call"
                        ],
                        [
                            "quaternion_chained_prod(r, i, j, k, -1)",
                            "Call"
                        ],
                        [
                            "input.split(in_channels, dim)",
                            "Call"
                        ],
                        [
                            "r / norm",
                            "BinOp"
                        ],
                        [
                            "torch.cos(theta)",
                            "Call"
                        ],
                        [
                            "torch.cos(theta)",
                            "Call"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ],
                        [
                            "r",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-1 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "xin",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sk.xyz2qrel(xin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_47": {
                "variable": {
                    "value": "xin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "xin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_161": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(load_path, 'model.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testdata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Feeder(os.path.join(data_dir, 'val_data_rel.npy'), val_label_path, None, num_samples=-1, mmap=True, num_frames=config['data_param']['num_frames'])",
                            "Call"
                        ],
                        [
                            "Feeder(os.path.join(data_dir, 'val_data.npy'), val_label_path, test_edge_path, num_samples=-1, mmap=True, num_frames=config['data_param']['num_frames'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(config['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "xin[0][i, ..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sk.xyz_rotate(xin[0][i, ..., 1:], y_only=y_only)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "variable": {
                    "value": "xin[1][i, ..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sk.xyz_rotate(xin[1][i, ..., 1:], new_rotate=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "xin[i, ..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sk.xyz_rotate(xin[i, ..., 1:], y_only=y_only)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_76": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inputs.shape[0], 1, inputs.shape[2], inputs.shape[3], inputs.shape[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad, inputs.type_as(pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(config['learning_rate'])",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(config['weight_decay'])",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_62": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(net.parameters(), lr=learning_rate, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "config['start_epoch'] - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "traindata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Feeder(os.path.join(data_dir, 'train_data_rel.npy'), train_label_path, None, num_samples=-1, mmap=True, num_frames=config['data_param']['num_frames'])",
                            "Call"
                        ],
                        [
                            "Feeder(os.path.join(data_dir, 'train_data.npy'), train_label_path, train_edge_path, num_samples=-1, mmap=True, num_frames=config['data_param']['num_frames'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(config['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_85": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testdata",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Feeder(os.path.join(val_data_dir, 'val_data_rel.npy'), val_label_path, None, num_samples=-1, mmap=True, num_frames=config['data_param']['num_frames'])",
                            "Call"
                        ],
                        [
                            "Feeder(os.path.join(val_data_dir, 'val_data.npy'), val_label_path, test_edge_path, num_samples=-1, mmap=True, num_frames=config['data_param']['num_frames'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(config['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "worker_init_fn",
                            "Call"
                        ]
                    ]
                }
            },
            "max_134": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_185": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_51": {
                "f": {
                    "value": "config['resume']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inputs.shape[0], 1, inputs.shape[2], inputs.shape[3], inputs.shape[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad, inputs.type_as(pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config['logdir'], 'model.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inputs.shape[0], 1, inputs.shape[2], inputs.shape[3], inputs.shape[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad, inputs.type_as(pad)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/logger.py": {
        "torch": {}
    }
}