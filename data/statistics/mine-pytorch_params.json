{
    "mine/datasets.py": {
        "sklearn": {
            "MinMaxScaler_108": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_points, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_points, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultivariateNormal_83": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(2 * self.dim)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "self.cov_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2 * self.dim, 2 * self.dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "twospirals(n_points, noise)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "np.append(labels, label)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "self.spirals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "spirals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "twospirals(n_points, noise)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(spirals)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.x_np",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_168": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=train, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize([0.5], [0.5])]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, self.IMG_WIDTH, self.IMG_HEIGHT)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "ndarray": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "twospirals(n, noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_28": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "twospirals(n_points, noise)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "np.append(labels, label)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Spirals(n_points=N)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_31": {
                "start": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "label.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "num_points",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_46": {
                "start": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "label.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "num_points",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_184": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Gaussians(n_points=N // 25, std=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_230": {
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "twospirals(n_points, noise)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "np.append(labels, label)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_53": {
                "*size": {
                    "value": "(N, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_like_54": {
                "input": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_89": {
                "start": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_91": {
                "start": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_92": {
                "start": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_93": {
                "start": {
                    "value": "2 * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_219": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.add_noise(img)",
                            "Call"
                        ],
                        [
                            "self.get_random_img()",
                            "Call"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_151": {
                "ndarray": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mine/models/adaptive_gradient_clipping.py": {
        "torch": {}
    },
    "mine/models/bidirectional.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(img_dim, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(img_dim + latent_dim, 400)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "xz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_64": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "opt_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self.generator.parameters(), self.mi_estimator.parameters(), self.encoder.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "opt_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_90": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_real.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_real.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_75": {
                "*size": {
                    "value": "(N, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "img_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_dim",
                            "Method Argument"
                        ],
                        [
                            "img_dim",
                            "Method Argument"
                        ],
                        [
                            "img_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "img_dim + latent_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mine/models/gan.py": {
        "torch": {
            "BCELoss_45": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_82": {
                "variable": {
                    "value": "random_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "conditional_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "conditional_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "opt_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self.generator.parameters(), self.mi_estimator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "opt_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_148": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_real.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_real.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, conditional)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_66": {
                "*size": {
                    "value": "(N, self.input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_187": {
                "*size": {
                    "value": "valid.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mine/models/information_bottleneck.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softplus_44": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_45": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_49": {
                "variable": {
                    "value": "self.ce_loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_62": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softplus(log_sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "opt_ib",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self.parameters(), self.mi_estimator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_113": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(img)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(img, label)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(x, y)",
                            "Call"
                        ],
                        [
                            "self.loss_fn(x, y)",
                            "Call"
                        ],
                        [
                            "decoded",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_137": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_137": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "GaussianLayer(std=0.3, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_205": {
                "variable": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_208": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_234": {
                "variable": {
                    "value": "layer_outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "statistics_network",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim + layer_dim, 400)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * K",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "x_dim + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_184": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_187": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_212": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_like_173": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_214": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_241": {
                "in_features": {
                    "value": "input_dim + layer_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_243": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_245": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mine/models/layers.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_features, out_features, kernel_size=kernel_size, stride=stride, padding=padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(3, 16, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, 500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, 400)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * 2 * 512",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_105": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_107": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_109": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_111": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 2 * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_136": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_137": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_138": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.z_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.z_linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.z_linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_13": {
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_122": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(input)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 512, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(input))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.xz_block(x, z, self.conv1, self.z_linear1)",
                            "Call"
                        ],
                        [
                            "self.xz_block(x, z, self.conv2, self.z_linear2)",
                            "Call"
                        ],
                        [
                            "self.xz_block(x, z, self.conv3, self.z_linear3)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_144": {
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_166": {
                "input": {
                    "value": "x_out + z_map",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_69": {
                "num_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "num_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mine/models/mine.py": {
        "torch": {
            "set_detect_anomaly_21": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_51": {
                "variable": {
                    "value": "t_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logsumexp(x, 0) - math.log(x.shape[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, rho], [rho, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultivariateNormal_228": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1, rho], [rho, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_241": {
                "variable": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_329": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_337": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_354": {
                "variable": {
                    "value": "opt_mi",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mi_estimator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "0.002",
                            "float"
                        ]
                    ]
                }
            },
            "Adam_360": {
                "variable": {
                    "value": "opt_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "0.002",
                            "float"
                        ]
                    ]
                }
            },
            "Adam_361": {
                "variable": {
                    "value": "opt_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "0.002",
                            "float"
                        ]
                    ]
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_195": {
                "variable": {
                    "value": "avg_mi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_mi'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_195": {
                "variable": {
                    "value": "avg_mi",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "FunctionDataset(self.kwargs['N'], self.x_dim, self.kwargs['sigma'], self.kwargs['f'])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.kwargs['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_218": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "FunctionDataset(self.kwargs['N'], self.x_dim, self.kwargs['sigma'], self.kwargs['f'])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.kwargs['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_291": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MultivariateNormalDataset(N, dim, rho)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_293": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MultivariateNormalDataset(N, dim, rho)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float()",
                            "Call"
                        ],
                        [
                            "utils.batch(X, Y, batch_size)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(z).float()",
                            "Call"
                        ],
                        [
                            "z.cuda()",
                            "Call"
                        ],
                        [
                            "z.cuda()",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_167": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.kwargs['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_240": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float()",
                            "Call"
                        ],
                        [
                            "utils.batch(X, Y, batch_size)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_90": {
                "variable": {
                    "value": "second_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_marg - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_90": {
                "variable": {
                    "value": "second_term",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_133": {
                "in_features": {
                    "value": "x_dim + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "x_dim + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_81": {
                "n": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logsumexp_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float()",
                            "Call"
                        ],
                        [
                            "utils.batch(X, Y, batch_size)",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_92": {
                "input": {
                    "value": "t_marg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.T(x, z_marg)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mine/utils/helpers.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).float()",
                            "Call"
                        ],
                        [
                            "x[rand_perm]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_18": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(y).float()",
                            "Call"
                        ],
                        [
                            "y[rand_perm]",
                            "Subscript"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_23": {
                "variable": {
                    "value": "rand_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x)",
                            "Call"
                        ],
                        [
                            "len(total_mean)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}