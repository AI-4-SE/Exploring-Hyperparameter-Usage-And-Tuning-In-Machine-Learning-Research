{
    "MyTesting.py": {
        "torch": {
            "upsample_36": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res2",
                            "variable"
                        ],
                        [
                            "F.upsample(res, size=gt.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "gt.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_19": {
                "f": {
                    "value": "opt.pth_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MyTrain_Val.py": {
        "torch": {
            "binary_cross_entropy_with_logits_22": {
                "variable": {
                    "value": "wbce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_25": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_177": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_120": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "gt.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_21": {
                "input": {
                    "value": "F.avg_pool2d(mask, kernel_size=31, stride=1, padding=15) - mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + 'Net_epoch_{}.pth'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + 'Net_epoch_{}.pth'.format(epoch + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "mae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mae_sum / test_loader.size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_174": {
                "f": {
                    "value": "opt.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_133": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + 'Net_epoch_best.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool2d_21": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "31",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[0][0].clone()",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "preds[3][0].clone()",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "F.upsample(res[3], size=gt.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_88": {
                "data": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[0][0].clone()",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "preds[3][0].clone()",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "F.upsample(res[3], size=gt.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/Network_Res2Net_GRA_NCD.py": {
        "torch": {
            "randn_218": {
                "variable": {
                    "value": "dump_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "352",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "352",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_64": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3 * channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "x2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_1, self.conv_upsample4(self.upsample(x1_1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "x3_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3_1, self.conv_upsample5(self.upsample(x2_2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channel + self.group, channel, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_189": {
                "variable": {
                    "value": "S_g_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.NCD(x4_rfb, x3_rfb, x2_rfb)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_192": {
                "variable": {
                    "value": "guidance_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.NCD(x4_rfb, x3_rfb, x2_rfb)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_195": {
                "variable": {
                    "value": "S_5_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ra4_feat + guidance_g",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_198": {
                "variable": {
                    "value": "guidance_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ra4_feat + guidance_g",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_201": {
                "variable": {
                    "value": "S_4_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ra3_feat + guidance_5",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_204": {
                "variable": {
                    "value": "guidance_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ra3_feat + guidance_5",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_207": {
                "variable": {
                    "value": "S_3_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ra2_feat + guidance_4",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "x_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "channel + self.group",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_107": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "x + self.conv(x_cat)",
                            "BinOp"
                        ],
                        [
                            "self.weak_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.medium_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "x_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs[0], y, xs[1], y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_110": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "x + self.conv(x_cat)",
                            "BinOp"
                        ],
                        [
                            "self.weak_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.medium_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "x_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs[0], y, xs[1], y, xs[2], y, xs[3], y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_143": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(dump_x)",
                            "Call"
                        ],
                        [
                            "y + self.score(x)",
                            "BinOp"
                        ],
                        [
                            "-1 * torch.sigmoid(y) + 1",
                            "BinOp"
                        ],
                        [
                            "self.weak_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.medium_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.strong_gra(x, y)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "chunk_113": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "x + self.conv(x_cat)",
                            "BinOp"
                        ],
                        [
                            "self.weak_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.medium_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "x_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs[0], y, xs[1], y, xs[2], y, xs[3], y, xs[4], y, xs[5], y, xs[6], y, xs[7], y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_116": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "x + self.conv(x_cat)",
                            "BinOp"
                        ],
                        [
                            "self.weak_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.medium_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "x_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs[0], y, xs[1], y, xs[2], y, xs[3], y, xs[4], y, xs[5], y, xs[6], y, xs[7], y, xs[8], y, xs[9], y, xs[10], y, xs[11], y, xs[12], y, xs[13], y, xs[14], y, xs[15], y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_120": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x_cat + self.conv_res(x))",
                            "Call"
                        ],
                        [
                            "self.conv4(x3_2)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "x + self.conv(x_cat)",
                            "BinOp"
                        ],
                        [
                            "self.weak_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.medium_gra(x, y)",
                            "Call"
                        ],
                        [
                            "self.resnet.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.relu(x)",
                            "Call"
                        ],
                        [
                            "self.resnet.maxpool(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "x_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs[0], y, xs[1], y, xs[2], y, xs[3], y, xs[4], y, xs[5], y, xs[6], y, xs[7], y, xs[8], y, xs[9], y, xs[10], y, xs[11], y, xs[12], y, xs[13], y, xs[14], y, xs[15], y, xs[16], y, xs[17], y, xs[18], y, xs[19], y, xs[20], y, xs[21], y, xs[22], y, xs[23], y, xs[24], y, xs[25], y, xs[26], y, xs[27], y, xs[28], y, xs[29], y, xs[30], y, xs[31], y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/Res2Net_v1b.py": {
        "torch": {
            "rand_224": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "352",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "352",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "bns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_65": {
                "variable": {
                    "value": "spx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, spx[self.nums]), 1)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((out, self.pool(spx[self.nums])), 1)",
                            "Call"
                        ],
                        [
                            "sp",
                            "variable"
                        ],
                        [
                            "torch.cat((out, sp), 1)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 32, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_112": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_117": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_195": {
                "variable": {
                    "value": "model_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "/media/nercms/NERCMS/GepengJi/Medical_Seqmentation/CRANet/models/res2net50_v1b_26w_4s-3cf99910.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AvgPool2d_40": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, spx[self.nums])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=stride, stride=stride, ceil_mode=True, count_include_pad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, sp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, self.pool(spx[self.nums]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (baseWidth / 64.0)))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (baseWidth / 64.0)))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(planes * (baseWidth / 64.0)))",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_131": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/FeatureViz.py": {
        "torch": {
            "squeeze_9": {
                "variable": {
                    "value": "feat_viz",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_41": {
                "f": {
                    "value": "opt.pth_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_9": {
                "input": {
                    "value": "feat_viz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(image)",
                            "Call"
                        ],
                        [
                            "torch.mean(feat_viz, dim=1, keepdim=True).data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(feat_viz - feat_viz.min()) / (feat_viz.max() - feat_viz.min() + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "np.uint8(255 * feat_viz)",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(feat_viz, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.resize(feat_viz, (320, 320))",
                            "Call"
                        ],
                        [
                            "cv2.addWeighted(ori_img, 0.5, feat_viz, 0.5, 0)",
                            "Call"
                        ],
                        [
                            "feat_viz",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/MyFeatureVisulization.py": {
        "torch": {
            "load_18": {
                "f": {
                    "value": "opt.pth_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "upsample_37": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_list[i]",
                            "Subscript"
                        ],
                        [
                            "-1 * torch.sigmoid(res) + 1",
                            "BinOp"
                        ],
                        [
                            "F.upsample(res, size=gt.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "gt.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_36": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_list[i]",
                            "Subscript"
                        ],
                        [
                            "-1 * torch.sigmoid(res) + 1",
                            "BinOp"
                        ],
                        [
                            "F.upsample(res, size=gt.shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "res.sigmoid().data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(res - res.min()) / (res.max() - res.min() + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/data_val.py": {
        "torch": {
            "DataLoader_163": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PolypObjDataset(image_root, gt_root, trainsize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchsize",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/dataloader.py": {
        "torch": {
            "DataLoader_76": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PolypDataset(image_root, gt_root, trainsize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchsize",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/fps.py": {
        "torch": {
            "Tensor_15": {
                "variable": {
                    "value": "pytorch_test_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "synchronize_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/heatmap.py": {
        "torch": {
            "squeeze_7": {
                "variable": {
                    "value": "x_show",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_7": {
                "input": {
                    "value": "x_show",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(x_show, dim=1, keepdim=True).data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(x_show - x_show.min()) / (x_show.max() - x_show.min() + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "np.uint8(255 * x_show)",
                            "Call"
                        ],
                        [
                            "cv2.applyColorMap(x_show, cv2.COLORMAP_JET)",
                            "Call"
                        ],
                        [
                            "cv2.resize(x_show, (320, 320))",
                            "Call"
                        ],
                        [
                            "cv2.addWeighted(img, 0.5, x_show, 0.5, 0)",
                            "Call"
                        ],
                        [
                            "x_show",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "mean_53": {
                "input": {
                    "value": "torch.stack(self.losses[np.maximum(len(self.losses) - self.num, 0):])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_53": {
                "tensors": {
                    "value": "self.losses[np.maximum(len(self.losses) - self.num, 0):]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}