{
    "run.py": {
        "sklearn": {},
        "torch": {
            "set_default_tensor_type_12": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_209": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "m.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "float"
                        ]
                    ]
                }
            },
            "save_205": {
                "obj": {
                    "value": "m.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_checkpoint + '_it%d.pt' % 0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "m.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_checkpoint + '_itFinal.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "m.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_checkpoint + '_it%d.pt' % it",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "bo.py": {
        "torch": {
            "tensor_39": {
                "variable": {
                    "value": "xnew_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xnew",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xnew",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "xnew_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.X, xnew_)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "ynew_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[ynew]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.y, ynew_)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_8": {
                "input": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fv",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_55": {
                "input": {
                    "value": "self.acq_func(fmean, fvar, self.ybest)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_12": {
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_11": {
                "loc": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "scale": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_51": {
                "n": {
                    "value": "Xcandidates.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "gplvm.py": {
        "torch": {
            "tensor_15": {
                "variable": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "transform_backward(torch.tensor([variance]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "mn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ix.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_55": {
                "variable": {
                    "value": "pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(ix.numel())",
                            "Call"
                        ]
                    ]
                },
                "scale_tril": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_cov(ix=ix)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.GPs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "lp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_20": {
                "obj": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "ix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[k for k in y.ix.keys()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "y.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_41": {
                "variable": {
                    "value": "ix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_86": {
                "obj": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(X, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_68": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.trtrs(self.y.v.squeeze(), L, upper=False)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "fmean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.trtrs(self.y, L, upper=False)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[variance]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_44": {
                "n": {
                    "value": "ix.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_68": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.trtrs(Ks, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.trtrs(Ks, L, upper=False)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_75": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.trtrs(Ks, L, upper=False)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.trtrs(Ks, L, upper=False)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_97": {
                "data": {
                    "value": "ix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([k for k in y.ix.keys()], dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, self.N)",
                            "Call"
                        ],
                        [
                            "self.get_batch()",
                            "Call"
                        ],
                        [
                            "self.get_batch.ix",
                            "Attribute"
                        ],
                        [
                            "np.where(np.invert(np.isnan(Y[:, d])))[0]",
                            "Subscript"
                        ],
                        [
                            "np.where(Y[2] == d)[0]",
                            "Subscript"
                        ],
                        [
                            "self.get_batch()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_104": {
                "data": {
                    "value": "Y[1][ix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kernels.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "transform_backward(torch.tensor([variance]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "transform_backward(torch.tensor([variance]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "transform_backward(torch.tensor([variance]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[dim]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "transform_backward(torch.tensor([variance]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.lengthscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "transform_backward(torch.ones(1, dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.lengthscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "transform_backward(torch.tensor(lengthscale))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.lengthscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "transform_backward(torch.ones(1, dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.lengthscale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "transform_backward(torch.tensor(lengthscale))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_77": {
                "input": {
                    "value": "X / l",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "(X2 / l).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[variance]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[variance]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[variance]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "[variance]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_92": {
                "n": {
                    "value": "X.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_41": {
                "data": {
                    "value": "lengthscale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_62": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_66": {
                "data": {
                    "value": "lengthscale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "tensor_15": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Attribute"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "ix_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ix",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_59": {
                "variable": {
                    "value": "self.perm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_69": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([B, self.perm.numel()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_78": {
                "variable": {
                    "value": "self.perm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "[self.v[self.ix[kk]] for kk in k.tolist()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_47": {
                "variable": {
                    "value": "self.ix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[B, self.perm.numel()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "ix_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ix_batch, self.perm[:-d])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_18": {
                "start": {
                    "value": "self.v.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}