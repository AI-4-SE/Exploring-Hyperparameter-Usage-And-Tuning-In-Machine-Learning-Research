{
    "examples/deep-energy-mnist.py": {
        "torch": {
            "DataLoader_83": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('/tmp/mnist-data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('/tmp/mnist-data', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_101": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Enet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_fc_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_fc_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_fc_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.fce1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_fc_hidden + n_cls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_fc_hidden",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.fce2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_fc_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_150": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_151": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softplus(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(z, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv2(z))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(z, 2, 2)",
                            "Call"
                        ],
                        [
                            "z.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc1(z))",
                            "Call"
                        ],
                        [
                            "self.fc2(z)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_152": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_153": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softplus(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(z, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.conv2(z))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(z, 2, 2)",
                            "Call"
                        ],
                        [
                            "z.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc1(z))",
                            "Call"
                        ],
                        [
                            "self.fc2(z)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_155": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_162": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fce1(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nbatch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_226": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_252": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_199": {
                "params": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/maml-omniglot.py": {
        "torch": {
            "device_72": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "meta_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "qry_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qry_losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sum(qry_losses) / task_num",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(qry_losses).mean().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_228": {
                "variable": {
                    "value": "qry_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_133": {
                "variable": {
                    "value": "inner_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_208": {
                "variable": {
                    "value": "inner_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_all_68": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_229": {
                "tensors": {
                    "value": "qry_accs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "100.0 * sum(qry_accs) / task_num",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "100.0 * torch.cat(qry_accs).float().mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_156": {
                "variable": {
                    "value": "qry_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qry_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fnet(x_qry[i])",
                            "Call"
                        ],
                        [
                            "fnet(x_qry[i]).detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_qry[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_222": {
                "variable": {
                    "value": "qry_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qry_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fnet(x_qry[i])",
                            "Call"
                        ],
                        [
                            "fnet(x_qry[i]).detach()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_qry[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_92": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_96": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_100": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_149": {
                "variable": {
                    "value": "spt_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spt_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fnet(x_spt[i])",
                            "Call"
                        ],
                        [
                            "fnet(x_spt[i])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_spt[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_217": {
                "variable": {
                    "value": "spt_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spt_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fnet(x_spt[i])",
                            "Call"
                        ],
                        [
                            "fnet(x_spt[i])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_spt[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/support/omniglot_loaders.py": {
        "torch": {
            "from_numpy_281": {
                "ndarray": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "higher/__init__.py": {
        "torch": {}
    },
    "higher/optim.py": {
        "torch": {
            "where_39": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "exp_avg_sq == 0.0",
                            "Compare"
                        ],
                        [
                            "exp_avg_sq == 0.0",
                            "Compare"
                        ],
                        [
                            "sum_ == 0.0",
                            "Compare"
                        ],
                        [
                            "square_avg == 0.0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "_torch.zeros_like(grad)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_torch.where(mask, _torch.zeros_like(grad), grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_229": {
                "variable": {
                    "value": "all_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grad_targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[p if p.requires_grad else _torch.tensor([], requires_grad=True) for p in params]",
                            "ListComp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "self._track_higher_grads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_39": {
                "input": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_torch.where(mask, _torch.zeros_like(grad), grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_584": {
                "variable": {
                    "value": "norm_buf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[exp_inf, _add(g.abs(), eps).unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_587": {
                "variable": {
                    "value": "(exp_inf, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_buf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_torch.cat([exp_inf, _add(g.abs(), eps).unsqueeze(0)], 0)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_779": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sign.eq(etaminus)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "_torch.zeros_like(g)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_add(g, weight_decay, p)",
                            "Call"
                        ],
                        [
                            "_add(g, momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ],
                        [
                            "g + weight_decay * p",
                            "BinOp"
                        ],
                        [
                            "_add(g, group['weight_decay'], p)",
                            "Call"
                        ],
                        [
                            "_add(g, group['weight_decay'], p)",
                            "Call"
                        ],
                        [
                            "_add(g, group['weight_decay'], p)",
                            "Call"
                        ],
                        [
                            "_add(g, group['weight_decay'], p)",
                            "Call"
                        ],
                        [
                            "_add(g, group['weight_decay'], p)",
                            "Call"
                        ],
                        [
                            "_torch.where(sign.eq(etaminus), _torch.zeros_like(g), g)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1007": {
                "data": {
                    "value": "float(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_328": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_330": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_358": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_409": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_411": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_436": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ],
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_481": {
                "variable": {
                    "value": "state[square_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_482": {
                "variable": {
                    "value": "state[acc_delta]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_566": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_567": {
                "variable": {
                    "value": "state[exp_inf]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_618": {
                "variable": {
                    "value": "state[ax]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_679": {
                "variable": {
                    "value": "state[square_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_755": {
                "variable": {
                    "value": "state[prev]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_333": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_414": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_681": {
                "variable": {
                    "value": "state[momentum_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_683": {
                "variable": {
                    "value": "state[grad_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_779": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_add(g, weight_decay, p)",
                            "Call"
                        ],
                        [
                            "_add(g, momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "Name"
                        ],
                        [
                            "g + weight_decay * p",
                            "BinOp"
                        ],
                        [
                            "_add(g, group['weight_decay'], p)",
                            "Call"
                        ],
                        [
                            "_add(g, group['weight_decay'], p)",
                            "Call"
                        ],
                        [
                            "_add(g, group['weight_decay'], p)",
                            "Call"
                        ],
                        [
                            "_add(g, group['weight_decay'], p)",
                            "Call"
                        ],
                        [
                            "_add(g, group['weight_decay'], p)",
                            "Call"
                        ],
                        [
                            "_torch.where(sign.eq(etaminus), _torch.zeros_like(g), g)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_938": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p * (1 - group['lr'] * group['weight_decay'])",
                            "BinOp"
                        ],
                        [
                            "p.mul(1 - group['lambd'] * state['eta'])",
                            "Call"
                        ],
                        [
                            "_add(p, -group['lr'], buf)",
                            "Call"
                        ],
                        [
                            "_addcdiv(p, -group['lr'], g, avg)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_943": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p * (1 - group['lr'] * group['weight_decay'])",
                            "BinOp"
                        ],
                        [
                            "p.mul(1 - group['lambd'] * state['eta'])",
                            "Call"
                        ],
                        [
                            "_add(p, -group['lr'], buf)",
                            "Call"
                        ],
                        [
                            "_addcdiv(p, -group['lr'], g, avg)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_931": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "higher/patch.py": {
        "torch": {
            "is_tensor_157": {
                "obj": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "higher/utils.py": {
        "torch": {
            "is_tensor_42": {
                "obj": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_higher.py": {
        "torch": {
            "zeros_46": {
                "variable": {
                    "value": "running_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "np.prod(np.array(inputs.data.size()[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_47": {
                "variable": {
                    "value": "running_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "np.prod(np.array(inputs.data.size()[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(num_in_channels, 64, 3)), ('bn1', nn.BatchNorm2d(64, momentum=1, affine=True)), ('relu1', nn.ReLU(inplace=True)), ('pool1', nn.MaxPool2d(2, 2)), ('conv2', nn.Conv2d(64, 64, 3)), ('bn2', nn.BatchNorm2d(64, momentum=1, affine=True)), ('relu2', nn.ReLU(inplace=True)), ('pool2', nn.MaxPool2d(2, 2)), ('conv3', nn.Conv2d(64, 64, 3)), ('bn3', nn.BatchNorm2d(64, momentum=1, affine=True)), ('relu3', nn.ReLU(inplace=True)), ('pool3', nn.MaxPool2d(2, 2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_154": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.target_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_401": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.in_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.in_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_405": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_407": {
                "variable": {
                    "value": "ref_meta_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reference_net(inputs, params=ref_fast_weights)",
                            "Call"
                        ],
                        [
                            "self.reference_net(inputs, params=ref_fast_weights)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(self.batch_size, self.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(self.batch_size, self.num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_413": {
                "variable": {
                    "value": "target_meta_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fnet(inputs, params=target_fast_weights)",
                            "Call"
                        ],
                        [
                            "fnet(inputs)",
                            "Call"
                        ],
                        [
                            "fnet(inputs, params=target_fast_weights)",
                            "Call"
                        ],
                        [
                            "fnet(inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(self.batch_size, self.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(self.batch_size, self.num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_norm_48": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(self.batch_size, self.num_in_channels, self.in_h, self.in_w)",
                            "Call"
                        ],
                        [
                            "torch.rand(self.batch_size, self.num_in_channels, self.in_h, self.in_w)",
                            "Call"
                        ],
                        [
                            "torch.rand(self.batch_size, self.num_in_channels, self.in_h, self.in_w)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(np.prod(np.array(inputs.data.size()[1])))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(np.prod(np.array(inputs.data.size()[1])))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool2d_54": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv1.weight'], params['features.conv1.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn1.weight'], bias=params['features.bn1.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv2.weight'], params['features.conv2.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn2.weight'], bias=params['features.bn2.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv3.weight'], params['features.conv3.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn3.weight'], bias=params['features.bn3.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "F.linear(x, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ],
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['features.conv1.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['features.conv1.bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv1.weight'], params['features.conv1.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn1.weight'], bias=params['features.bn1.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv2.weight'], params['features.conv2.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn2.weight'], bias=params['features.bn2.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv3.weight'], params['features.conv3.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn3.weight'], bias=params['features.bn3.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "F.linear(x, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ],
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_74": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv1.weight'], params['features.conv1.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn1.weight'], bias=params['features.bn1.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv2.weight'], params['features.conv2.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn2.weight'], bias=params['features.bn2.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv3.weight'], params['features.conv3.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn3.weight'], bias=params['features.bn3.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "F.linear(x, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ],
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['features.conv2.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['features.conv2.bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv1.weight'], params['features.conv1.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn1.weight'], bias=params['features.bn1.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv2.weight'], params['features.conv2.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn2.weight'], bias=params['features.bn2.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv3.weight'], params['features.conv3.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn3.weight'], bias=params['features.bn3.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "F.linear(x, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ],
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv1.weight'], params['features.conv1.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn1.weight'], bias=params['features.bn1.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv2.weight'], params['features.conv2.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn2.weight'], bias=params['features.bn2.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv3.weight'], params['features.conv3.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn3.weight'], bias=params['features.bn3.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "F.linear(x, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ],
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['features.conv3.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['features.conv3.bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv1.weight'], params['features.conv1.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn1.weight'], bias=params['features.bn1.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv2.weight'], params['features.conv2.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn2.weight'], bias=params['features.bn2.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv3.weight'], params['features.conv3.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn3.weight'], bias=params['features.bn3.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "F.linear(x, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ],
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv1.weight'], params['features.conv1.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn1.weight'], bias=params['features.bn1.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv2.weight'], params['features.conv2.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn2.weight'], bias=params['features.bn2.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, params['features.conv3.weight'], params['features.conv3.bias'])",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x, weight=params['features.bn3.weight'], bias=params['features.bn3.bias'], momentum=1)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x, kernel_size=2, stride=2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "F.linear(x, params['fc.weight'], params['fc.bias'])",
                            "Call"
                        ],
                        [
                            "self.features(x).view(x.size(0), 64)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "params['fc.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "params['fc.bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_353": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.in_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.in_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_357": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_361": {
                "variable": {
                    "value": "ref_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.reference_net(inputs, params=ref_fast_weights)",
                            "Call"
                        ],
                        [
                            "self.reference_net(inputs, params=ref_fast_weights)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(self.batch_size, self.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(self.batch_size, self.num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_362": {
                "variable": {
                    "value": "ref_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "ref_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.mse_loss(ref_preds, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "ref_fast_weights.values()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_380": {
                "variable": {
                    "value": "target_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fnet(inputs, params=target_fast_weights)",
                            "Call"
                        ],
                        [
                            "fnet(inputs)",
                            "Call"
                        ],
                        [
                            "fnet(inputs, params=target_fast_weights)",
                            "Call"
                        ],
                        [
                            "fnet(inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand(self.batch_size, self.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.rand(self.batch_size, self.num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_237": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.in_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.in_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_301": {
                "variable": {
                    "value": "ref_metagrads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "ref_meta_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_out[0]",
                            "Subscript"
                        ],
                        [
                            "ref_out[0]",
                            "Subscript"
                        ],
                        [
                            "ref_out[0]",
                            "Subscript"
                        ],
                        [
                            "F.mse_loss(ref_preds, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.reference_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_304": {
                "variable": {
                    "value": "target_metagrads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "target_meta_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_out[0]",
                            "Subscript"
                        ],
                        [
                            "target_out[0]",
                            "Subscript"
                        ],
                        [
                            "target_out[0]",
                            "Subscript"
                        ],
                        [
                            "F.mse_loss(target_preds, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fnet.parameters(time=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_327": {
                "variable": {
                    "value": "ref_metagrads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "ref_meta_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_out[0]",
                            "Subscript"
                        ],
                        [
                            "ref_out[0]",
                            "Subscript"
                        ],
                        [
                            "ref_out[0]",
                            "Subscript"
                        ],
                        [
                            "F.mse_loss(ref_preds, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.reference_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_330": {
                "variable": {
                    "value": "target_metagrads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "target_meta_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_out[0]",
                            "Subscript"
                        ],
                        [
                            "target_out[0]",
                            "Subscript"
                        ],
                        [
                            "target_out[0]",
                            "Subscript"
                        ],
                        [
                            "F.mse_loss(target_preds, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fnet.parameters(time=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_383": {
                "variable": {
                    "value": "target_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "target_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.mse_loss(target_preds, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "target_fast_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_out[1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "list(fnet.parameters())",
                            "Call"
                        ],
                        [
                            "fnet.parameters()",
                            "Call"
                        ],
                        [
                            "[w - self.lr * g for (w, g) in zip(target_fast_weights, target_grads)]",
                            "ListComp"
                        ],
                        [
                            "fnet.parameters()",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_391": {
                "variable": {
                    "value": "target_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "target_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.mse_loss(target_preds, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "list(fnet.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_183": {
                "input": {
                    "value": "ref_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "target_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_214": {
                "input": {
                    "value": "ref_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "target_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_220": {
                "input": {
                    "value": "ref_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "target_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_241": {
                "input": {
                    "value": "self.reference_net(inputs, params=fast_named_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "fnet(inputs, params=fast_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_267": {
                "input": {
                    "value": "ref_meta_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ref_out[0]",
                            "Subscript"
                        ],
                        [
                            "ref_out[0]",
                            "Subscript"
                        ],
                        [
                            "ref_out[0]",
                            "Subscript"
                        ],
                        [
                            "F.mse_loss(ref_preds, labels)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "target_meta_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_out[0]",
                            "Subscript"
                        ],
                        [
                            "target_out[0]",
                            "Subscript"
                        ],
                        [
                            "target_out[0]",
                            "Subscript"
                        ],
                        [
                            "F.mse_loss(target_preds, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "num_in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_136": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_140": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_144": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_233": {
                "*size": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_optim.py": {
        "torch": {
            "Parameter_316": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(4, 3, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_317": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(4, 3, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_327": {
                "variable": {
                    "value": "fd_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "filter(lambda x: x.requires_grad, net.parameters())",
                            "Call"
                        ],
                        [
                            "self.fc1.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_340": {
                "variable": {
                    "value": "self._model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_348": {
                "variable": {
                    "value": "self._shared_param_seq_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_721": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_722": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_723": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_724": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ones, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_729": {
                "variable": {
                    "value": "inner_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "filter(lambda x: x.requires_grad, net.parameters())",
                            "Call"
                        ],
                        [
                            "self.fc1.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_730": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_760": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': left_parameters, 'lr': left_lr}, {'params': right_parameters}]",
                            "List"
                        ],
                        [
                            "[{'params': left_parameters, 'lr': left_lr}, {'params': right_parameters}]",
                            "List"
                        ],
                        [
                            "[{'params': left_parameters, 'lr': left_lr}, {'params': right_parameters}]",
                            "List"
                        ],
                        [
                            "[{'params': left_parameters, 'lr': left_lr}, {'params': right_parameters}]",
                            "List"
                        ],
                        [
                            "[{'params': left_parameters, 'lr': left_lr}, {'params': right_parameters}]",
                            "List"
                        ],
                        [
                            "[{'params': left_parameters, 'lr': left_lr + 1}, {'params': right_parameters}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ],
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_784": {
                "variable": {
                    "value": "new_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': left_parameters, 'lr': left_lr}, {'params': right_parameters}]",
                            "List"
                        ],
                        [
                            "[{'params': left_parameters, 'lr': left_lr}, {'params': right_parameters}]",
                            "List"
                        ],
                        [
                            "[{'params': left_parameters, 'lr': left_lr}, {'params': right_parameters}]",
                            "List"
                        ],
                        [
                            "[{'params': left_parameters, 'lr': left_lr}, {'params': right_parameters}]",
                            "List"
                        ],
                        [
                            "[{'params': left_parameters, 'lr': left_lr}, {'params': right_parameters}]",
                            "List"
                        ],
                        [
                            "[{'params': left_parameters, 'lr': left_lr + 1}, {'params': right_parameters}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr + 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_306": {
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_316": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_317": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_342": {
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_349": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_350": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_399": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_452": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fmodel(x).pow(2).sum()",
                            "Call"
                        ],
                        [
                            "fmodel(xs[-1]).pow(2).sum()",
                            "Call"
                        ],
                        [
                            "cmodel(xs[-1]).pow(2).sum()",
                            "Call"
                        ],
                        [
                            "loss_func(logits, labels)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fmodel.parameters(time=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_525": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_530": {
                "outputs": {
                    "value": "param_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((p.sum() for p in fmodel.parameters()))",
                            "Call"
                        ],
                        [
                            "sum((p.sum() for p in fmodel.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "meta_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "higher.utils.flatten(override)",
                            "Call"
                        ],
                        [
                            "higher.utils.flatten(override)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_607": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_689": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_694": {
                "outputs": {
                    "value": "param_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((p.sum() for p in fmodel.parameters()))",
                            "Call"
                        ],
                        [
                            "sum((p.sum() for p in fmodel.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "meta_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "higher.utils.flatten(override)",
                            "Call"
                        ],
                        [
                            "higher.utils.flatten(override)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_709": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_710": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_799": {
                "obj": {
                    "value": "old",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_432": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_503": {
                "data": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "allclose_543": {
                "input": {
                    "value": "p1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "p2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_667": {
                "data": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "equal_737": {
                "input": {
                    "value": "*zipped[0]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "equal_738": {
                "input": {
                    "value": "*zipped[1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "equal_739": {
                "input": {
                    "value": "*zipped[2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "equal_740": {
                "input": {
                    "value": "*zipped[3]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_508": {
                "data": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_509": {
                "data": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_512": {
                "data": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_513": {
                "data": {
                    "value": "0.888",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isfinite_532": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(param_sum, meta_params)",
                            "Call"
                        ],
                        [
                            "torch.autograd.grad(param_sum, meta_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_672": {
                "data": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_673": {
                "data": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_676": {
                "data": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_677": {
                "data": {
                    "value": "0.888",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isfinite_696": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(param_sum, meta_params)",
                            "Call"
                        ],
                        [
                            "torch.autograd.grad(param_sum, meta_params)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_696": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_765": {
                "obj": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_462": {
                "input": {
                    "value": "torch.isnan(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_464": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(param_sum, meta_params)",
                            "Call"
                        ],
                        [
                            "torch.autograd.grad(param_sum, meta_params)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "fg",
                    "type": "Variable",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "isnan_462": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(param_sum, meta_params)",
                            "Call"
                        ],
                        [
                            "torch.autograd.grad(param_sum, meta_params)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_patch.py": {
        "torch": {
            "grad_48": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "selector(model(inputs)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "outputs[-1].sum().pow(2)",
                            "Call"
                        ],
                        [
                            "output.sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(4, 3, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(4, 3, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self._model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self._shared_param_seq_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "proj",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self._batchnorm_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(4, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_167": {
                "variable": {
                    "value": "final_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "selector(model(inputs)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "outputs[-1].sum().pow(2)",
                            "Call"
                        ],
                        [
                            "output.sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "used_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(p for (p, g) in zip(fmodel.parameters(time=0), mask) if g)",
                            "GeneratorExp"
                        ],
                        [
                            "(p for (p, g) in zip(fmodel.parameters(time=0), mask) if g)",
                            "GeneratorExp"
                        ]
                    ]
                }
            },
            "SGD_175": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_315": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_334": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_365": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_133": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_156": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_158": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "selector(model(inputs)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "outputs[-1].sum().pow(2)",
                            "Call"
                        ],
                        [
                            "output.sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fmodel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_186": {
                "variable": {
                    "value": "final_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "selector(model(inputs)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "outputs[-1].sum().pow(2)",
                            "Call"
                        ],
                        [
                            "output.sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "used_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(p for (p, g) in zip(fmodel.parameters(time=0), mask) if g)",
                            "GeneratorExp"
                        ],
                        [
                            "(p for (p, g) in zip(fmodel.parameters(time=0), mask) if g)",
                            "GeneratorExp"
                        ]
                    ]
                }
            },
            "randn_205": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_258": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "grad_261": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "selector(model(inputs)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "outputs[-1].sum().pow(2)",
                            "Call"
                        ],
                        [
                            "output.sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "frnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_268": {
                "variable": {
                    "value": "final_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "grad_271": {
                "variable": {
                    "value": "final_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "final_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "final_outputs.sum().pow(2)",
                            "Call"
                        ],
                        [
                            "output_selector(fcell(final_inputs, state)).sum().pow(2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "frnn.parameters(time=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_297": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "selector(model(inputs)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(torch.rand(8, 4)).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "outputs[-1].sum().pow(2)",
                            "Call"
                        ],
                        [
                            "output.sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ],
                        [
                            "fmodel(inputs).sum().pow(2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fcell.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_304": {
                "variable": {
                    "value": "final_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "grad_306": {
                "variable": {
                    "value": "final_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "final_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "final_outputs.sum().pow(2)",
                            "Call"
                        ],
                        [
                            "output_selector(fcell(final_inputs, state)).sum().pow(2)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fcell.parameters(time=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_324": {
                "variable": {
                    "value": "final_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "param_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((p.sum() for p in fmodel.parameters()))",
                            "Call"
                        ],
                        [
                            "sum((p.sum() for p in fmodel.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fmodel.parameters(time=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_344": {
                "variable": {
                    "value": "final_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "param_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum((p.sum() for p in fmodel.parameters()))",
                            "Call"
                        ],
                        [
                            "sum((p.sum() for p in fmodel.parameters()))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "init_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fmodel.parameters(time=0)",
                            "Call"
                        ]
                    ]
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_75": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_76": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_100": {
                "num_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_101": {
                "num_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_153": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_174": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_179": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_233": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_292": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "num_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_320": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_340": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_357": {
                "variable": {
                    "value": "self.submodule",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_362": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_368": {
                "input": {
                    "value": "fmodule(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "fsubmodule(xs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_165": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_182": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}