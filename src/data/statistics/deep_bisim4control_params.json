{
    "agent/baseline_agent.py": {
        "torch": {
            "Adam_86": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.transition_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "decoder_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "decoder_weight_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.log(init_temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "actor_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(actor_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_135": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "critic_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(critic_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "self.log_alpha_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "alpha_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(alpha_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_172": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pos_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_175": {
                "variable": {
                    "value": "self.neg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(self.pos_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_175": {
                "variable": {
                    "value": "self.neg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_236": {
                "variable": {
                    "value": "actor_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actor_Q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(obs, pi, detach_encoder=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_271": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_obs[:, :3, :, :]",
                            "Subscript"
                        ],
                        [
                            "utils.preprocess_obs(target_obs)",
                            "Call"
                        ],
                        [
                            "target_obs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "rec_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(next_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_295": {
                "variable": {
                    "value": "non_final_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tuple(map(lambda s: not (s == 0).all(), next_obs))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_301": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inverse_model(torch.cat([latent, next_latent], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "action[non_final_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.critic.encoder.parameters()) + list(self.transition_model.parameters())",
                            "BinOp"
                        ],
                        [
                            "encoder_params + list(self.inverse_model.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "encoder_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "decoder_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "decoder_weight_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "encoder_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_161": {
                "variable": {
                    "value": "normalization",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_trans_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transition_model(torch.cat([state, action], dim=1))",
                            "Call"
                        ],
                        [
                            "torch.Tensor([1.0]).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_341": {
                "obj": {
                    "value": "self.actor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/actor_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_344": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/critic_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.inverse_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(encoder_feature_dim * 2, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_157": {
                "variable": {
                    "value": "pred_trans_sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_220": {
                "input": {
                    "value": "current_Q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(obs, action, detach_encoder=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward + not_done * self.discount * target_V",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_221": {
                "input": {
                    "value": "current_Q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(obs, action, detach_encoder=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward + not_done * self.discount * target_V",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_266": {
                "tensors": {
                    "value": "[h, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "tensors": {
                    "value": "[latent, next_latent]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_348": {
                "obj": {
                    "value": "self.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/decoder_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_355": {
                "f": {
                    "value": "'%s/actor_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_358": {
                "f": {
                    "value": "'%s/critic_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "[state, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_214": {
                "input": {
                    "value": "target_Q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_target(next_obs, policy_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_362": {
                "f": {
                    "value": "'%s/decoder_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "in_features": {
                    "value": "encoder_feature_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_112": {
                "normalized_shape": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "agent/bisim_agent.py": {
        "torch": {
            "Sequential_86": {
                "variable": {
                    "value": "self.reward_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(encoder_feature_dim, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.log(init_temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "actor_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(actor_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "critic_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(critic_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "self.log_alpha_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "alpha_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(alpha_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.reward_decoder.parameters()) + list(self.transition_model.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "decoder_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "decoder_weight_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "encoder_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_179": {
                "variable": {
                    "value": "actor_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actor_Q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(obs, pi, detach_encoder=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_227": {
                "variable": {
                    "value": "z_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic.encoder(obs)",
                            "Call"
                        ],
                        [
                            "self.critic.encoder(obs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[perm]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_228": {
                "variable": {
                    "value": "r_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer.sample()",
                            "Call"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "reward2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward[perm]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_252": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * diff.pow(2) + torch.log(pred_next_latent_sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_257": {
                "variable": {
                    "value": "reward_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_next_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reward_decoder(pred_next_latent)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer.sample()",
                            "Call"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_217": {
                "variable": {
                    "value": "pred_next_latent_sigma1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_next_latent_mu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transition_model(torch.cat([h, action], dim=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_230": {
                "variable": {
                    "value": "transition_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_next_latent_mu1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transition_model(torch.cat([h, action], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "pred_next_latent_mu2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_next_latent_mu1[perm]",
                            "Subscript"
                        ],
                        [
                            "pred_next_latent_mu1[:, perm]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_232": {
                "variable": {
                    "value": "transition_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pred_next_latent_mu1 - pred_next_latent_mu2).pow(2) + (pred_next_latent_sigma1 - pred_next_latent_sigma2).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_248": {
                "variable": {
                    "value": "pred_next_latent_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_next_latent_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transition_model(torch.cat([h, action], dim=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_293": {
                "obj": {
                    "value": "self.actor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/actor_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_296": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/critic_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_299": {
                "obj": {
                    "value": "self.reward_decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/reward_decoder_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_163": {
                "input": {
                    "value": "current_Q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(obs, action, detach_encoder=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward + not_done * self.discount * target_V",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_164": {
                "input": {
                    "value": "current_Q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(obs, action, detach_encoder=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward + not_done * self.discount * target_V",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_246": {
                "tensors": {
                    "value": "[h, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "tensors": {
                    "value": "[h, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_306": {
                "f": {
                    "value": "'%s/actor_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_309": {
                "f": {
                    "value": "'%s/critic_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_312": {
                "f": {
                    "value": "'%s/reward_decoder_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_157": {
                "input": {
                    "value": "target_Q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_target(next_obs, policy_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_213": {
                "tensors": {
                    "value": "[h, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_252": {
                "input": {
                    "value": "pred_next_latent_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transition_model(torch.cat([h, action], dim=1))",
                            "Call"
                        ],
                        [
                            "torch.ones_like(pred_next_latent_mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "encoder_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_88": {
                "normalized_shape": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "agent/deepmdp_agent.py": {
        "torch": {
            "Sequential_88": {
                "variable": {
                    "value": "self.reward_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(encoder_feature_dim + action_shape[0], 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.log(init_temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "self.decoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "decoder_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.transition_model.parameters()) + list(self.reward_decoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "decoder_params + list(self.decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "decoder_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "decoder_weight_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "encoder_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "actor_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(actor_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "critic_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(critic_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_134": {
                "variable": {
                    "value": "self.log_alpha_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "alpha_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(alpha_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_194": {
                "variable": {
                    "value": "actor_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actor_Q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(obs, pi, detach_encoder=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_226": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * diff.pow(2) + torch.log(pred_next_latent_sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_230": {
                "variable": {
                    "value": "reward_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_next_reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reward_decoder(torch.cat([h, action], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer.sample()",
                            "Call"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_222": {
                "variable": {
                    "value": "pred_next_latent_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_next_latent_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transition_model(torch.cat([h, action], dim=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_250": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_obs[:, :3, :, :]",
                            "Subscript"
                        ],
                        [
                            "utils.preprocess_obs(target_obs)",
                            "Call"
                        ],
                        [
                            "target_obs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "rec_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(h)",
                            "Call"
                        ],
                        [
                            "self.decoder(next_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_253": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(obs).to(self.device)",
                            "Call"
                        ],
                        [
                            "obs.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(obs).to(self.device)",
                            "Call"
                        ],
                        [
                            "obs.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "replay_buffer.sample()",
                            "Call"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "rec_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(h)",
                            "Call"
                        ],
                        [
                            "self.decoder(next_h)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_292": {
                "obj": {
                    "value": "self.actor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/actor_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_295": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/critic_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_178": {
                "input": {
                    "value": "current_Q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(obs, action, detach_encoder=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward + not_done * self.discount * target_V",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_179": {
                "input": {
                    "value": "current_Q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(obs, action, detach_encoder=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward + not_done * self.discount * target_V",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "[h, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "tensors": {
                    "value": "[h, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_299": {
                "obj": {
                    "value": "self.decoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/decoder_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_306": {
                "f": {
                    "value": "'%s/actor_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_309": {
                "f": {
                    "value": "'%s/critic_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_172": {
                "input": {
                    "value": "target_Q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_target(next_obs, policy_action)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_226": {
                "input": {
                    "value": "pred_next_latent_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transition_model(torch.cat([h, action], dim=1))",
                            "Call"
                        ],
                        [
                            "torch.ones_like(pred_next_latent_mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_245": {
                "tensors": {
                    "value": "[h, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_313": {
                "f": {
                    "value": "'%s/decoder_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "encoder_feature_dim + action_shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_90": {
                "normalized_shape": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "decoder.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_dim",
                            "Method Argument"
                        ],
                        [
                            "feature_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_filters * self.init_height * self.init_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.deconvs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconvs[i](deconv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_35": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_32": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pads[i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "encoder.py": {
        "torch": {
            "ModuleList_27": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(obs_shape[0], num_filters, 3, stride=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters * out_dim * out_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_35": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_40": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logstd",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_like_41": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(logstd)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_48": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convs[0](obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_103": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(obs_shape[0], num_filters, 3, stride=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters * out_dims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_111": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * out_dims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_135": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convs[i](conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "obs_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "obs_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "obs_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "logger.py": {
        "torch": {
            "SummaryWriter_107": {
                "variable": {
                    "value": "self._sw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tb_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, 'tb')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(frames)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sac_ae.py": {
        "torch": {
            "tanh_28": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(mu)",
                            "Call"
                        ],
                        [
                            "self.trunk(obs).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "squash(mu, pi, log_pi)",
                            "Call"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_30": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(pi)",
                            "Call"
                        ],
                        [
                            "mu + noise * std",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "squash(mu, pi, log_pi)",
                            "Call"
                        ],
                        [
                            "pi",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.encoder.feature_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_84": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.trunk(obs).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(log_std)",
                            "Call"
                        ],
                        [
                            "self.log_std_min + 0.5 * (self.log_std_max - self.log_std_min) * (log_std + 1)",
                            "BinOp"
                        ],
                        [
                            "log_std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(obs_dim + action_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_32": {
                "input": {
                    "value": "F.relu(1 - pi.pow(2)) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_94": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(mu)",
                            "Call"
                        ],
                        [
                            "self.trunk(obs).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "squash(mu, pi, log_pi)",
                            "Call"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "self.encoder.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * action_shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "obs_dim + action_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_129": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "input": {
                    "value": "1 - pi.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_335": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_264": {
                "variable": {
                    "value": "encoder_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'obs': obses, 'values': values, 'embeddings': embeddings}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(embed_viz_dir, 'train_dataset_{}.pt'.format(step))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_123": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_vae.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_78": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "train_dataset.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset['obs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_94": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dataset.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_97": {
                "obj": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vae.encoder(torch.FloatTensor(dataset['obs']).to(device)).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "vae_embeddings.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_like_54": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[:, :50]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "rec_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder(reparam)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_57": {
                "variable": {
                    "value": "BCE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rec_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.decoder(reparam))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "obs / 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "1 + log_var - mu.pow(2) - log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_55": {
                "input": {
                    "value": "log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transition_model.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_feature_dim + action_shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_17": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "layer_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encoder_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ],
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ],
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ],
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.ln(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.ln(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "encoder_feature_dim + action_shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_40": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "layer_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encoder_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ],
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ],
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ],
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layer_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ],
                        [
                            "layer_width",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "encoder_feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ],
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ],
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ],
                        [
                            "encoder_feature_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.ln(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.ln(x)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_56": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_sigma(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_62": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.fc_sigma(x))",
                            "Call"
                        ],
                        [
                            "self.min_sigma + (self.max_sigma - self.min_sigma) * sigma",
                            "BinOp"
                        ],
                        [
                            "self(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_76": {
                "tensors": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*mu_sigma_list)",
                            "Call"
                        ],
                        [
                            "torch.stack(sigmas)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "manual_seed_40": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "floor_67": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs / 2 ** (8 - bits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_112": {
                "variable": {
                    "value": "obses",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.obses[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_113": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.actions[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_114": {
                "variable": {
                    "value": "curr_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.curr_rewards[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_115": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.rewards[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_116": {
                "variable": {
                    "value": "next_obses",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.next_obses[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_119": {
                "variable": {
                    "value": "not_dones",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.not_dones[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_42": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_137": {
                "obj": {
                    "value": "payload",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.obses[self.last_save:self.idx], self.next_obses[self.last_save:self.idx], self.actions[self.last_save:self.idx], self.rewards[self.last_save:self.idx], self.curr_rewards[self.last_save:self.idx], self.not_dones[self.last_save:self.idx]]",
                            "List"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, '%d_%d.pt' % (self.last_save, self.idx))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_145": {
                "variable": {
                    "value": "payload",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, '%d_%d.pt' % (self.last_save, self.idx))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_69": {
                "input": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(obs / 2 ** (8 - bits))",
                            "Call"
                        ],
                        [
                            "obs / bins",
                            "BinOp"
                        ],
                        [
                            "obs + torch.rand_like(obs) / bins",
                            "BinOp"
                        ],
                        [
                            "obs - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.env.reset()",
                            "Call"
                        ],
                        [
                            "self.env.step(action)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ],
                        [
                            "obs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_121": {
                "data": {
                    "value": "self.k_obses[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}