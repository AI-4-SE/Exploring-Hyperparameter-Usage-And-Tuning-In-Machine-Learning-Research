{
    "detector/pcdet/datasets/waymo/waymo_eval.py": {
        "tensorflow": {
            "get_logger_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_205": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "self._pd_frame_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "self._pd_bbox",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "self._pd_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "self._pd_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "self._pd_overlap_nlz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "self._gt_frame_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "self._gt_bbox",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "self._gt_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "self._gt_difficulty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_152": {
                "*inputs": {
                    "value": "[value[1] for value in metrics.values()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "local_variables_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "detection_metrics",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/datasets/waymo/waymo_utils.py": {
        "tensorflow": {
            "convert_to_tensor_87": {
                "variable": {
                    "value": "frame_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.reshape(np.array(frame.pose.transform), [4, 4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "range_image_top_pose_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(range_image_top_pose.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "range_image_top_pose.shape.dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_180": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "str(sequence_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "enable_eager_execution_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reverse_109": {
                "variable": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.compute_inclination(tf.constant([c.beam_inclination_min, c.beam_inclination_max]), height=range_image.shape.dims[0])",
                            "Call"
                        ],
                        [
                            "tf.constant(c.beam_inclinations)",
                            "Call"
                        ],
                        [
                            "tf.reverse(beam_inclinations, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "range_image_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(range_image.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "range_image.shape.dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_131": {
                "variable": {
                    "value": "range_image_cartesian",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range_image_cartesian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.extract_point_cloud_from_range_image(tf.expand_dims(range_image_tensor[..., 0], axis=0), tf.expand_dims(extrinsic, axis=0), tf.expand_dims(tf.convert_to_tensor(beam_inclinations), axis=0), pixel_pose=pixel_pose_local, frame_pose=frame_pose_local)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(range_image_cartesian, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_132": {
                "variable": {
                    "value": "points_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_cartesian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.extract_point_cloud_from_range_image(tf.expand_dims(range_image_tensor[..., 0], axis=0), tf.expand_dims(extrinsic, axis=0), tf.expand_dims(tf.convert_to_tensor(beam_inclinations), axis=0), pixel_pose=pixel_pose_local, frame_pose=frame_pose_local)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(range_image_cartesian, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_134": {
                "variable": {
                    "value": "points_NLZ_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_NLZ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 3]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.compat.v1.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_135": {
                "variable": {
                    "value": "points_intensity_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_intensity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 1]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.compat.v1.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_136": {
                "variable": {
                    "value": "points_elongation_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_elongation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 2]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.compat.v1.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "cp_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(cp.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "cp.shape.dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_139": {
                "variable": {
                    "value": "cp_points_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cp_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.convert_to_tensor(cp.data), cp.shape.dims)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_90": {
                "value": {
                    "value": "range_image_top_pose.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_107": {
                "variable": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "c.beam_inclinations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_118": {
                "variable": {
                    "value": "pixel_pose_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_pose_local",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "range_image_top_pose_tensor",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(pixel_pose_local, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_119": {
                "variable": {
                    "value": "frame_pose_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(np.reshape(np.array(frame.pose.transform), [4, 4]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_113": {
                "value": {
                    "value": "range_image.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_125": {
                "input": {
                    "value": "range_image_tensor[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "extrinsic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(np.array(c.extrinsic.transform), [4, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_127": {
                "input": {
                    "value": "tf.convert_to_tensor(beam_inclinations)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_133": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "where_134": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "where_135": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "where_136": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "convert_to_tensor_138": {
                "value": {
                    "value": "cp.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_139": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "constant_104": {
                "value": {
                    "value": "[c.beam_inclination_min, c.beam_inclination_max]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_127": {
                "value": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.compute_inclination(tf.constant([c.beam_inclination_min, c.beam_inclination_max]), height=range_image.shape.dims[0])",
                            "Call"
                        ],
                        [
                            "tf.constant(c.beam_inclinations)",
                            "Call"
                        ],
                        [
                            "tf.reverse(beam_inclinations, axis=[-1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detector/pcdet/datasets/__init__.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "__all__[dataset_cfg.DATASET](dataset_cfg=dataset_cfg, class_names=class_names, root_path=root_path, training=training, logger=logger)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "sampler is None and training",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "timeout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Generator_30": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_32": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_34": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_62": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "__all__[dataset_cfg.DATASET](dataset_cfg=dataset_cfg, class_names=class_names, root_path=root_path, training=training, logger=logger)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "detector/pcdet/datasets/dataset.py": {
        "torch": {}
    },
    "detector/pcdet/datasets/kitti/kitti_dataset.py": {
        "torch": {
            "from_numpy_218": {
                "ndarray": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "annos['gt_boxes_lidar']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "detector/pcdet/datasets/kitti/painted_kitti_dataset.py": {
        "torch": {
            "from_numpy_238": {
                "ndarray": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "annos['gt_boxes_lidar']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "detector/pcdet/datasets/nuscenes/nuscenes_dataset.py": {
        "torch": {
            "from_numpy_271": {
                "ndarray": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_271": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_272": {
                "ndarray": {
                    "value": "gt_boxes[:, 0:7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_272": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/datasets/waymo/waymo_dataset.py": {
        "torch": {
            "from_numpy_280": {
                "ndarray": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_280": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_281": {
                "ndarray": {
                    "value": "gt_boxes[:, 0:7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_281": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/__init__.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "batch_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_dict.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detector/pcdet/models/backbones_2d/base_bev_backbone.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.deblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_32": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "c_in_list[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "layer_strides[idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.model_cfg.LAYER_STRIDES",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "*cur_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "*args": {
                    "value": "nn.ConvTranspose2d(c_in, c_in, upsample_strides[-1], stride=upsample_strides[-1], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_74": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(num_upsample_filters)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(num_upsample_filters)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "upsample_strides[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "upsample_strides[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.model_cfg.UPSAMPLE_STRIDES",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(num_upsample_filters)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "nn.ConvTranspose2d(num_filters[idx], num_upsample_filters[idx], upsample_strides[idx], stride=upsample_strides[idx], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "nn.Conv2d(num_filters[idx], num_upsample_filters[idx], stride, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "in_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "upsample_strides[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "upsample_strides[idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.model_cfg.UPSAMPLE_STRIDES",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_strides[idx]",
                            "Subscript"
                        ],
                        [
                            "np.round(1 / stride).astype(np.int)",
                            "Call"
                        ],
                        [
                            "int(spatial_features.shape[2] / x.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_strides[idx]",
                            "Subscript"
                        ],
                        [
                            "np.round(1 / stride).astype(np.int)",
                            "Call"
                        ],
                        [
                            "int(spatial_features.shape[2] / x.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/backbones_2d/map_to_bev/height_compression.py": {
        "torch": {}
    },
    "detector/pcdet/models/backbones_2d/map_to_bev/pointpillar_scatter.py": {
        "torch": {
            "stack_34": {
                "variable": {
                    "value": "batch_spatial_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_spatial_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_spatial_features, 0)",
                            "Call"
                        ],
                        [
                            "batch_spatial_features.view(batch_size, self.num_bev_features * self.nz, self.ny, self.nx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "spatial_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_bev_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz * self.nx * self.ny",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pillar_features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/backbones_3d/pfe/voxel_set_abstraction.py": {
        "torch": {
            "floor_19": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_22": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_25": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(x).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(x0, 0, im.shape[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_26": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x1, 0, im.shape[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(y).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(y0, 0, im.shape[0] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_28": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(y1, 0, im.shape[0] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.SA_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.vsa_point_feature_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(c_in, self.model_cfg.NUM_OUTPUT_FEATURES, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "point_bev_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_bev_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "keypoints_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "point_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_231": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_dict['batch_size']",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "keypoints.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_idx.view(-1, 1).float(), keypoints.view(-1, 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_39": {
                "input": {
                    "value": "Ib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im[y1, x0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c_in + sum([x[-1] for x in mlps])",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.model_cfg.NUM_OUTPUT_FEATURES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_96": {
                "num_features": {
                    "value": "self.model_cfg.NUM_OUTPUT_FEATURES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/backbones_3d/pointnet2_backbone.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.FP_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "batch_dict[point_coords]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_idx[:, None].float(), l_xyz[0].view(-1, 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_106": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.FP_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "batch_dict[point_coords]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_idx[:, None].float(), l_xyz[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_xyz_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/backbones_3d/spconv_backbone.py": {
        "torch": {
            "ReLU_41": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/backbones_3d/spconv_unet.py": {
        "torch": {
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "x.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_bottom.features, x_trans.features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "batch_dict[point_coords]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_up1.indices[:, 0:1].float(), point_coords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/backbones_3d/vfe/mean_vfe.py": {
        "torch": {}
    },
    "detector/pcdet/models/backbones_3d/vfe/pillar_vfe.py": {
        "torch": {
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(part_linear_out, dim=0)",
                            "Call"
                        ],
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1) if self.use_norm else x",
                            "IfExp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.pfn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "pfn_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_87": {
                "variable": {
                    "value": "actual_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actual_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(actual_num, axis + 1)",
                            "Call"
                        ],
                        [
                            "actual_num",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_90": {
                "variable": {
                    "value": "max_num",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_num, dtype=torch.int, device=actual_num.device).view(max_num_shape)",
                            "Call"
                        ],
                        [
                            "max_num",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "actual_num.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "f_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxel_features[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[voxel_features, f_cluster, f_center]",
                            "List"
                        ],
                        [
                            "[voxel_features[..., 3:], f_cluster, f_center]",
                            "List"
                        ],
                        [
                            "torch.cat(features, dim=-1)",
                            "Call"
                        ],
                        [
                            "features * mask",
                            "BinOp"
                        ],
                        [
                            "pfn(features)",
                            "Call"
                        ],
                        [
                            "features.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_117": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_paddings_indicator(voxel_num_points, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(voxel_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "part_linear_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.linear(inputs[num_part * self.part:(num_part + 1) * self.part]) for num_part in range(num_parts + 1)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "x_concatenated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_repeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_111": {
                "variable": {
                    "value": "points_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxel_features[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(part_linear_out, dim=0)",
                            "Call"
                        ],
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1) if self.use_norm else x",
                            "IfExp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/backbones_3d/vfe/vfe_template.py": {
        "torch": {}
    },
    "detector/pcdet/models/dense_heads/anchor_head_multi.py": {
        "torch": {
            "ModuleList_196": {
                "variable": {
                    "value": "self.rpn_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rpn_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_274": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*list(cls_targets.shape)",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_class + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cls_preds[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleDict_23": {
                "variable": {
                    "value": "self.conv_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_cls_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.num_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.code_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv_dir_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.model_cfg.NUM_DIR_BINS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "box_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.shared_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, shared_conv_num_filter, 3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_184": {
                "variable": {
                    "value": "head_label_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([self.class_names.index(cur_name) + 1 for cur_name in rpn_head_cfg['HEAD_CLS_NAME']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_271": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_272": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_312": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.conv_box[fconv_{reg_name}]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cur_conv_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[anchor.permute(3, 4, 0, 1, 2, 5).contiguous().view(-1, anchor.shape[-1]) for anchor in self.anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.num_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "shared_conv_num_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.SHARED_CONV_NUM_FILTER",
                            "Attribute"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_165": {
                "num_features": {
                    "value": "shared_conv_num_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.SHARED_CONV_NUM_FILTER",
                            "Attribute"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_210": {
                "tensors": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_cls(spatial_features_2d)",
                            "Call"
                        ],
                        [
                            "cls_preds.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "cls_preds.view(-1, self.num_anchors_per_location, self.num_class, H, W).permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, self.num_class)",
                            "Call"
                        ],
                        [
                            "[ret_dict['cls_preds'] for ret_dict in ret_dicts]",
                            "ListComp"
                        ],
                        [
                            "self.forward_ret_dict['cls_preds']",
                            "Subscript"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "tensors": {
                    "value": "box_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_box(spatial_features_2d)",
                            "Call"
                        ],
                        [
                            "box_preds.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "box_preds.view(-1, self.num_anchors_per_location, self.code_size, H, W).permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "box_preds.view(batch_size, -1, self.code_size)",
                            "Call"
                        ],
                        [
                            "torch.cat(box_preds_list, dim=1)",
                            "Call"
                        ],
                        [
                            "[ret_dict['box_preds'] for ret_dict in ret_dicts]",
                            "ListComp"
                        ],
                        [
                            "self.forward_ret_dict['box_preds']",
                            "Subscript"
                        ],
                        [
                            "[box_preds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "tensors": {
                    "value": "dir_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_dir_cls(spatial_features_2d)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dir_cls_preds.view(-1, self.num_anchors_per_location, self.model_cfg.NUM_DIR_BINS, H, W).permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "dir_cls_preds.view(batch_size, -1, self.model_cfg.NUM_DIR_BINS)",
                            "Call"
                        ],
                        [
                            "dir_cls_preds.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "[ret_dict['dir_cls_preds'] for ret_dict in ret_dicts]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_363": {
                "input": {
                    "value": "weights.sum(-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * int(reg_channel)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_middle_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.separate_reg_config.NUM_MIDDLE_FILTER",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "num_middle_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.separate_reg_config.NUM_MIDDLE_FILTER",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_middle_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.separate_reg_config.NUM_MIDDLE_FILTER",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "num_middle_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.separate_reg_config.NUM_MIDDLE_FILTER",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/dense_heads/anchor_head_single.py": {
        "torch": {
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.num_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.box_coder.code_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv_dir_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.model_cfg.NUM_DIR_BINS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/dense_heads/anchor_head_template.py": {
        "torch": {
            "zeros_122": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*list(cls_targets.shape)",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_class + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cls_preds.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes1[..., :dim], rad_pred_encoding, boxes1[..., dim + 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes2[..., :dim], rad_tg_encoding, boxes2[..., dim + 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floor_152": {
                "variable": {
                    "value": "dir_cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset_rot / (2 * np.pi / num_bins)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_153": {
                "variable": {
                    "value": "dir_cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dir_cls_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(offset_rot / (2 * np.pi / num_bins)).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(dir_cls_targets, min=0, max=num_bins - 1)",
                            "Call"
                        ],
                        [
                            "dir_targets",
                            "variable"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_bins - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_116": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_117": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "dir_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*list(dir_cls_targets.shape)",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "anchors.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "dir_cls_targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_172": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "new_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(anchors, pad_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_140": {
                "input": {
                    "value": "boxes1[..., dim:dim + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_140": {
                "input": {
                    "value": "boxes2[..., dim:dim + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_141": {
                "input": {
                    "value": "boxes1[..., dim:dim + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_141": {
                "input": {
                    "value": "boxes2[..., dim:dim + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[anchor.permute(3, 4, 0, 1, 2, 5).contiguous().view(-1, anchor.shape[-1]) for anchor in self.anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_207": {
                "input": {
                    "value": "weights.sum(-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[anchor.permute(3, 4, 0, 1, 2, 5).contiguous().view(-1, anchor.shape[-1]) for anchor in self.anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_251": {
                "tensors": {
                    "value": "box_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_ret_dict['box_preds']",
                            "Subscript"
                        ],
                        [
                            "box_preds.view(batch_size, -1, box_preds.shape[-1] // self.num_anchors_per_location if not self.use_multihead else box_preds.shape[-1])",
                            "Call"
                        ],
                        [
                            "box_preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "dir_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dir_cls_preds.view(batch_size, num_anchors, -1) if not isinstance(dir_cls_preds, list) else torch.cat(dir_cls_preds, dim=1).view(batch_size, num_anchors, -1)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_259": {
                "input": {
                    "value": "dir_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dir_cls_preds.view(batch_size, num_anchors, -1) if not isinstance(dir_cls_preds, list) else torch.cat(dir_cls_preds, dim=1).view(batch_size, num_anchors, -1)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/dense_heads/point_head_box.py": {
        "torch": {
            "sigmoid_94": {
                "variable": {
                    "value": "batch_dict[point_cls_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cls_preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cls_preds.max(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detector/pcdet/models/dense_heads/point_head_simple.py": {
        "torch": {
            "sigmoid_83": {
                "variable": {
                    "value": "point_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_layers(point_features)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detector/pcdet/models/dense_heads/point_head_template.py": {
        "torch": {
            "binary_cross_entropy_162": {
                "variable": {
                    "value": "point_loss_part",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(point_part_preds)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "point_part_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.new_zeros((points.shape[0], 3)) if ret_part_labels else None",
                            "IfExp"
                        ],
                        [
                            "self.forward_ret_dict['point_part_labels']",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "*fc_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "clamp_139": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(dim=0).float()",
                            "Call"
                        ],
                        [
                            "max(1, (pos_mask > 0).sum().item())",
                            "Call"
                        ],
                        [
                            "pos_mask.sum().float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_179": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(dim=0).float()",
                            "Call"
                        ],
                        [
                            "max(1, (pos_mask > 0).sum().item())",
                            "Call"
                        ],
                        [
                            "pos_mask.sum().float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_cfg[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_162": {
                "input": {
                    "value": "point_part_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_ret_dict['point_part_preds']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_cfg[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc_cfg[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_42": {
                "num_features": {
                    "value": "fc_cfg[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/dense_heads/point_intra_part_head.py": {
        "torch": {
            "sigmoid_105": {
                "variable": {
                    "value": "point_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_layers(point_features)",
                            "Call"
                        ],
                        [
                            "self.generate_predicted_boxes(points=batch_dict['point_coords'][:, 1:4], point_cls_preds=point_cls_preds, point_box_preds=ret_dict['point_box_preds'])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_106": {
                "variable": {
                    "value": "point_part_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_part_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.part_reg_layers(point_features)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detector/pcdet/models/dense_heads/target_assigner/anchor_generator.py": {
        "torch": {
            "arange_34": {
                "variable": {
                    "value": "x_shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.anchor_range[0] + x_offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "self.anchor_range[3] + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "x_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.anchor_range[3] - self.anchor_range[0]) / grid_size[0]",
                            "BinOp"
                        ],
                        [
                            "(self.anchor_range[3] - self.anchor_range[0]) / (grid_size[0] - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_37": {
                "variable": {
                    "value": "y_shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.anchor_range[1] + y_offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "self.anchor_range[4] + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "y_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.anchor_range[4] - self.anchor_range[1]) / grid_size[1]",
                            "BinOp"
                        ],
                        [
                            "(self.anchor_range[4] - self.anchor_range[1]) / (grid_size[1] - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_45": {
                "variable": {
                    "value": "(x_shifts, y_shifts, z_shifts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[x_shifts, y_shifts, z_shifts]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_shifts, y_shifts, z_shifts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(anchors, anchor_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(anchors, anchor_rotation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/dense_heads/target_assigner/atss_target_assigner.py": {
        "torch": {
            "full_like_118": {
                "variable": {
                    "value": "ious_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(anchors[:, 0:7], gt_boxes[:, 0:7])",
                            "Call"
                        ],
                        [
                            "iou3d_nms_utils.boxes_iou_bev(anchors[:, 0:7], gt_boxes[:, 0:7])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "INF",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-2147483647",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "t_118": {
                "variable": {
                    "value": "ious_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_127": {
                "variable": {
                    "value": "anchors_to_gt_indexs[argmax_iou_of_each_gt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "ious.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cls_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "gt_classes[anchors_to_gt_indexs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "reg_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reg_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(reg_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "matched_gts.new_zeros((num_anchor, self.box_coder.code_size))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "reg_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reg_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(reg_weights, dim=0)",
                            "Call"
                        ],
                        [
                            "matched_gts.new_zeros(num_anchor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "cls_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "reg_targets_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "reg_weights_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_95": {
                "start": {
                    "value": "num_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "detector/pcdet/models/dense_heads/target_assigner/axis_aligned_target_assigner.py": {
        "torch": {
            "stack_120": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(bbox_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "anchors.new_zeros((num_anchors, self.box_coder.code_size))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cls_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "reg_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reg_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(reg_weights, dim=0)",
                            "Call"
                        ],
                        [
                            "anchors.new_zeros((num_anchors,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "anchor_to_gt_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_by_gt_overlap.cpu().numpy().argmax(axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "gt_to_anchor_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_by_gt_overlap.cpu().numpy().argmax(axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_165": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "target_dict[box_reg_targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['box_reg_targets']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "target_dict[box_cls_labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['box_cls_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "target_dict[reg_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['reg_weights']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "target_dict[box_reg_targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['box_reg_targets']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "target_dict[box_cls_labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['box_cls_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "target_dict[reg_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['reg_weights']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_137": {
                "*size": {
                    "value": "(num_anchors,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_138": {
                "*size": {
                    "value": "(num_anchors,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.class_names[cur_gt_classes.cpu() - 1] == anchor_class_name",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.class_names[c - 1] == anchor_class_name for c in cur_gt_classes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_146": {
                "start": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_150": {
                "start": {
                    "value": "num_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_173": {
                "n": {
                    "value": "len(fg_inds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_179": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(bg_inds)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_bg,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/detectors/detector3d_template.py": {
        "torch": {
            "load_326": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_354": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_237": {
                "variable": {
                    "value": "final_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "final_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "final_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_241": {
                "variable": {
                    "value": "(cls_preds, label_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_dict['batch_cls_preds'][batch_mask]",
                            "Subscript"
                        ],
                        [
                            "[x[batch_mask] for x in batch_dict['batch_cls_preds']]",
                            "ListComp"
                        ],
                        [
                            "[torch.sigmoid(x) for x in cls_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.max(cls_preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "iou3d_rcnn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, cur_gt.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_325": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_353": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_207": {
                "variable": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_dict['batch_cls_preds'][batch_mask]",
                            "Subscript"
                        ],
                        [
                            "[x[batch_mask] for x in batch_dict['batch_cls_preds']]",
                            "ListComp"
                        ],
                        [
                            "[torch.sigmoid(x) for x in cls_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.max(cls_preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ]
                    ]
                }
            },
            "max_254": {
                "variable": {
                    "value": "(max_cls_preds, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_preds",
                            "variable"
                        ],
                        [
                            "cls_preds",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_370": {
                "variable": {
                    "value": "optimizer_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_optim.%s' % (src_file, ext)",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sigmoid_212": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_217": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_preds[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/model_utils/model_nms_utils.py": {
        "torch": {
            "cat_61": {
                "variable": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_scores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_boxes, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_15": {
                "variable": {
                    "value": "(box_scores_nms, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores[scores_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[scores_mask, k]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[:, k]",
                            "Subscript"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "min(nms_config.NMS_PRE_MAXSIZE, box_scores.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_50": {
                "variable": {
                    "value": "(box_scores_nms, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores[scores_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[scores_mask, k]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[:, k]",
                            "Subscript"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "min(nms_config.NMS_PRE_MAXSIZE, box_scores.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/roi_heads/partA2_head.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.shared_fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_fc_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "part_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_dict['point_part_offset'] if not self.model_cfg.get('DISABLE_PART', False) else point_coords, batch_dict['point_cls_scores'].view(-1, 1).detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "pooled_part_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled_part_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "pooled_rpn_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled_rpn_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_159": {
                "variable": {
                    "value": "bs_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size_rcnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_part_features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size_rcnn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_160": {
                "variable": {
                    "value": "sparse_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bs_idxs, sparse_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "merged_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_rpn.features, x_part.features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_83": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.ROI_AWARE_POOL.NUM_FEATURES * pool_size * pool_size * pool_size",
                            "BinOp"
                        ],
                        [
                            "self.model_cfg.SHARED_FC[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_34": {
                "num_features": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_97": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/roi_heads/pointrcnn_head.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.xyz_up_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.merge_down_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_out * 2, c_out, kernel_size=1, bias=not use_bn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "point_features_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[point_scores[:, None], point_depths[:, None], point_features]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "merged_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xyz_features, point_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "c_out * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.XYZ_UP_LAYER[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "xyz_mlps[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "xyz_mlps[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "xyz_mlps[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.XYZ_UP_LAYER[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/roi_heads/pvrcnn_head.py": {
        "torch": {
            "Sequential_41": {
                "variable": {
                    "value": "self.shared_fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_fc_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_32": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GRID_SIZE * GRID_SIZE * GRID_SIZE * c_out",
                            "BinOp"
                        ],
                        [
                            "self.model_cfg.SHARED_FC[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/roi_heads/roi_head_template.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "fc_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_127": {
                "variable": {
                    "value": "heading_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heading_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_of_rois[:, :, 6] % (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(heading_label, min=-np.pi / 2, max=np.pi / 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_81": {
                "variable": {
                    "value": "(cur_roi_scores, cur_roi_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_cls_preds[batch_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_203": {
                "variable": {
                    "value": "batch_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(rcnn_cls_flat)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rcnn_cls_labels.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1d_41": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_list[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_207": {
                "variable": {
                    "value": "batch_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rcnn_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_ret_dict['rcnn_cls']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "rcnn_cls_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_ret_dict['rcnn_cls_labels'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_203": {
                "input": {
                    "value": "rcnn_cls_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rcnn_cls.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_205": {
                "input": {
                    "value": "cls_valid_mask.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_34": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_list[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fc_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "num_features": {
                    "value": "fc_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_209": {
                "input": {
                    "value": "cls_valid_mask.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/models/roi_heads/target_assigner/proposal_target_layer.py": {
        "torch": {
            "cat_161": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fg_inds, bg_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_num_rois)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_171": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "hard_bg_inds.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(hard_bg_rois_num,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_175": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "easy_bg_inds.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(easy_bg_rois_num,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hard_bg_inds, easy_bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_105": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt[:, 0:7])",
                            "Call"
                        ],
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(max_overlaps).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(self.roi_sampler_cfg.ROI_PER_IMAGE) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(max_overlaps).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_182": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "hard_bg_inds.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(hard_bg_rois_num,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_224": {
                "variable": {
                    "value": "(cur_max_overlaps, cur_gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt[:, 0:7])",
                            "Call"
                        ],
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_187": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "easy_bg_inds.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(easy_bg_rois_num,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/ops/iou3d_nms/iou3d_nms_utils.py": {
        "torch": {
            "max_69": {
                "variable": {
                    "value": "max_of_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(boxes_a[:, 2] - boxes_a[:, 5] / 2).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_70": {
                "variable": {
                    "value": "min_of_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(boxes_a[:, 2] + boxes_a[:, 5] / 2).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_71": {
                "variable": {
                    "value": "overlaps_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_of_max - max_of_min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_79": {
                "input": {
                    "value": "vol_a + vol_b - overlaps_3d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/ops/pointnet2/pointnet2_batch/pointnet2_modules.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_155": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_55": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_46": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "mlp[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "num_features": {
                    "value": "mlp[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "mlp_spec[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "mlp_spec[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/ops/pointnet2/pointnet2_batch/pointnet2_utils.py": {
        "torch": {
            "sqrt_98": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(B, N, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_257": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/ops/pointnet2/pointnet2_stack/pointnet2_modules.py": {
        "torch": {
            "ModuleList_26": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_124": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknown_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_78": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[k](xyz, xyz_batch_cnt, new_xyz, new_xyz_batch_cnt, features)",
                            "Call"
                        ],
                        [
                            "new_features.permute(1, 0, 2).unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.mlps[k](new_features)",
                            "Call"
                        ],
                        [
                            "torch.cat(new_features_list, dim=1)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(dim=0).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknown_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.permute(1, 0)[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(dim=0).squeeze(dim=-1).permute(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_82": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[k](xyz, xyz_batch_cnt, new_xyz, new_xyz_batch_cnt, features)",
                            "Call"
                        ],
                        [
                            "new_features.permute(1, 0, 2).unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.mlps[k](new_features)",
                            "Call"
                        ],
                        [
                            "torch.cat(new_features_list, dim=1)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(dim=0).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknown_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.permute(1, 0)[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(dim=0).squeeze(dim=-1).permute(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "mlp[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "mlp[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "mlp_spec[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "mlp_spec[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/ops/pointnet2/pointnet2_stack/pointnet2_utils.py": {
        "torch": {
            "cat_148": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_213": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unknown.new_zeros(unknown.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detector/pcdet/ops/roiaware_pool3d/roiaware_pool3d_utils.py": {
        "torch": {}
    },
    "detector/pcdet/ops/roipoint_pool3d/roipoint_pool3d_utils.py": {
        "torch": {}
    },
    "detector/pcdet/utils/box_coder_utils.py": {
        "torch": {
            "split_25": {
                "variable": {
                    "value": "(xa, ya, za, dxa, dya, dza, ra, *cas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_26": {
                "variable": {
                    "value": "(xg, yg, zg, dxg, dyg, dzg, rg, *cgs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_32": {
                "variable": {
                    "value": "dxt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxg / dxa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_33": {
                "variable": {
                    "value": "dyt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dyg / dya",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_34": {
                "variable": {
                    "value": "dzt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dzg / dza",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_54": {
                "variable": {
                    "value": "(xa, ya, za, dxa, dya, dza, ra, *cas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_60": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_95": {
                "variable": {
                    "value": "(xa, ya, za, dxa, dya, dza, ra, *cas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_96": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rt, *cts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_98": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_127": {
                "variable": {
                    "value": "(xa, ya, za, dxa, dya, dza, ra, *cas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_128": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rt, *cts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_130": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_164": {
                "variable": {
                    "value": "(xg, yg, zg, dxg, dyg, dzg, rg, *cgs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_165": {
                "variable": {
                    "value": "(xa, ya, za)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_198": {
                "variable": {
                    "value": "(xt, yt, zt, dxt, dyt, dzt, cost, sint, *cts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_199": {
                "variable": {
                    "value": "(xa, ya, za)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_219": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "[xt, yt, zt, dxt, dyt, dzt, *rts, *cts]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_56": {
                "variable": {
                    "value": "(xt, yt, zt, dxt, dyt, dzt, rt, *cts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_58": {
                "variable": {
                    "value": "(xt, yt, zt, dxt, dyt, dzt, cost, sint, *cts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_72": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rg_sin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sint + torch.sin(ra)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rg_cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cost + torch.cos(ra)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[xg, yg, zg, dxg, dyg, dzg, rg, *cgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "[xg, yg, zg, dxg, dyg, dzg, rg, *cgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[xg, yg, zg, dxg, dyg, dzg, rg, *cgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "self.mean_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(kwargs['mean_size'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_170": {
                "variable": {
                    "value": "(dxa, dya, dza)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mean_size[gt_classes - 1]",
                            "Subscript"
                        ],
                        [
                            "self.mean_size[pred_classes - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_171": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_175": {
                "variable": {
                    "value": "dxt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxg / dxa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_176": {
                "variable": {
                    "value": "dyt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dyg / dya",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_177": {
                "variable": {
                    "value": "dzt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dzg / dza",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_182": {
                "variable": {
                    "value": "dxt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dxt) * dxa",
                            "BinOp"
                        ],
                        [
                            "torch.exp(lt) * dxa",
                            "BinOp"
                        ],
                        [
                            "torch.exp(lt) * dxa",
                            "BinOp"
                        ],
                        [
                            "torch.split(gt_boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(torch.exp(box_encodings[..., 3:6]), 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dxt) * dxa",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_183": {
                "variable": {
                    "value": "dyt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dyg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dyt) * dya",
                            "BinOp"
                        ],
                        [
                            "torch.exp(wt) * dya",
                            "BinOp"
                        ],
                        [
                            "torch.exp(wt) * dya",
                            "BinOp"
                        ],
                        [
                            "torch.split(gt_boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(torch.exp(box_encodings[..., 3:6]), 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dyt) * dya",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_184": {
                "variable": {
                    "value": "dzt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dzg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dzt) * dza",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ht) * dza",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ht) * dza",
                            "BinOp"
                        ],
                        [
                            "torch.split(gt_boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(torch.exp(box_encodings[..., 3:6]), 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dzt) * dza",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "[xt, yt, zt, dxt, dyt, dzt, torch.cos(rg), torch.sin(rg), *cts]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_204": {
                "variable": {
                    "value": "(dxa, dya, dza)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mean_size[gt_classes - 1]",
                            "Subscript"
                        ],
                        [
                            "self.mean_size[pred_classes - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_205": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_217": {
                "variable": {
                    "value": "(dxg, dyg, dzg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.exp(box_encodings[..., 3:6])",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_222": {
                "tensors": {
                    "value": "[xg, yg, zg, dxg, dyg, dzg, rg, *cgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "input": {
                    "value": "dxt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dxg / dxa)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dxg)",
                            "Call"
                        ],
                        [
                            "torch.log(dxg / dxa)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_66": {
                "input": {
                    "value": "dyt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dyg / dya)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dyg)",
                            "Call"
                        ],
                        [
                            "torch.log(dyg / dya)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_67": {
                "input": {
                    "value": "dzt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dzg / dza)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dzg)",
                            "Call"
                        ],
                        [
                            "torch.log(dzg / dza)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_103": {
                "input": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_104": {
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_105": {
                "input": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_135": {
                "input": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_136": {
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_137": {
                "input": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_36": {
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_37": {
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_70": {
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_71": {
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_187": {
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(rg_sin, rg_cos)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "ra - rt",
                            "BinOp"
                        ],
                        [
                            "torch.split(gt_boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(sint, cost)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_187": {
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(rg_sin, rg_cos)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "ra - rt",
                            "BinOp"
                        ],
                        [
                            "torch.split(gt_boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(sint, cost)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_210": {
                "input": {
                    "value": "dxt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dxg / dxa)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dxg)",
                            "Call"
                        ],
                        [
                            "torch.log(dxg / dxa)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_211": {
                "input": {
                    "value": "dyt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dyg / dya)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dyg)",
                            "Call"
                        ],
                        [
                            "torch.log(dyg / dya)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_212": {
                "input": {
                    "value": "dzt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dzg / dza)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dzg)",
                            "Call"
                        ],
                        [
                            "torch.log(dzg / dza)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_217": {
                "input": {
                    "value": "box_encodings[..., 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/utils/box_utils.py": {
        "torch": {
            "max_259": {
                "variable": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a[:, 0, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_260": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a[:, 2, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_261": {
                "variable": {
                    "value": "y_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a[:, 1, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_262": {
                "variable": {
                    "value": "y_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a[:, 3, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_281": {
                "variable": {
                    "value": "choose_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "rot_angle[:, None] < np.pi / 4",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes3d[:, [3, 4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes3d[:, [4, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "aligned_bev_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes3d[:, 0:2] - choose_dims / 2, boxes3d[:, 0:2] + choose_dims / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/utils/common_utils.py": {
        "torch": {
            "cos_45": {
                "variable": {
                    "value": "cosa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_numpy_to_torch(angle)",
                            "Call"
                        ],
                        [
                            "angle",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_46": {
                "variable": {
                    "value": "sina",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_numpy_to_torch(angle)",
                            "Call"
                        ],
                        [
                            "angle",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_49": {
                "variable": {
                    "value": "rot_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cosa, sina, zeros, -sina, cosa, zeros, zeros, zeros, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "points_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points[:, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "rot_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((cosa, sina, zeros, -sina, cosa, zeros, zeros, zeros, ones), dim=1).view(-1, 3, 3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_55": {
                "variable": {
                    "value": "points_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(points_rot, points[:, :, 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "pc_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "point_cloud_range[0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "voxel_centers.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_127": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_145": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_128": {
                "device": {
                    "value": "proc_id % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_146": {
                "device": {
                    "value": "local_rank % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "voxel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(voxel_size, device=voxel_centers.device).float() * downsample_times",
                            "BinOp"
                        ],
                        [
                            "voxel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "voxel_centers.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_162": {
                "variable": {
                    "value": "initialized",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_16": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_22": {
                "input": {
                    "value": "val / period + offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "detector/pcdet/utils/loss_utils.py": {
        "torch": {
            "min_227": {
                "variable": {
                    "value": "corner_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(pred_box_corners - gt_box_corners, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "variable": {
                    "value": "pred_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_122": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_164": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_171": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "diff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "self.code_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.code_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_102": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "diff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_104": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "diff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_105": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "n < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "self.code_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.code_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_227": {
                "input": {
                    "value": "pred_box_corners - gt_box_corners",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_228": {
                "input": {
                    "value": "pred_box_corners - gt_box_corners_flip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log1p_41": {
                "input": {
                    "value": "torch.exp(-torch.abs(input))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_60": {
                "input": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target * (1.0 - pred_sigmoid) + (1.0 - target) * pred_sigmoid",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_122": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_164": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_205": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_41": {
                "input": {
                    "value": "-torch.abs(input)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_41": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detector/setup.py": {
        "torch": {}
    },
    "detector/tools/demo.py": {
        "torch": {
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/tools/eval_utils/eval_utils.py": {
        "torch": {
            "device_count_42": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_44": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/tools/test.py": {
        "torch": {
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/tools/train.py": {
        "torch": {
            "DistributedDataParallel_142": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(model_cfg=cfg.MODEL, num_class=len(cfg.CLASS_NAMES), dataset=train_set)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[cfg.LOCAL_RANK % torch.cuda.device_count()])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[cfg.LOCAL_RANK % torch.cuda.device_count()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_count_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector/tools/train_utils/optimization/__init__.py": {
        "torch": {
            "Adam_13": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "optim_cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optim_cfg.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_55": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=optim_cfg.LR, weight_decay=optim_cfg.WEIGHT_DECAY)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=optim_cfg.LR, weight_decay=optim_cfg.WEIGHT_DECAY, momentum=optim_cfg.MOMENTUM)",
                            "Call"
                        ],
                        [
                            "OptimWrapper.create(optimizer_func, 0.003, get_layer_groups(model), wd=optim_cfg.WEIGHT_DECAY, true_wd=True, bn_wd=True)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lbmd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lbmd",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_epoch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_15": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "optim_cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optim_cfg.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "optim_cfg.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "*flatten_model(m)",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "detector/tools/train_utils/optimization/fastai_optim.py": {
        "torch": {
            "Sequential_23": {
                "*args": {
                    "value": "*l2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "parameters_to_vector_35": {
                "variable": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[param.data.float() for param in lg]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "master_params",
                            "variable"
                        ],
                        [
                            "parameters_to_vector([param.data.float() for param in lg])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(mp, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "parameters_to_vector_54": {
                "parameters": {
                    "value": "[p.grad.data.float() for p in model_group]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "detector/tools/train_utils/optimization/learning_schedules_fastai.py": {
        "torch": {}
    },
    "detector/tools/train_utils/train_utils.py": {
        "torch": {
            "save_147": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}.pth'.format(filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__41": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "optim_cfg.GRAD_NORM_CLIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "{'optimizer_state': optimizer_state}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}_optim.pth'.format(filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detector/tools/visual_utils/visualize_utils.py": {
        "torch": {
            "cos_30": {
                "variable": {
                    "value": "cosa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_numpy_to_torch(angle)",
                            "Call"
                        ],
                        [
                            "angle",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_31": {
                "variable": {
                    "value": "sina",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_numpy_to_torch(angle)",
                            "Call"
                        ],
                        [
                            "angle",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_34": {
                "variable": {
                    "value": "rot_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cosa, sina, zeros, -sina, cosa, zeros, zeros, zeros, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "points_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points[:, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "rot_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((cosa, sina, zeros, -sina, cosa, zeros, zeros, zeros, ones), dim=1).view(-1, 3, 3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_40": {
                "variable": {
                    "value": "points_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(points_rot, points[:, :, 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_15": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in range(bv_range[0], bv_range[2], grid_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "painting/hma/config.py": {
        "torch": {}
    },
    "painting/hma/datasets/__init__.py": {
        "torch": {
            "DataLoader_168": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_cls(mode=val_name, joint_transform_list=val_joint_transform_list, img_transform=val_input_transform, label_transform=target_transform, eval_folder=args.eval_folder)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.bs_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(val_set, pad=False, permutation=False, consecutive_sample=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_194": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dataset_cls(mode='train', joint_transform_list=train_joint_transform_list, img_transform=train_input_transform, label_transform=target_train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.bs_trn",
                            "Attribute"
                        ],
                        [
                            "args.bs_trn * args.ngpu",
                            "BinOp"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_set, pad=True, permutation=True, consecutive_sample=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            }
        }
    },
    "painting/hma/datasets/base_loader.py": {
        "torch": {}
    },
    "painting/hma/datasets/nullloader.py": {
        "torch": {}
    },
    "painting/hma/datasets/randaugment.py": {
        "torch": {
            "Tensor_209": {
                "variable": {
                    "value": "self.eigval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_210": {
                "variable": {
                    "value": "self.eigvec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_244": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.transform(mask.size, Image.AFFINE, affine_params, resample=Image.NEAREST, fillcolor=fillmask)",
                            "Call"
                        ],
                        [
                            "mask.rotate(v, resample=Image.NEAREST, fillcolor=fillmask)",
                            "Call"
                        ],
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "painting/hma/datasets/sampler.py": {
        "torch": {
            "Generator_80": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_84": {
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "painting/hma/datasets/uniform.py": {
        "torch": {}
    },
    "painting/hma/loss/optimizer.py": {
        "torch": {
            "load_114": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "snapshot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snapshot",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LambdaLR_88": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(param_groups, lr=args.lr, weight_decay=args.weight_decay, momentum=args.momentum, nesterov=False)",
                            "Call"
                        ],
                        [
                            "optim.Adam(param_groups, lr=args.lr, weight_decay=args.weight_decay, amsgrad=args.amsgrad)",
                            "Call"
                        ],
                        [
                            "RAdam(param_groups, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "restore_snapshot(net, optimizer, snapshot_file, restore_optimizer_bool)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda epoch: math.pow(1 - epoch / args.max_epoch, args.poly_exp) if epoch < rescale_thresh else scale_value * math.pow(1 - (epoch - rescale_thresh) / (args.max_epoch - rescale_thresh), args.repoly)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "args.amsgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_90": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(param_groups, lr=args.lr, weight_decay=args.weight_decay, momentum=args.momentum, nesterov=False)",
                            "Call"
                        ],
                        [
                            "optim.Adam(param_groups, lr=args.lr, weight_decay=args.weight_decay, amsgrad=args.amsgrad)",
                            "Call"
                        ],
                        [
                            "RAdam(param_groups, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "restore_snapshot(net, optimizer, snapshot_file, restore_optimizer_bool)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "poly2_schd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poly2_schd",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_93": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(param_groups, lr=args.lr, weight_decay=args.weight_decay, momentum=args.momentum, nesterov=False)",
                            "Call"
                        ],
                        [
                            "optim.Adam(param_groups, lr=args.lr, weight_decay=args.weight_decay, amsgrad=args.amsgrad)",
                            "Call"
                        ],
                        [
                            "RAdam(param_groups, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "restore_snapshot(net, optimizer, snapshot_file, restore_optimizer_bool)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "poly_schd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poly_schd",
                            "Call"
                        ]
                    ]
                }
            },
            "device_114": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/loss/radam.py": {
        "torch": {
            "zeros_like_52": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "painting/hma/loss/rmi.py": {
        "torch": {
            "one_hot_95": {
                "variable": {
                    "value": "valid_onehot_labels_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels_4D.long() * label_mask_3D.long()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_mask_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_mask_3D.view([-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_110": {
                "variable": {
                    "value": "binary_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_4D.permute(0, 2, 3, 1).contiguous().view([-1, self.num_classes])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "valid_onehot_label_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "valid_onehot_labels_4D.view([-1, self.num_classes]).requires_grad_(False)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "label_mask_flat.unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_114": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "binary_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(logits_flat, target=valid_onehot_label_flat, weight=label_mask_flat.unsqueeze(dim=1), reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "valid_pixels + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_175": {
                "variable": {
                    "value": "diag_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.half_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_175": {
                "variable": {
                    "value": "diag_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "la_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "la_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmi_utils.map_get_pairs(labels_4D, probs_4D, radius=self.rmi_radius, is_combine=0)",
                            "Call"
                        ],
                        [
                            "la_vectors.view([n, c, self.half_d, -1]).type(torch.cuda.DoubleTensor).requires_grad_(False)",
                            "Call"
                        ],
                        [
                            "la_vectors - la_vectors.mean(dim=3, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "la_vectors.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "variable": {
                    "value": "pr_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pr_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmi_utils.map_get_pairs(labels_4D, probs_4D, radius=self.rmi_radius, is_combine=0)",
                            "Call"
                        ],
                        [
                            "pr_vectors.view([n, c, self.half_d, -1]).type(torch.cuda.DoubleTensor)",
                            "Call"
                        ],
                        [
                            "pr_vectors - pr_vectors.mean(dim=3, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pr_vectors.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "variable": {
                    "value": "la_pr_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "la_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmi_utils.map_get_pairs(labels_4D, probs_4D, radius=self.rmi_radius, is_combine=0)",
                            "Call"
                        ],
                        [
                            "la_vectors.view([n, c, self.half_d, -1]).type(torch.cuda.DoubleTensor).requires_grad_(False)",
                            "Call"
                        ],
                        [
                            "la_vectors - la_vectors.mean(dim=3, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pr_vectors.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_212": {
                "variable": {
                    "value": "rmi_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rmi_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmi_now.view([-1, self.num_classes]).mean(dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.div(rmi_per_class, float(self.half_d))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "float(self.half_d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_137": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_151": {
                "variable": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(labels_4D, size=(new_h, new_w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_152": {
                "variable": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_4D.sigmoid() * label_mask_3D.unsqueeze(dim=1) + _CLIP_MIN",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(probs_4D, size=(new_h, new_w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_198": {
                "input": {
                    "value": "la_pr_cov.matmul(pr_cov_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "la_pr_cov.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_214": {
                "input": {
                    "value": "rmi_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmi_now.view([-1, self.num_classes]).mean(dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.div(rmi_per_class, float(self.half_d))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_214": {
                "input": {
                    "value": "rmi_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmi_now.view([-1, self.num_classes]).mean(dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.div(rmi_per_class, float(self.half_d))",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_154": {
                "variable": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(labels_4D, size=(new_h, new_w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_155": {
                "variable": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_4D.sigmoid() * label_mask_3D.unsqueeze(dim=1) + _CLIP_MIN",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(probs_4D, size=(new_h, new_w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_160": {
                "variable": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(labels_4D, size=(new_h, new_w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_161": {
                "variable": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_4D.sigmoid() * label_mask_3D.unsqueeze(dim=1) + _CLIP_MIN",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(probs_4D, size=(new_h, new_w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/loss/rmi_utils.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_classeses, 1, radius, radius]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cholesky_105": {
                "variable": {
                    "value": "chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ],
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cholesky_115": {
                "variable": {
                    "value": "chol_low",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ],
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_129": {
                "variable": {
                    "value": "invL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_144": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_145": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logdet_147": {
                "variable": {
                    "value": "res_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.squeeze(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_156": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_157": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_159": {
                "variable": {
                    "value": "res_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_166": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "x_var_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - x_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(x - x_mean).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "variable": {
                    "value": "xy_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - x_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(y - y_mean).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_50": {
                "variable": {
                    "value": "p_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pair_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ],
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "la_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "la_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "pr_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pr_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_85": {
                "variable": {
                    "value": "p_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pair_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ],
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "la_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "la_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_90": {
                "variable": {
                    "value": "pr_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pr_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "input": {
                    "value": "chol_low_inv.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "chol_low_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_low_tri_inv(chol_low)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_77": {
                "variable": {
                    "value": "la_now",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel_now",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.clone()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "radius // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_classeses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "pr_now",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs_4D",
                            "Method Argument"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel_now",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.clone()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "radius // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_classeses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_107": {
                "input": {
                    "value": "torch.log(torch.diagonal(chol, dim1=-2, dim2=-1) + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_147": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_174": {
                "input": {
                    "value": "x_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.sum(dim=1, keepdim=True) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "x_sum.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in range(0, radius, 1)",
                            "Call"
                        ],
                        [
                            "x in range(0, radius, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(3, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_107": {
                "input": {
                    "value": "torch.diagonal(chol, dim1=-2, dim2=-1) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diagonal_107": {
                "input": {
                    "value": "chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(matrix)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/loss/utils.py": {
        "torch": {
            "softmax_141": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NLLLoss_80": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "Method Argument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "Method Argument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "Method Argument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histc_91": {
                "variable": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "target.masked_fill(target == self.ignore_label, 0)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "bins": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_130": {
                "variable": {
                    "value": "self.nll_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "Method Argument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "Method Argument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "Method Argument"
                        ],
                        [
                            "cfg.DATASET.IGNORE_LABEL",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_144": {
                "input": {
                    "value": "torch.max(soft, multihotmask * (soft * multihotmask).sum(1, keepdim=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_273": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "target.masked_fill(target == self.ignore_label, 0)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_145": {
                "input": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(inp)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_284": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "target.masked_fill(target == self.ignore_label, 0)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "weights.half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).float()",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "1.0 - beta + (2.0 * beta - 1.0) * target",
                            "BinOp"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ],
                        [
                            "self.calculateWeights(target_cpu)",
                            "Call"
                        ],
                        [
                            "self.calculateWeights(target_cpu[i])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_291": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "target.masked_fill(target == self.ignore_label, 0)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "weights.half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).float()",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "1.0 - beta + (2.0 * beta - 1.0) * target",
                            "BinOp"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ],
                        [
                            "self.calculateWeights(target_cpu)",
                            "Call"
                        ],
                        [
                            "self.calculateWeights(target_cpu[i])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "self.size_average",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "self.reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_296": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "target.masked_fill(target == self.ignore_label, 0)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "weights.half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).float()",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "1.0 - beta + (2.0 * beta - 1.0) * target",
                            "BinOp"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ],
                        [
                            "self.calculateWeights(target_cpu)",
                            "Call"
                        ],
                        [
                            "self.calculateWeights(target_cpu[i])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_356": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edges[i].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nll_loss(F.log_softmax(inputs[i].unsqueeze(0)), targets[i].unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "torch.mul(edges[i].unsqueeze(0), out)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_134": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_352": {
                "variable": {
                    "value": "self.nll_loss.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_116": {
                "input": {
                    "value": "inputs[i].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_354": {
                "input": {
                    "value": "inputs[i].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_227": {},
            "nonzero_300": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "self.calculate_weights(targets)",
                            "Call"
                        ],
                        [
                            "weights.half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).half()",
                            "Call"
                        ],
                        [
                            "target[:, :-1, :, :].sum(1).float()",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "1.0 - beta + (2.0 * beta - 1.0) * target",
                            "BinOp"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ],
                        [
                            "self.calculateWeights(target_cpu)",
                            "Call"
                        ],
                        [
                            "self.calculateWeights(target_cpu[i])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "painting/hma/network/Resnet.py": {
        "torch": {
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_147": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_152": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/network/SEresnext.py": {
        "torch": {
            "AdaptiveAvgPool2d_76": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_82": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_164": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.floor(planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_273": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layer0_modules)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_313": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "variable": {
                    "value": "self.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_321": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=downsample_kernel_size, stride=stride, padding=downsample_padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_314": {
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_271": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "downsample_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "downsample_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_252": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_260": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_264": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_267": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/network/__init__.py": {
        "torch": {
            "DataParallel_41": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(network='network.' + args.arch, num_classes=cfg.DATASET.NUM_CLASSES, criterion=criterion)",
                            "Call"
                        ],
                        [
                            "apex.parallel.DistributedDataParallel(net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net)",
                            "Call"
                        ],
                        [
                            "net_func(num_classes=num_classes, criterion=criterion)",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "painting/hma/network/attnscale.py": {
        "torch": {
            "Conv2d_62": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8, dpc=use_dpc)",
                            "Call"
                        ],
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8, dpc=use_dpc)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, 256, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "cat_s4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ],
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "concat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "concat_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[feats_1x]",
                            "List"
                        ],
                        [
                            "torch.cat(concat_feats, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([all_feats[lo_scale], all_feats[hi_scale]], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8, dpc=use_dpc)",
                            "Call"
                        ],
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8, dpc=use_dpc)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, 256, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "cat_s4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ],
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.scale_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_scales * (256 + 48), 256, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.scale_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_scales * (256 + 48), 512, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self.scale_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_scales * (256 + 48), 256, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.scale_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_scales * (256 + 48), 512, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "concat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[all_feats[lo_scale], all_feats[hi_scale]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_229": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_230": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "num_scales * (256 + 48)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.scales)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "len(scales)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "num_scales * (256 + 48)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.scales)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "len(scales)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_243": {
                "in_channels": {
                    "value": "num_scales * (256 + 48)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_246": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_247": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_250": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.scales)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "len(scales)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "in_channels": {
                    "value": "num_scales * (256 + 48)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.scales)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "len(scales)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/network/basic.py": {
        "torch": {
            "Conv2d_78": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=cfg.MODEL.ASPP_BOT_CH, output_stride=8)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/network/bn_helper.py": {
        "torch": {}
    },
    "painting/hma/network/deeper.py": {
        "torch": {
            "Conv2d_50": {
                "variable": {
                    "value": "self.convs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk_name=trunk, output_stride=8)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.convs4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s4_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk_name=trunk, output_stride=8)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv_up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv_up5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s4_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s2_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/network/deepv3.py": {
        "torch": {
            "Conv2d_54": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8, dpc=use_dpc)",
                            "Call"
                        ],
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=output_stride, dpc=use_dpc)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, 256, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "cat_s4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/network/hrnetv2.py": {
        "torch": {
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_270": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_273": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_276": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "interpolate_440": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_442": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_444": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_447": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0], x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.num_inchannels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_179": {
                "modules": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_225": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_351": {
                "modules": {
                    "value": "transition_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_356": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_368": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_463": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.HRNET_CHECKPOINT",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "{'cuda:0': 'cpu'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Sequential_397": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "self.num_inchannels[branch_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels[branch_index] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_223": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_357": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_349": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_inchannels[i], 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_326": {
                "*args": {
                    "value": "nn.Conv2d(num_channels_pre_layer[i], num_channels_cur_layer[i], 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "*args": {
                    "value": "nn.Conv2d(inchannels, outchannels, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_inchannels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_246": {
                "input": {
                    "value": "self.fuse_layers[i][j](x[j])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[height_output, width_output]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "num_channels_pre_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels_cur_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_335": {
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_345": {
                "in_channels": {
                    "value": "inchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_348": {
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Sequential_207": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_221": {
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            }
        }
    },
    "painting/hma/network/mscale.py": {
        "torch": {
            "Conv2d_247": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk_name=trunk, output_stride=8)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_248": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8, dpc=use_dpc)",
                            "Call"
                        ],
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8)",
                            "Call"
                        ],
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=cfg.MODEL.ASPP_BOT_CH, output_stride=8)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_252": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, bot_ch, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "cat_s4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "cat_s4_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4_attn, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_379": {
                "variable": {
                    "value": "self.convs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk_name=trunk, output_stride=8)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_380": {
                "variable": {
                    "value": "self.convs4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s4_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk_name=trunk, output_stride=8)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_381": {
                "variable": {
                    "value": "self.conv_up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8, dpc=use_dpc)",
                            "Call"
                        ],
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8)",
                            "Call"
                        ],
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=cfg.MODEL.ASPP_BOT_CH, output_stride=8)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_384": {
                "variable": {
                    "value": "self.conv_up5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s4_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_416": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, s2_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_490": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8, dpc=use_dpc)",
                            "Call"
                        ],
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8)",
                            "Call"
                        ],
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=cfg.MODEL.ASPP_BOT_CH, output_stride=8)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_153": {
                "variable": {
                    "value": "scale_float",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_287": {
                "variable": {
                    "value": "a_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_253": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_255": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_256": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_258": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "scale_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_tensor, a_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/network/mscale2.py": {
        "torch": {
            "cat_139": {
                "variable": {
                    "value": "cat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats_lo, feats_hi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "self.bot_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s2_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "variable": {
                    "value": "self.bot_aspp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "aspp_out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_aspp(high_level_ch, bottleneck_ch=256, output_stride=8)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 + 48, 256, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.scale_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(scale_in_ch, 256, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "cat_s4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_s4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv_s2, conv_aspp]",
                            "List"
                        ],
                        [
                            "torch.cat(cat_s4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "cat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats_lo, feats_hi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "cat_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats, last_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "256 + 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_186": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "scale_in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (256 + 48)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_198": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/network/mynn.py": {
        "torch": {
            "interpolate_47": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_66": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_77": {
                "variable": {
                    "value": "x_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y.size(2), y.size(3))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_81": {
                "variable": {
                    "value": "x_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "y_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(y.size(2), y.size(3))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_92": {
                "variable": {
                    "value": "x_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor",
                            "Method Argument"
                        ],
                        [
                            "scale_factor",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_96": {
                "variable": {
                    "value": "x_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor",
                            "Method Argument"
                        ],
                        [
                            "scale_factor",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "interpolate_107": {
                "variable": {
                    "value": "x_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor",
                            "Method Argument"
                        ],
                        [
                            "scale_factor",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_111": {
                "variable": {
                    "value": "x_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor",
                            "Method Argument"
                        ],
                        [
                            "scale_factor",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ALIGN_CORNERS",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "painting/hma/network/ocr_utils.py": {
        "torch": {
            "softmax_43": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "ocr_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.view(batch_size, c, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.scale * probs, dim=2)",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.view(batch_size, feats.size(1), -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_67": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(scale, scale)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.f_pixel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.f_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.f_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.f_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.key_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_pixel(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_object(proxy).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_111": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_down(proxy).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(_in_channels, out_channels, kernel_size=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_116": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(sim_map, value)",
                            "Call"
                        ],
                        [
                            "context.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "context.view(batch_size, self.key_channels, *x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.f_up(context)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=context, size=(h, w), mode='bilinear', align_corners=cfg.MODEL.ALIGN_CORNERS)",
                            "Call"
                        ],
                        [
                            "self.object_context_block(feats, proxy_feats)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "cfg.MODEL.ALIGN_CORNERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * in_channels + aspp_out_ch",
                            "BinOp"
                        ],
                        [
                            "2 * in_channels",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_146": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "[context, aspp, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "tensors": {
                    "value": "[context, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/network/ocrnet.py": {
        "torch": {
            "Sequential_54": {
                "variable": {
                    "value": "self.conv3x3_ocr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(high_level_ch, ocr_mid_channels, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ocr_mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.OCR.MID_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATASET.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.aux_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(high_level_ch, high_level_ch, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "high_level_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "high_level_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ocr_mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.OCR.MID_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "high_level_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "high_level_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "high_level_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "high_level_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "high_level_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "get_trunk(trunk)",
                            "Call"
                        ],
                        [
                            "high_level_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.DATASET.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/network/utils.py": {
        "torch": {
            "Conv2d_362": {
                "variable": {
                    "value": "od[conv2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_363": {
                "variable": {
                    "value": "od[sig]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_365": {
                "variable": {
                    "value": "attn_head",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "od",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_371": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, bot_ch, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_199": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_202": {
                "variable": {
                    "value": "self.img_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "variable": {
                    "value": "self.img_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.edge_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, reduction_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, edge_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=3, dilation=dil, padding=dil, bias=False, groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_287": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a, b, c, d, e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_315": {
                "*args": {
                    "value": "Norm2d(ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_322": {
                "*args": {
                    "value": "nn.Conv2d(in_ch, bot_ch, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_354": {
                "variable": {
                    "value": "od[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_357": {
                "variable": {
                    "value": "od[re1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_360": {
                "variable": {
                    "value": "od[drop]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_256": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduction_dim",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dil",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dil",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dil",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dil",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduction_dim",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "BatchNorm2d_258": {
                "num_features": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduction_dim",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_259": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_323": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_325": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_326": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_328": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_329": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_372": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_374": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_375": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_377": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_378": {
                "in_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduction_dim",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_229": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduction_dim",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_230": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "resnet.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduction_dim",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_190": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "*args": {
                    "value": "nn.Conv2d(in_dim, reduction_dim, kernel_size=3, dilation=r, padding=r, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_348": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.SEGATTN_BOT_CH",
                            "Attribute"
                        ],
                        [
                            "bot_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_351": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "resnet.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_194": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduction_dim",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rates",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rates",
                            "variable"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/network/wider_resnet.py": {
        "torch": {
            "Sequential_49": {
                "*args": {
                    "value": "mynn.Norm2d(channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_219": {
                "variable": {
                    "value": "self.mod1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, 3, stride=1, padding=1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.mod1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, 3, stride=1, padding=1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_406": {
                "variable": {
                    "value": "wide_resnet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "wide_resnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wider_resnet38_a2(classes=1000, dilation=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(wide_resnet)",
                            "Call"
                        ],
                        [
                            "wide_resnet.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "variable": {
                    "value": "self.proj_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if block_id == 0 and 2 <= mod_id <= 4 else 1",
                            "IfExp"
                        ],
                        [
                            "2 if block_id == 0 and mod_id == 2 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_249": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('avg_pool', GlobalAvgPool2d()), ('fc', nn.Linear(in_channels, classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_362": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('avg_pool', GlobalAvgPool2d()), ('fc', nn.Linear(in_channels, classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_409": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.WRN38_CHECKPOINT",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_244": {
                "*args": {
                    "value": "OrderedDict(blocks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "*args": {
                    "value": "OrderedDict(blocks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if block_id == 0 and 2 <= mod_id <= 4 else 1",
                            "IfExp"
                        ],
                        [
                            "2 if block_id == 0 and mod_id == 2 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if block_id == 0 and 2 <= mod_id <= 4 else 1",
                            "IfExp"
                        ],
                        [
                            "2 if block_id == 0 and mod_id == 2 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_243": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_356": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_312": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_364": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "painting/hma/network/xception.py": {
        "torch": {
            "pad_20": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_beg, pad_end, pad_beg, pad_end)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_285": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rep",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_272": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.X71_CHECKPOINT",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/train.py": {
        "torch": {
            "set_device_298": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_349": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "auto_resume_details.get('RESUME_FILE', None)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_388": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_389": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_402": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_360": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_371": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.snapshot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_350": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_361": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_372": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/transforms/transforms.py": {
        "torch": {
            "from_numpy_72": {
                "ndarray": {
                    "value": "np.array(img, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "ndarray": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "one_hot + self.new_one_hot_converter(shifted)",
                            "BinOp"
                        ],
                        [
                            "np.where(np.expand_dims(mask, 2), one_hot_orig, one_hot)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(one_hot, -1, 0)",
                            "Call"
                        ],
                        [
                            "np.where(border_prediction, 2 * one_hot, 1 * one_hot)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "painting/hma/utils/misc.py": {
        "torch": {
            "device_count_74": {
                "variable": {
                    "value": "args.ngpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_414": {
                "variable": {
                    "value": "imgs_to_tensorboard",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flattenned",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/utils/my_data_parallel.py": {
        "torch": {
            "get_device_properties_53": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_101": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parallel_apply(replicas, inputs, module_kwargs, used_device_ids)",
                            "Call"
                        ],
                        [
                            "self.parallel_apply(replicas, inputs, kwargs)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "output_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_ids[0]",
                            "Subscript"
                        ],
                        [
                            "device_ids[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "output_device",
                            "Method Argument"
                        ]
                    ]
                },
                "index": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_202": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parallel_apply(replicas, inputs, module_kwargs, used_device_ids)",
                            "Call"
                        ],
                        [
                            "self.parallel_apply(replicas, inputs, kwargs)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/utils/trnval_utils.py": {
        "torch": {
            "interpolate_52": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(inputs, size=target_size, mode='bilinear', align_corners=cfg.MODEL.ALIGN_CORNERS)",
                            "Call"
                        ],
                        [
                            "flip_tensor(images, 3)",
                            "Call"
                        ],
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "resize_tensor(inputs, infer_size)",
                            "Call"
                        ],
                        [
                            "in_image.cuda()",
                            "Call"
                        ],
                        [
                            "{'images': inputs, 'gts': gt_image}",
                            "Dict"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "cfg.MODEL.ALIGN_CORNERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_295": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "output / len(scales) / len(flips)",
                            "BinOp"
                        ],
                        [
                            "output + flip_tensor(_pred, 3)",
                            "BinOp"
                        ],
                        [
                            "output + _pred",
                            "BinOp"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_174": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "output / len(scales) / len(flips)",
                            "BinOp"
                        ],
                        [
                            "output + flip_tensor(_pred, 3)",
                            "BinOp"
                        ],
                        [
                            "output + _pred",
                            "BinOp"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "net(inputs)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_183": {
                "variable": {
                    "value": "smax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_dict[item]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_47": {
                "start": {
                    "value": "x.size(i) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "painting/hma/val.py": {
        "torch": {
            "tensor_493": {
                "variable": {
                    "value": "output_permute",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "output_data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_493": {
                "variable": {
                    "value": "output_permute",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_496": {
                "variable": {
                    "value": "output_reassign",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_permute.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "output_permute.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_497": {
                "variable": {
                    "value": "(output_reassign[:, :, 0], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_permute[:, :, :11]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_498": {
                "variable": {
                    "value": "(output_reassign[:, :, 1], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_permute[:, :, [17, 18]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_499": {
                "variable": {
                    "value": "(output_reassign[:, :, 2], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_permute[:, :, [13, 14, 15, 16]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_502": {
                "variable": {
                    "value": "sf",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_313": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "auto_resume_details.get('RESUME_FILE', None)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_324": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_475": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "output / len(scales) / len(flips)",
                            "BinOp"
                        ],
                        [
                            "output + flip_tensor(_pred, 3)",
                            "BinOp"
                        ],
                        [
                            "output + _pred",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_335": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.snapshot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_314": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_325": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_336": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/apis/inference.py": {
        "torch": {
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/apis/test.py": {
        "torch": {
            "tensor_211": {
                "variable": {
                    "value": "part_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(pickle.dumps(result_part))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "shape_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "part_tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "shape_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[shape_tensor.clone() for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "max_218": {
                "variable": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "part_send",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(shape_list).max()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "full_171": {
                "variable": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "tmpdir",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_180": {
                "tensor": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/apis/train.py": {
        "torch": {
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "current_device_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/core/evaluation/eval_hooks.py": {
        "torch": {}
    },
    "painting/mmseg/core/evaluation/metrics.py": {
        "torch": {
            "histc_59": {
                "variable": {
                    "value": "area_intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersect.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_61": {
                "variable": {
                    "value": "area_pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_63": {
                "variable": {
                    "value": "area_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "total_area_intersect",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "total_area_union",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "total_area_pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "total_area_label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(pred_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.load(pred_label))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pred_label)",
                            "Call"
                        ],
                        [
                            "pred_label[mask]",
                            "Subscript"
                        ],
                        [
                            "pred_label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mmcv.imread(label, flag='unchanged', backend='pillow')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mmcv.imread(label, flag='unchanged', backend='pillow'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "label - 1",
                            "BinOp"
                        ],
                        [
                            "label[mask]",
                            "Subscript"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "painting/mmseg/core/seg/sampler/ohem_pixel_sampler.py": {
        "torch": {
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "seg_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_logit",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/datasets/builder.py": {
        "torch": {
            "DistributedSampler_117": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset([build_dataset(c, default_args) for c in cfg])",
                            "Call"
                        ],
                        [
                            "RepeatDataset(build_dataset(cfg['dataset'], default_args), cfg['times'])",
                            "Call"
                        ],
                        [
                            "_concat_dataset(cfg, default_args)",
                            "Call"
                        ],
                        [
                            "build_from_cfg(cfg, DATASETS, default_args)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dist_info()",
                            "Call"
                        ]
                    ]
                },
                "rank": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dist_info()",
                            "Call"
                        ],
                        [
                            "rank",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "painting/mmseg/datasets/custom.py": {
        "torch": {}
    },
    "painting/mmseg/datasets/dataset_wrappers.py": {
        "torch": {}
    },
    "painting/mmseg/datasets/pipelines/formating.py": {
        "torch": {
            "from_numpy_25": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "painting/mmseg/models/backbones/cgnet.py": {
        "torch": {
            "AdaptiveAvgPool2d_32": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_129": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "2 * channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_175": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_247": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_265": {
                "variable": {
                    "value": "self.norm_prelu_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_norm_layer(norm_cfg, cur_channels)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_270": {
                "variable": {
                    "value": "self.level1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_285": {
                "variable": {
                    "value": "self.norm_prelu_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_norm_layer(norm_cfg, cur_channels)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_290": {
                "variable": {
                    "value": "self.level2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_305": {
                "variable": {
                    "value": "self.norm_prelu_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_norm_layer(norm_cfg, cur_channels)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "joi_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loc, sur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_267": {
                "num_parameters": {
                    "value": "cur_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "num_channels[0]",
                            "Subscript"
                        ],
                        [
                            "cur_channels + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[1] + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PReLU_287": {
                "num_parameters": {
                    "value": "cur_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "num_channels[0]",
                            "Subscript"
                        ],
                        [
                            "cur_channels + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[1] + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "PReLU_307": {
                "num_parameters": {
                    "value": "cur_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "num_channels[0]",
                            "Subscript"
                        ],
                        [
                            "cur_channels + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[1] + in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * num_channels[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_317": {
                "tensors": {
                    "value": "[x, inp_2x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_325": {
                "tensors": {
                    "value": "[x, down1, inp_4x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_333": {
                "tensors": {
                    "value": "[down2, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_177": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/backbones/fast_scnn.py": {
        "torch": {
            "cat_176": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, *self.ppm(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_233": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/backbones/hrnet.py": {
        "torch": {
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_313": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, self.in_channels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "modules": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_183": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_416": {
                "modules": {
                    "value": "transition_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_422": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_452": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_482": {
                "*args": {
                    "value": "*hr_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_181": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_414": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_382": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, num_channels_pre_layer[i], num_channels_cur_layer[i], kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_403": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, out_channels, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_393": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_413": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[j], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_179": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/backbones/mobilenet_v2.py": {
        "torch": {
            "Sequential_134": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/backbones/mobilenet_v3.py": {
        "torch": {}
    },
    "painting/mmseg/models/backbones/resnest.py": {
        "torch": {
            "ReLU_97": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_129": {
                "variable": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "splits.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "F.adaptive_avg_pool2d(gap, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(gap)",
                            "Call"
                        ],
                        [
                            "self.norm1(gap)",
                            "Call"
                        ],
                        [
                            "self.relu(gap)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch, self.groups, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch, self.groups, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm0(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_140": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attens * splits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_216": {
                "variable": {
                    "value": "self.avd_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv2_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/backbones/resnet.py": {
        "torch": {
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_208": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_579": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_535": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, stem_channels // 2, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_578": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_545": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_555": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_565": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/backbones/unet.py": {
        "torch": {
            "Sequential_74": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_126": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_channels * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - scale_factor) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.deconv_upsamping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Upsample_205": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_334": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_335": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.interp_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "variable": {
                    "value": "self.interp_upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_373": {
                "*args": {
                    "value": "*enc_conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_341": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/builder.py": {
        "torch": {
            "Sequential_31": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/ann_head.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "concat_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_103": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_128": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "priors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[stage(high_feats, low_feats) for stage in self.stages]",
                            "ListComp"
                        ],
                        [
                            "[stage(feats, feats) for stage in self.stages]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_153": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_178": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "priors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[stage(high_feats, low_feats) for stage in self.stages]",
                            "ListComp"
                        ],
                        [
                            "[stage(feats, feats) for stage in self.stages]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "variable": {
                    "value": "query_downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "query_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_scales",
                            "variable"
                        ],
                        [
                            "query_scales",
                            "variable"
                        ],
                        [
                            "query_scale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "[context, high_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "tensors": {
                    "value": "[context, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_20": {
                "output_size": {
                    "value": "pool_scale",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/apc_head.py": {
        "torch": {
            "Conv2d_59": {
                "variable": {
                    "value": "self.gla",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.pool_scale ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_80": {
                "variable": {
                    "value": "pooled_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.pool_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_94": {
                "variable": {
                    "value": "affinity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "affinity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gla(x + resize(self.global_info(F.adaptive_avg_pool2d(x, 1)), size=x.shape[2:])).permute(0, 2, 3, 1).reshape(batch_size, -1, self.pool_scale ** 2)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(affinity_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "z_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "affinity_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gla(x + resize(self.global_info(F.adaptive_avg_pool2d(x, 1)), size=x.shape[2:])).permute(0, 2, 3, 1).reshape(batch_size, -1, self.pool_scale ** 2)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(affinity_matrix)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pooled_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, self.pool_scale)",
                            "Call"
                        ],
                        [
                            "self.pooled_redu_conv(pooled_x)",
                            "Call"
                        ],
                        [
                            "pooled_x.view(batch_size, self.channels, -1).permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_102": {
                "variable": {
                    "value": "z_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_out + x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "self.acm_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "acm_modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_155": {
                "variable": {
                    "value": "acm_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "acm_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(acm_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_91": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/aspp_head.py": {
        "torch": {
            "Sequential_68": {
                "variable": {
                    "value": "self.image_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "aspp_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aspp_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[resize(self.image_pool(x), size=x.size()[2:], mode='bilinear', align_corners=self.align_corners)]",
                            "List"
                        ],
                        [
                            "torch.cat(aspp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_69": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/cc_head.py": {
        "torch": {
            "cat_40": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/da_head.py": {
        "torch": {
            "bmm_61": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, channels, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, channels, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(energy, -1, keepdim=True)[0].expand_as(energy) - energy",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_67": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(energy_new, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_105": {
                "variable": {
                    "value": "self.pam_conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.cam_conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_62": {
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/decode_head.py": {
        "torch": {
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_83": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_156": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "upsampled_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[resize(input=x, size=inputs[0].shape[2:], mode='bilinear', align_corners=self.align_corners) for x in inputs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/dm_head.py": {
        "torch": {
            "Conv2d_34": {
                "variable": {
                    "value": "self.filter_gen_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(1, b * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.pad(input=x, pad=p2d, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "p2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pad, pad, pad, pad)",
                            "Tuple"
                        ],
                        [
                            "(pad + 1, pad, pad + 1, pad)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(1, b * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.pad(input=x, pad=p2d, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "generated_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_gen_conv(F.adaptive_avg_pool2d(x, self.filter_size))",
                            "Call"
                        ],
                        [
                            "generated_filter.view(b * c, 1, self.filter_size, self.filter_size)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "b * c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.dcm_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "dcm_modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_137": {
                "variable": {
                    "value": "dcm_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dcm_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(dcm_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_63": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_redu_conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(1, b * c, h, w)",
                            "Call"
                        ],
                        [
                            "F.pad(input=x, pad=p2d, mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "self._transform_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.filter_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/dnl_head.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "variable": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(n, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.theta(x).view(n, self.inter_channels, -1, 1)",
                            "Call"
                        ],
                        [
                            "self.theta(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "theta_x - theta_x.mean(dim=-2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "theta_x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(n, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "x.view(n, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "self.phi(x).view(n, self.inter_channels, 1, -1)",
                            "Call"
                        ],
                        [
                            "self.phi(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "phi_x - phi_x.mean(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "phi_x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ],
                        [
                            "pairwise_weight / self.temperature",
                            "BinOp"
                        ],
                        [
                            "pairwise_weight.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "pairwise_func(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "unary_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unary_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_mask(x)",
                            "Call"
                        ],
                        [
                            "unary_mask.view(n, 1, -1)",
                            "Call"
                        ],
                        [
                            "unary_mask.softmax(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/ema_head.py": {
        "torch": {
            "zeros_38": {
                "variable": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.size()",
                            "Call"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.num_bases",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_41": {
                "variable": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_64": {
                "variable": {
                    "value": "feats_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bck,bnk->bcn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_161": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ema_module(feats)",
                            "Call"
                        ],
                        [
                            "F.relu(recon, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.ema_out_conv(recon)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_163": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "identity + recon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_71": {
                "variable": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_55": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcn,bck->bnk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.view(batch_size, channels, height * width)",
                            "Call"
                        ],
                        [
                            "self.ema_in_conv(x)",
                            "Call"
                        ],
                        [
                            "self.ema_mid_conv(feats)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bcn,bck->bnk', feats, bases)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "attention_normed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bcn,bck->bnk', feats, bases)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_60": {
                "variable": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bcn,bnk->bck",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.view(batch_size, channels, height * width)",
                            "Call"
                        ],
                        [
                            "self.ema_in_conv(x)",
                            "Call"
                        ],
                        [
                            "self.ema_mid_conv(feats)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_62": {
                "variable": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, channels, self.num_bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "self.bases.repeat(batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('bcn,bnk->bck', feats, attention_normed)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "bases.mean(dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "reduce_mean(bases)",
                            "Call"
                        ],
                        [
                            "F.normalize(bases, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/enc_head.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Encoding(channels=in_channels, num_codes=num_codes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu__57": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + x * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.se_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels[:-1]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels[:-1]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "[feat, *laterals]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/fcn_head.py": {
        "torch": {
            "Identity_61": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/fpn_head.py": {
        "torch": {
            "ModuleList_30": {
                "variable": {
                    "value": "self.scale_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "*args": {
                    "value": "*scale_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Upsample_48": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/gc_head.py": {
        "torch": {
            "cat_45": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/lraspp_head.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.conv_ups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv_up_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.image_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(kernel_size=49, stride=(16, 20))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, self.convs[i](inputs[i])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_60": {
                "kernel_size": {
                    "value": "49",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(16, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "self.in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/nl_head.py": {
        "torch": {
            "cat_47": {
                "tensors": {
                    "value": "[x, output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/ocr_head.py": {
        "torch": {
            "softmax_32": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "ocr_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.view(batch_size, num_classes, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.scale * probs, dim=2)",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats.view(batch_size, channels, -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPool2d_45": {
                "variable": {
                    "value": "query_downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[context, query_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/point_head.py": {
        "torch": {
            "ModuleList_79": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_94": {
                "variable": {
                    "value": "self.fc_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(self.in_channels) + self.num_classes",
                            "BinOp"
                        ],
                        [
                            "fc_channels",
                            "variable"
                        ],
                        [
                            "fc_in_channels + (self.num_classes if self.coarse_pred_each_layer else 0)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fine_grained_point_feats, coarse_point_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_282": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_sampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_points * oversample_ratio)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_339": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.num_points",
                            "Attribute"
                        ],
                        [
                            "cfg.subdivision_num_points",
                            "Attribute"
                        ],
                        [
                            "min(height * width, num_points)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_30": {
                "input": {
                    "value": "seg_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_logits",
                            "Method Argument"
                        ],
                        [
                            "seg_logits",
                            "Method Argument"
                        ],
                        [
                            "seg_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "fine_grained_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fine_grained_feats_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[point_sample(_, points, align_corners=self.align_corners) for _ in x]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_305": {
                "variable": {
                    "value": "rand_point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "num_random_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_points - num_uncertain_points",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(point_coords, rand_point_coords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, coarse_point_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_297": {
                "input": {
                    "value": "point_uncertainties[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "num_uncertain_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(importance_sample_ratio * num_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_299": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_logits.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "seg_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/psa_head.py": {
        "torch": {
            "Sequential_64": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(self.channels, self.channels, kernel_size=1, conv_cfg=self.conv_cfg, norm_cfg=self.norm_cfg, act_cfg=self.act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.attention_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvModule(self.channels, self.channels, kernel_size=1, conv_cfg=self.conv_cfg, norm_cfg=self.norm_cfg, act_cfg=self.act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_col, x_dis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mask_h * mask_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_143": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "self.psamask(y)",
                            "Call"
                        ],
                        [
                            "y.view(n, h * w, h * w).transpose(1, 2).view(n, h * w, h, w)",
                            "Call"
                        ],
                        [
                            "F.softmax(y, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_179": {
                "variable": {
                    "value": "y_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(x_col)",
                            "Call"
                        ],
                        [
                            "self.psamask_collect(y_col)",
                            "Call"
                        ],
                        [
                            "F.softmax(y_col, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_180": {
                "variable": {
                    "value": "y_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_p(x_dis)",
                            "Call"
                        ],
                        [
                            "y_dis.view(n, h * w, h * w).transpose(1, 2).view(n, h * w, h, w)",
                            "Call"
                        ],
                        [
                            "self.psamask_distribute(y_dis)",
                            "Call"
                        ],
                        [
                            "F.softmax(y_dis, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "tensors": {
                    "value": "(identity, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mask_h * mask_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_144": {
                "input": {
                    "value": "out.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_181": {
                "input": {
                    "value": "x_col.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_col.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_184": {
                "input": {
                    "value": "x_dis.view(n, c, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_dis.view(n, h * w, h * w)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/psp_head.py": {
        "torch": {
            "cat_98": {
                "variable": {
                    "value": "psp_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "psp_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(psp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(pool_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_37": {
                "output_size": {
                    "value": "pool_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/sep_aspp_head.py": {
        "torch": {
            "Sequential_62": {
                "variable": {
                    "value": "self.sep_bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DepthwiseSeparableConvModule(self.channels + c1_channels, self.channels, 3, padding=1, norm_cfg=self.norm_cfg, act_cfg=self.act_cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "aspp_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aspp_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[resize(self.image_pool(x), size=x.size()[2:], mode='bilinear', align_corners=self.align_corners)]",
                            "List"
                        ],
                        [
                            "torch.cat(aspp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, c1_output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/decode_heads/uper_head.py": {
        "torch": {
            "ModuleList_44": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "psp_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "psp_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(psp_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "fpn_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fpn_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.fpn_convs[i](laterals[i]) for i in range(used_backbone_levels - 1)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(fpn_outs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/losses/accuracy.py": {
        "torch": {}
    },
    "painting/mmseg/models/losses/cross_entropy_loss.py": {
        "torch": {
            "cross_entropy_19": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_expand_onehot_labels(label, weight, pred.shape, ignore_index)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-100",
                            "Method Argument"
                        ],
                        [
                            "ignore_index",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(labels >= 0) & (labels != ignore_index)",
                            "BinOp"
                        ],
                        [
                            "valid_mask.unsqueeze(1).expand(target_shape).float()",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_91": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_132": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_134": {
                "input": {
                    "value": "pred_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "class_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_score.new_tensor(self.class_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/losses/dice_loss.py": {
        "torch": {
            "softmax_102": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.reshape(pred.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_104": {
                "variable": {
                    "value": "one_hot_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.clamp(target.long(), 0, num_classes - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.shape[1]",
                            "Subscript"
                        ],
                        [
                            "pred.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_44": {
                "input": {
                    "value": "pred.pow(exponent) + target.pow(exponent)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "torch.mul(pred, target) * valid_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "input": {
                    "value": "target.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_43": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.reshape(pred.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.reshape(target.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "painting/mmseg/models/losses/lovasz_loss.py": {
        "torch": {
            "sort_75": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * signs",
                            "BinOp"
                        ],
                        [
                            "(fg - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dot_79": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(errors_sorted)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lovasz_grad(gt_sorted)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_161": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * signs",
                            "BinOp"
                        ],
                        [
                            "(fg - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dot_164": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(errors, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(errors, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "lovasz_grad(fg_sorted)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_168": {
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_79": {
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(errors, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(errors, 0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_292": {
                "variable": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(cls_score, dim=1)",
                            "Call"
                        ],
                        [
                            "cls_score",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.dot(F.relu(errors_sorted), grad)",
                            "Call"
                        ],
                        [
                            "[lovasz_hinge_flat(*flatten_binary_logits(logit.unsqueeze(0), label.unsqueeze(0), ignore_index)) for (logit, label) in zip(logits, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_hinge_flat(*flatten_binary_logits(logits, labels, ignore_index))",
                            "Call"
                        ],
                        [
                            "torch.dot(errors_sorted, lovasz_grad(fg_sorted))",
                            "Call"
                        ],
                        [
                            "loss * class_weight[c]",
                            "BinOp"
                        ],
                        [
                            "[lovasz_softmax_flat(*flatten_probs(prob.unsqueeze(0), label.unsqueeze(0), ignore_index), classes=classes, class_weight=class_weight) for (prob, label) in zip(probs, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_softmax_flat(*flatten_probs(probs, labels, ignore_index), classes=classes, class_weight=class_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_215": {
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.dot(F.relu(errors_sorted), grad)",
                            "Call"
                        ],
                        [
                            "[lovasz_hinge_flat(*flatten_binary_logits(logit.unsqueeze(0), label.unsqueeze(0), ignore_index)) for (logit, label) in zip(logits, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_hinge_flat(*flatten_binary_logits(logits, labels, ignore_index))",
                            "Call"
                        ],
                        [
                            "torch.dot(errors_sorted, lovasz_grad(fg_sorted))",
                            "Call"
                        ],
                        [
                            "loss * class_weight[c]",
                            "BinOp"
                        ],
                        [
                            "[lovasz_softmax_flat(*flatten_probs(prob.unsqueeze(0), label.unsqueeze(0), ignore_index), classes=classes, class_weight=class_weight) for (prob, label) in zip(probs, labels)]",
                            "ListComp"
                        ],
                        [
                            "weight_reduce_loss(torch.stack(loss), None, reduction, avg_factor)",
                            "Call"
                        ],
                        [
                            "lovasz_softmax_flat(*flatten_probs(probs, labels, ignore_index), classes=classes, class_weight=class_weight)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "painting/mmseg/models/losses/utils.py": {
        "torch": {}
    },
    "painting/mmseg/models/necks/fpn.py": {
        "torch": {
            "ModuleList_111": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_177": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_181": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "prev_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "laterals[i - 1].shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_pool2d_195": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_209": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/segmentors/base.py": {
        "torch": {
            "is_available_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/segmentors/cascade_encoder_decoder.py": {
        "torch": {
            "ModuleList_42": {
                "variable": {
                    "value": "self.decode_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/segmentors/encoder_decoder.py": {
        "torch": {
            "softmax_256": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode_decode(img, None)",
                            "Call"
                        ],
                        [
                            "self.encode_decode(img, img_meta)",
                            "Call"
                        ],
                        [
                            "resize(seg_logit, size=size, mode='bilinear', align_corners=self.align_corners, warning=False)",
                            "Call"
                        ],
                        [
                            "self.slide_inference(img, img_meta, rescale)",
                            "Call"
                        ],
                        [
                            "self.whole_inference(img, img_meta, rescale)",
                            "Call"
                        ],
                        [
                            "self.inference(img, img_meta, rescale)",
                            "Call"
                        ],
                        [
                            "self.inference(imgs[0], img_metas[0], rescale)",
                            "Call"
                        ],
                        [
                            "seg_logit / len(imgs)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "count_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "count_mat.cpu().detach().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.auxiliary_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_194": {
                "input": {
                    "value": "crop_seg_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode_decode(crop_img, img_meta)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(int(x1), int(preds.shape[3] - x2), int(y1), int(preds.shape[2] - y2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/utils/inverted_residual.py": {
        "torch": {
            "Sequential_79": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/utils/res_layer.py": {
        "torch": {
            "Sequential_63": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*downsample",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_48": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/utils/se_layer.py": {
        "torch": {
            "AdaptiveAvgPool2d_37": {
                "variable": {
                    "value": "self.global_avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/utils/self_attention_block.py": {
        "torch": {
            "matmul_149": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_project(query_feats)",
                            "Call"
                        ],
                        [
                            "self.query_downsample(query)",
                            "Call"
                        ],
                        [
                            "query.reshape(*query.shape[:2], -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_project(key_feats)",
                            "Call"
                        ],
                        [
                            "self.key_downsample(key)",
                            "Call"
                        ],
                        [
                            "key.reshape(*key.shape[:2], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_project(key_feats)",
                            "Call"
                        ],
                        [
                            "self.key_downsample(value)",
                            "Call"
                        ],
                        [
                            "value.reshape(*value.shape[:2], -1)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/models/utils/up_conv_block.py": {
        "torch": {
            "cat_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[skip, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/ops/encoding.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "self.codewords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_codes, channels, dtype=torch.float).uniform_(-std, std)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_codes, dtype=torch.float).uniform_(-1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "assignment_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scaled_l2(x, self.codewords, self.scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_24": {
                "*size": {
                    "value": "num_codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codewords.size()",
                            "Call"
                        ],
                        [
                            "codewords.size()",
                            "Call"
                        ],
                        [
                            "num_codes",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codewords.size()",
                            "Call"
                        ],
                        [
                            "codewords.size()",
                            "Call"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_29": {
                "*size": {
                    "value": "num_codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codewords.size()",
                            "Call"
                        ],
                        [
                            "codewords.size()",
                            "Call"
                        ],
                        [
                            "num_codes",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "painting/mmseg/ops/wrappers.py": {
        "torch": {
            "interpolate_26": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(t * self.scale_factor) for t in x.shape[-2:]]",
                            "ListComp"
                        ],
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "Method Argument"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "painting/painting.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch/vision:v0.6.0",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "deeplabv3_resnet101",
                    "type": "str",
                    "possible_values": []
                },
                "pretrained": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_79": {
                "variable": {
                    "value": "sf",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "output_reassign",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_permute.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "output_permute.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "output_permute",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "result[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "permute_93": {
                "variable": {
                    "value": "output_permute",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_94": {
                "variable": {
                    "value": "sf",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "output_reassign",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_permute.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "output_permute.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_97": {
                "variable": {
                    "value": "(output_reassign[:, :, 0], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_permute[:, :, :11]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_98": {
                "variable": {
                    "value": "(output_reassign[:, :, 1], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_permute[:, :, [17, 18]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_99": {
                "variable": {
                    "value": "(output_reassign[:, :, 2], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output_permute[:, :, [13, 14, 15, 16]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}