{
    "lib/latent_ode.py": {
        "sklearn": {},
        "torch": {
            "zeros_76": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_traj_samples, n_traj, self.input_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "first_point_enc_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(first_point_enc, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "means_z0_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(means_z0, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_traj_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "starting_point_enc_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(starting_point_enc, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "truth_w_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(truth, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "first_point_std < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "isnan_83": {
                "input": {
                    "value": "time_steps_to_predict",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "any_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_84": {
                "input": {
                    "value": "first_point_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.sample_standard_gaussian(means_z0, sigma_z0)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_85": {
                "input": {
                    "value": "first_point_enc_aug",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((first_point_enc, zeros), -1)",
                            "Call"
                        ],
                        [
                            "first_point_enc",
                            "variable"
                        ]
                    ]
                }
            },
            "any_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "int_lambda[:, :, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "int_lambda[0, 0, -1, :] <= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "lib/likelihood_eval.py": {
        "sklearn": {},
        "torch": {
            "stack_132": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, 0).to(get_device(data))",
                            "Call"
                        ],
                        [
                            "res.reshape((n_traj_samples, n_traj, n_dims))",
                            "Call"
                        ],
                        [
                            "torch.mean(res, -1)",
                            "Call"
                        ],
                        [
                            "res.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "gaussian_log_likelihood(mu_flat, data_flat, obsrv_std)",
                            "Call"
                        ],
                        [
                            "res.reshape(n_traj_samples, n_traj).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, func)",
                            "Call"
                        ],
                        [
                            "mse(mu_flat, data_flat)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, mse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_133": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(0.0).to(get_device(mortality_label))",
                            "Call"
                        ],
                        [
                            "nn.BCEWithLogitsLoss()(label_predictions, mortality_label)",
                            "Call"
                        ],
                        [
                            "ce_loss / n_traj_samples",
                            "BinOp"
                        ],
                        [
                            "torch.stack(res, 0).to(get_device(label_predictions))",
                            "Call"
                        ],
                        [
                            "torch.mean(ce_loss)",
                            "Call"
                        ],
                        [
                            "nn.CrossEntropyLoss()(pred_masked, labels.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_158": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, 0).to(get_device(data))",
                            "Call"
                        ],
                        [
                            "res.reshape((n_traj_samples, n_traj, n_dims))",
                            "Call"
                        ],
                        [
                            "torch.mean(res, -1)",
                            "Call"
                        ],
                        [
                            "res.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "gaussian_log_likelihood(mu_flat, data_flat, obsrv_std)",
                            "Call"
                        ],
                        [
                            "res.reshape(n_traj_samples, n_traj).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, func)",
                            "Call"
                        ],
                        [
                            "mse(mu_flat, data_flat)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, mse)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_161": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(res, 0).to(get_device(data))",
                            "Call"
                        ],
                        [
                            "res.reshape((n_traj_samples, n_traj, n_dims))",
                            "Call"
                        ],
                        [
                            "torch.mean(res, -1)",
                            "Call"
                        ],
                        [
                            "res.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "gaussian_log_likelihood(mu_flat, data_flat, obsrv_std)",
                            "Call"
                        ],
                        [
                            "res.reshape(n_traj_samples, n_traj).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, func)",
                            "Call"
                        ],
                        [
                            "mse(mu_flat, data_flat)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(mu, data, mask, mse)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Independent_29": {
                "variable": {
                    "value": "gaussian",
                    "type": "variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "Normal(loc=mu_2d, scale=obsrv_std.repeat(n_data_points))",
                    "type": "Call",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_33": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_64": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "masked_select_121": {
                "variable": {
                    "value": "pred_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_predictions[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "pred_mask[i].bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_122": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_label[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "label_mask[i].bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_205": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_246": {
                "variable": {
                    "value": "poisson_log_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "poisson_log_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(info['log_lambda_y'], 2) - info['int_lambda']",
                            "BinOp"
                        ],
                        [
                            "torch.mean(poisson_log_l, -1)",
                            "Call"
                        ],
                        [
                            "compute_masked_likelihood(info['log_lambda_y'], truth_repeated, mask_repeated, f)",
                            "Call"
                        ],
                        [
                            "poisson_log_l.permute(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isnan_61": {
                "input": {
                    "value": "mortality_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mortality_label.reshape(-1)",
                            "Call"
                        ],
                        [
                            "mortality_label[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "mortality_label.repeat(n_traj_samples, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_72": {
                "input": {
                    "value": "label_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_predictions.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "label_predictions.reshape(n_traj_samples, -1)",
                            "Call"
                        ],
                        [
                            "label_predictions[:, idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "label_predictions.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "label_predictions.reshape(n_traj_samples * n_traj * n_tp, n_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_73": {
                "input": {
                    "value": "mortality_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mortality_label.reshape(-1)",
                            "Call"
                        ],
                        [
                            "mortality_label[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "mortality_label.repeat(n_traj_samples, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(mask, -1) > 0",
                            "Compare"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Normal_29": {
                "loc": {
                    "value": "mu_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "obsrv_std.repeat(n_data_points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "masked_log_lambdas",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "mortality_label == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "masked_select_149": {
                "variable": {
                    "value": "data_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data[i, k, :, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask[i, k, :, j].bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_153": {
                "variable": {
                    "value": "mu_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu[i, k, :, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask[i, k, :, j].bool()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_244": {
                "input": {
                    "value": "info['log_lambda_y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/parse_datasets.py": {
        "sklearn": {
            "train_test_split_123": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "total_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "train_test_split_165": {
                "variable": {
                    "value": "(train_data, test_data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Uniform_195": {
                "variable": {
                    "value": "distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.Tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.Tensor([max_t_extrap])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "time_steps_extrap",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.Tensor([0.0]), time_steps_extrap)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_227": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps_extrap, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_229": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps_extrap, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_30": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_55": {
                "variable": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "n_tp_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset[:].shape[1]",
                            "Subscript"
                        ],
                        [
                            "dataset.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: basic_collate_fn(batch, time_steps, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='train', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn(batch, args, device, data_type='test', data_min=data_min, data_max=data_max)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[train_data[i] for i in np.random.choice(len(train_data), len(train_data))]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(train_dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(min(len(dataset_obj), args.batch_size), args.n)",
                            "Call"
                        ],
                        [
                            "min(args.batch_size, args.n)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='train')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[test_data[i] for i in np.random.choice(len(test_data), len(test_data))]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ],
                        [
                            "len(total_dataset)",
                            "Call"
                        ],
                        [
                            "min(10000, args.n)",
                            "Call"
                        ],
                        [
                            "len(dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda batch: variable_time_collate_fn_activity(batch, args, device, data_type='test')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sliced",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sort_198": {
                "input": {
                    "value": "time_steps_extrap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distribution.sample(torch.Size([n_total_tp - 1]))[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((torch.Tensor([0.0]), time_steps_extrap))",
                            "Call"
                        ],
                        [
                            "torch.sort(time_steps_extrap)[0]",
                            "Subscript"
                        ],
                        [
                            "time_steps_extrap.to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils.py": {
        "sklearn": {
            "accuracy_score_608": {
                "variable": {
                    "value": "total[accuracy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "class_labels.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_class_id.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_589": {
                "variable": {
                    "value": "total[auc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_test_labels.cpu().numpy().reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "classif_predictions.cpu().numpy().reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_181": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Normal_189": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.Tensor([0.0]).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.Tensor([1.0]).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_255": {
                "variable": {
                    "value": "checkpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_615": {
                "variable": {
                    "value": "n_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask == 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_616": {
                "variable": {
                    "value": "n_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpt-%04d.pth' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_283": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(np.arange(5, n_tp_in_batch - n_points_to_cut - 5), replace=False)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_286": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_290": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res.reshape(start.size(0), n_points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_307": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "isnan_342": {
                "input": {
                    "value": "data_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(data - att_min) / att_max",
                            "BinOp"
                        ],
                        [
                            "(data - att_min) / att_max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_357": {
                "input": {
                    "value": "data_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(data - att_min) / att_max",
                            "BinOp"
                        ],
                        [
                            "(data - att_min) / att_max",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(first_datapoint, outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_437": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['observed_data']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_189": {},
            "sum_220": {
                "input": {
                    "value": "data_dict['observed_data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_233": {
                "input": {
                    "value": "data_dict['data_to_predict']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(res, torch.linspace(start[i], end[i], n_points))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_300": {
                "in_features": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_306": {
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_331": {
                "input": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.reshape(-1, data.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_332": {
                "input": {
                    "value": "reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.reshape(-1, data.size(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_546": {
                "variable": {
                    "value": "classif_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(classif_predictions, results['label_predictions'].reshape(n_traj_samples, -1, n_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_548": {
                "variable": {
                    "value": "all_test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_test_labels, batch_dict['labels'].reshape(-1, n_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_603": {
                "variable": {
                    "value": "(_, pred_class_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "classif_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((classif_predictions, results['label_predictions'].reshape(n_traj_samples, -1, n_labels)), 1)",
                            "Call"
                        ],
                        [
                            "classif_predictions[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "classif_predictions[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_604": {
                "variable": {
                    "value": "(_, class_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_622": {
                "input": {
                    "value": "data[mask == 0.0] != 0.0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Linear_303": {
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_576": {
                "input": {
                    "value": "all_test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_584": {
                "input": {
                    "value": "all_test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_597": {
                "input": {
                    "value": "all_test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.cat((all_test_labels, batch_dict['labels'].reshape(-1, n_labels)), 0)",
                            "Call"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[idx_not_nan]",
                            "Subscript"
                        ],
                        [
                            "all_test_labels.repeat(n_traj_samples, 1, 1)",
                            "Call"
                        ],
                        [
                            "all_test_labels[labeled_tp]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_289": {
                "start": {
                    "value": "start[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "end[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_586": {
                "input": {
                    "value": "all_test_labels == 1.0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "run_models.py": {
        "sklearn": {},
        "torch": {
            "device_94": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adamax_249": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_326": {
                "obj": {
                    "value": "{'args': args, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, 'experiment_' + str(experimentID) + '.ckpt')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_149": {},
            "save_308": {
                "obj": {
                    "value": "{'args': args, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, 'experiment_' + str(experimentID) + '.ckpt')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate_timeseries.py": {
        "torch": {
            "Tensor_80": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_135": {
                "variable": {
                    "value": "traj_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_62": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_90": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/base_models.py": {
        "torch": {
            "Sequential_25": {
                "*args": {
                    "value": "nn.Linear(z0_dim, 300)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_47": {
                "variable": {
                    "value": "self.obsrv_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_82": {
                "variable": {
                    "value": "log_density",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_density_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_gaussian_log_density(pred_y, truth, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth, mask=mask)",
                            "Call"
                        ],
                        [
                            "masked_gaussian_log_density(pred_y, truth_repeated, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth_repeated, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_121": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_141": {
                "variable": {
                    "value": "pois_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_162": {
                "variable": {
                    "value": "results[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.mean(likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "variable"
                        ],
                        [
                            "-torch.logsumexp(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "variable"
                        ]
                    ]
                }
            },
            "mean_163": {
                "variable": {
                    "value": "results[likelihood]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_gaussian_likelihood(batch_dict['data_to_predict'], pred_x, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_164": {
                "variable": {
                    "value": "results[mse]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_mse(batch_dict['data_to_predict'], pred_x, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "self.get_mse(batch_dict['data_to_predict'], pred_y, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_165": {
                "variable": {
                    "value": "results[pois_likelihood]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pois_log_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_x, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_y, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_166": {
                "variable": {
                    "value": "results[ce_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_195": {
                "variable": {
                    "value": "self.obsrv_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_230": {
                "variable": {
                    "value": "log_density",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_density_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_gaussian_log_density(pred_y, truth, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth, mask=mask)",
                            "Call"
                        ],
                        [
                            "masked_gaussian_log_density(pred_y, truth_repeated, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth_repeated, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Normal_264": {
                "variable": {
                    "value": "fp_distr",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "fp_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "fp_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fp_std.abs()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_279": {
                "variable": {
                    "value": "kldiv_z0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kldiv_z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kl_divergence(fp_distr, self.z0_prior)",
                            "Call"
                        ],
                        [
                            "torch.mean(kldiv_z0, (1, 2))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_290": {
                "variable": {
                    "value": "pois_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_301": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_329": {
                "variable": {
                    "value": "results[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.mean(likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "variable"
                        ],
                        [
                            "-torch.logsumexp(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "variable"
                        ]
                    ]
                }
            },
            "mean_330": {
                "variable": {
                    "value": "results[likelihood]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "rec_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_gaussian_likelihood(batch_dict['data_to_predict'], pred_y, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_331": {
                "variable": {
                    "value": "results[mse]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_mse(batch_dict['data_to_predict'], pred_x, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "self.get_mse(batch_dict['data_to_predict'], pred_y, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_332": {
                "variable": {
                    "value": "results[pois_likelihood]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pois_log_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_x, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_y, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_333": {
                "variable": {
                    "value": "results[ce_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_334": {
                "variable": {
                    "value": "results[kl_first_p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "kldiv_z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kl_divergence(fp_distr, self.z0_prior)",
                            "Call"
                        ],
                        [
                            "torch.mean(kldiv_z0, (1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_335": {
                "variable": {
                    "value": "results[std_first_p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "fp_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fp_std.abs()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "z0_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "variable"
                        ],
                        [
                            "z0_dim + latent_dim",
                            "BinOp"
                        ],
                        [
                            "latent_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_97": {
                "input": {
                    "value": "log_density_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_gaussian_log_density(pred_y, truth, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth, mask=mask)",
                            "Call"
                        ],
                        [
                            "masked_gaussian_log_density(pred_y, truth_repeated, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth_repeated, mask=mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_147": {
                "variable": {
                    "value": "pois_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pois_log_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_x, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_y, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_250": {
                "input": {
                    "value": "log_density_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_gaussian_log_density(pred_y, truth, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth, mask=mask)",
                            "Call"
                        ],
                        [
                            "masked_gaussian_log_density(pred_y, truth_repeated, obsrv_std=self.obsrv_std, mask=mask)",
                            "Call"
                        ],
                        [
                            "log_density_data.permute(1, 0)",
                            "Call"
                        ],
                        [
                            "compute_mse(pred_y, truth_repeated, mask=mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_270": {
                "input": {
                    "value": "kldiv_z0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kl_divergence(fp_distr, self.z0_prior)",
                            "Call"
                        ],
                        [
                            "torch.mean(kldiv_z0, (1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_296": {
                "variable": {
                    "value": "pois_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pois_log_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_x, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(get_device(batch_dict['data_to_predict']))",
                            "Call"
                        ],
                        [
                            "compute_poisson_proc_likelihood(batch_dict['data_to_predict'], pred_y, info, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.mean(pois_log_likelihood, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_316": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.mean(likelihood)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "variable"
                        ],
                        [
                            "-torch.logsumexp(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.mean(rec_likelihood - kl_coef * kldiv_z0, 0)",
                            "UnaryOp"
                        ],
                        [
                            "loss - 0.1 * pois_log_likelihood",
                            "BinOp"
                        ],
                        [
                            "loss + ce_loss * 100",
                            "BinOp"
                        ],
                        [
                            "ce_loss",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z0_dim, n_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_134": {
                "input": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([0.0]).to(device)",
                            "Call"
                        ],
                        [
                            "compute_binary_CE_loss(info['label_predictions'], batch_dict['labels'])",
                            "Call"
                        ],
                        [
                            "compute_multiclass_CE_loss(info['label_predictions'], batch_dict['labels'], mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_149": {
                "input": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_gaussian_likelihood(batch_dict['data_to_predict'], pred_x, mask=batch_dict['mask_predicted_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z0_dim, n_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_266": {
                "input": {
                    "value": "fp_std < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logsumexp_315": {
                "input": {
                    "value": "rec_likelihood - kl_coef * kldiv_z0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_317": {
                "input": {
                    "value": "rec_likelihood - kl_coef * kldiv_z0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "z0_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "variable"
                        ],
                        [
                            "z0_dim + latent_dim",
                            "BinOp"
                        ],
                        [
                            "latent_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_211": {
                "in_features": {
                    "value": "z0_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_dim",
                            "variable"
                        ],
                        [
                            "z0_dim + latent_dim",
                            "BinOp"
                        ],
                        [
                            "latent_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/create_latent_ode_model.py": {
        "torch": {}
    },
    "lib/diffeq_solver.py": {
        "torch": {
            "device_22": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_44": {
                "input": {
                    "value": "pred_y[:, :, 0, :] - first_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/encoder_decoder.py": {
        "torch": {
            "cat_59": {
                "variable": {
                    "value": "y_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_mean, y_std, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_mean * reset_gate, y_std * reset_gate, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.hiddens_to_z0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.gru_rnn_output_size, 50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_122": {
                "variable": {
                    "value": "self.gru_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_200": {
                "variable": {
                    "value": "self.transform_z0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim * 2, 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "variable": {
                    "value": "prev_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, n_traj, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_253": {
                "variable": {
                    "value": "prev_std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, n_traj, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_312": {
                "variable": {
                    "value": "latent_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "latent_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(latent_ys, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_326": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim, input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_25": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.update_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim * 2 + input_dim, n_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.reset_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim * 2 + input_dim, n_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.new_state_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim * 2 + input_dim, n_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_101": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "delta_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_t, torch.zeros(1).to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_t, data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_178": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_215": {
                "variable": {
                    "value": "prev_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, n_traj, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "variable": {
                    "value": "prev_std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, n_traj, self.latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_71": {
                "input": {
                    "value": "new_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - update_gate) * new_state + update_gate * y_mean",
                            "BinOp"
                        ],
                        [
                            "mask * new_y + (1 - mask) * y_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_87": {
                "input": {
                    "value": "new_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - update_gate) * new_state + update_gate * y_mean",
                            "BinOp"
                        ],
                        [
                            "mask * new_y + (1 - mask) * y_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "self.gru_rnn_output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_132": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "utils.reverse(data)",
                            "Call"
                        ],
                        [
                            "torch.cat((delta_t, data), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_133": {
                "input": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "any_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_161": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "any_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_162": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std.abs()",
                            "Call"
                        ]
                    ]
                }
            },
            "any_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_201": {
                "in_features": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_203": {
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z0_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_210": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "utils.reverse(data)",
                            "Call"
                        ],
                        [
                            "torch.cat((delta_t, data), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_211": {
                "input": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "any_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_262": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "utils.reverse(data)",
                            "Call"
                        ],
                        [
                            "torch.cat((delta_t, data), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_263": {
                "input": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "any_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_273": {
                "variable": {
                    "value": "time_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_t, t_i)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_279": {
                "variable": {
                    "value": "ode_sol",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_y, ode_sol)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_314": {
                "input": {
                    "value": "yi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "any_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_315": {
                "input": {
                    "value": "yi_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "any_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_327": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "latent_dim * 2 + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "latent_dim * 2 + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "latent_dim * 2 + input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_82": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, n_data_dims:]",
                            "Subscript"
                        ],
                        [
                            "(torch.sum(mask, -1, keepdim=True) > 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "any_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_231": {
                "tensors": {
                    "value": "(means_z0, std_z0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_290": {
                "input": {
                    "value": "ode_sol[:, :, 0, :] - prev_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_276": {
                "input": {
                    "value": "inc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z0_diffeq_solver.ode_func(prev_t, prev_y) * (t_i - prev_t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_281": {
                "input": {
                    "value": "ode_sol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z0_diffeq_solver(prev_y, time_points)",
                            "Call"
                        ],
                        [
                            "prev_y + inc",
                            "BinOp"
                        ],
                        [
                            "torch.stack((prev_y, ode_sol), 2).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_288": {
                "input": {
                    "value": "ode_sol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z0_diffeq_solver(prev_y, time_points)",
                            "Call"
                        ],
                        [
                            "prev_y + inc",
                            "BinOp"
                        ],
                        [
                            "torch.stack((prev_y, ode_sol), 2).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_292": {
                "input": {
                    "value": "ode_sol[:, :, 0, :] - prev_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, n_data_dims:]",
                            "Subscript"
                        ],
                        [
                            "(torch.sum(mask, -1, keepdim=True) > 0).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/ode_func.py": {
        "torch": {
            "Tensor_74": {
                "variable": {
                    "value": "self.const_for_lambda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_16": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_56": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_112": {
                "tensors": {
                    "value": "(dydt_dldt, torch.exp(log_lam))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_111": {
                "input": {
                    "value": "self.const_for_lambda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_112": {
                "input": {
                    "value": "log_lam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_lam - torch.log(self.const_for_lambda)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/ode_rnn.py": {
        "torch": {
            "Sequential_48": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim, n_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_26": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "data_and_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data, mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "time_steps_to_predict - truth_time_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/plotting.py": {
        "torch": {
            "from_numpy_105": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack([x, y], -1).reshape(K * K, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.expand_dims(xx.flatten(), 1), np.expand_dims(yy.flatten(), 1)), 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(flat_inputs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_108": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(zs, torch.zeros(K * K, latent_dim - 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_243": {
                "variable": {
                    "value": "prior_density_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_density_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.z0_prior.log_prob(z0_grid.unsqueeze(0)).squeeze(0)",
                            "Call"
                        ],
                        [
                            "torch.sum(prior_density_grid, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_271": {
                "variable": {
                    "value": "density_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_joint_density",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_density_grid + masked_gaussian_log_density_grid",
                            "BinOp"
                        ],
                        [
                            "log_joint_density + poisson_log_density_grid",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "density_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "density_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_joint_density)",
                            "Call"
                        ],
                        [
                            "torch.reshape(density_grid, (xx.shape[0], xx.shape[1]))",
                            "Call"
                        ],
                        [
                            "density_grid.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.exp(q_density_grid)",
                            "Call"
                        ],
                        [
                            "torch.reshape(density_grid, (xx.shape[0], xx.shape[1]))",
                            "Call"
                        ],
                        [
                            "density_grid.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(xx.shape[0], xx.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Normal_294": {
                "variable": {
                    "value": "q_z0",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z0_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z0_mu[:, :, :model.latent_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "z0_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z0_std[:, :, :model.latent_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_298": {
                "variable": {
                    "value": "q_density_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_density_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_z0.log_prob(z0_grid)",
                            "Call"
                        ],
                        [
                            "torch.sum(q_density_grid, -1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_299": {
                "variable": {
                    "value": "density_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_density_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_z0.log_prob(z0_grid)",
                            "Call"
                        ],
                        [
                            "torch.sum(q_density_grid, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_301": {
                "variable": {
                    "value": "density_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "density_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_joint_density)",
                            "Call"
                        ],
                        [
                            "torch.reshape(density_grid, (xx.shape[0], xx.shape[1]))",
                            "Call"
                        ],
                        [
                            "density_grid.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.exp(q_density_grid)",
                            "Call"
                        ],
                        [
                            "torch.reshape(density_grid, (xx.shape[0], xx.shape[1]))",
                            "Call"
                        ],
                        [
                            "density_grid.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(xx.shape[0], xx.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "z0_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z0_grid, torch.zeros(z0_grid.size(0), model.latent_dim - 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_215": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_traj, model.input_dim + model.latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "z0_grid_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z0_grid, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "data_w_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data_w_mask, observed_mask[traj_id].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_390": {
                "seed": {
                    "value": "1991",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "K * K",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_226": {
                "input": {
                    "value": "int_lambda[:, :, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_227": {
                "input": {
                    "value": "int_lambda[0, 0, -1, :] <= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "*size": {
                    "value": "z0_grid.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "model.latent_dim - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/rnn_baselines.py": {
        "torch": {
            "zeros_121": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_traj, n_tp, n_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_122": {
                "variable": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.min(torch.max(zeros, w_input_decay * cum_delta_ts + b_input_decay), zeros + 1000)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "data_means",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[:, :-self.input_size_for_decay]",
                            "Subscript"
                        ],
                        [
                            "utils.reverse(data)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_125": {
                "variable": {
                    "value": "data_means",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_198": {
                "variable": {
                    "value": "all_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_hiddens, 0)",
                            "Call"
                        ],
                        [
                            "all_hiddens.permute(1, 0, 2).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size_for_decay, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_47": {
                "variable": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.min(torch.max(torch.zeros([1]).to(self.device), self.decay(cum_delta_ts)), torch.ones([1]).to(self.device) * 1000)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_58": {
                "variable": {
                    "value": "resetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_r + h_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "variable": {
                    "value": "inputgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_i + h_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_60": {
                "variable": {
                    "value": "newgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_n + resetgate * h_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_145": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(inputs.size(0), n_steps, inputs.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim, n_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "delta_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_ts, zero_delta_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_355": {
                "variable": {
                    "value": "self.z0_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(rec_dims, n_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_361": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(latent_dim, n_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "delta_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(delta_ts, zero_delta_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_415": {
                "variable": {
                    "value": "delta_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(zero_delta_t, time_steps_to_predict[1:] - time_steps_to_predict[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_input, mask_i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "input_w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_input, cum_delta_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_183": {
                "variable": {
                    "value": "input_w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "input_w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rnn_input, delta_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_185": {
                "variable": {
                    "value": "input_w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_239": {
                "variable": {
                    "value": "self.rnn_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "encoder_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_250": {
                "variable": {
                    "value": "self.w_input_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, int(input_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_251": {
                "variable": {
                    "value": "self.b_input_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, int(input_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRUCell_339": {
                "variable": {
                    "value": "self.rnn_cell_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "encoder_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "rec_dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRUCell_340": {
                "variable": {
                    "value": "self.rnn_cell_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "encoder_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_370": {
                "variable": {
                    "value": "self.w_input_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, int(input_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_371": {
                "variable": {
                    "value": "self.b_input_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, int(input_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "input_size_for_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_53": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[:, :-self.input_size_for_decay]",
                            "Subscript"
                        ],
                        [
                            "utils.reverse(data)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_ih.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_54": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "first_hidden",
                            "variable"
                        ],
                        [
                            "cell(input_w_t, hidden)",
                            "Call"
                        ],
                        [
                            "summed_mask * hidden + (1 - summed_mask) * prev_hidden",
                            "BinOp"
                        ],
                        [
                            "hidden * decay",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_hh.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_122": {
                "input": {
                    "value": "torch.max(zeros, w_input_decay * cum_delta_ts + b_input_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_231": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_233": {
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_356": {
                "in_features": {
                    "value": "rec_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_358": {
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_362": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_364": {
                "in_features": {
                    "value": "n_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_47": {
                "input": {
                    "value": "torch.max(torch.zeros([1]).to(self.device), self.decay(cum_delta_ts))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_122": {
                "input": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([n_traj, n_tp, n_dims]).to(get_device(data))",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_193": {
                "input": {
                    "value": "summed_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.sum(mask_i, -1, keepdim=True) > 0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "any_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_263": {
                "input": {
                    "value": "time_steps_to_predict - truth_time_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_47": {
                "input": {
                    "value": "torch.zeros([1]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_192": {
                "input": {
                    "value": "mask_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[:, i, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_251": {},
            "Tensor_370": {},
            "Tensor_371": {}
        }
    },
    "mujoco_physics.py": {
        "torch": {
            "Tensor_35": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_22": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._generate_random_trajectories(self.n_training_samples)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.data_folder, self.training_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_35": {
                "f": {
                    "value": "data_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.data_folder, self.training_file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "person_activity.py": {
        "torch": {
            "unique_257": {
                "variable": {
                    "value": "(combined_tt, inverse_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([ex[1] for ex in batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "combined_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), len(combined_tt), D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "combined_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), len(combined_tt), D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "variable": {
                    "value": "combined_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), len(combined_tt), N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_297": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PersonActivity('data/PersonActivity', download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "variable_time_collate_fn_activity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_90": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_241": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_294": {
                "seed": {
                    "value": "1991",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_66": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_79": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, self.data_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_81": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, self.data_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tt.to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[torch.zeros(1).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.tensor(tt).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_98": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vals.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.tag_ids), 3).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(vals)",
                            "Call"
                        ],
                        [
                            "vals.reshape(vals.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_99": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.tag_ids), 3).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(mask)",
                            "Call"
                        ],
                        [
                            "mask.reshape(mask.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_100": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.label_names)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_257": {
                "tensors": {
                    "value": "[ex[1] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_280": {
                "input": {
                    "value": "combined_tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "combined_tt.to(device)",
                            "Call"
                        ],
                        [
                            "combined_tt.float()",
                            "Call"
                        ],
                        [
                            "combined_tt / torch.max(combined_tt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_78": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "records",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, 'data.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_281": {
                "input": {
                    "value": "combined_tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "combined_tt.to(device)",
                            "Call"
                        ],
                        [
                            "combined_tt.float()",
                            "Call"
                        ],
                        [
                            "combined_tt / torch.max(combined_tt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_142": {
                "variable": {
                    "value": "value_vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "*size": {
                    "value": "len(self.label_names)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "*size": {
                    "value": "len(self.tag_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "len(self.label_names)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "labels[-1][self.label_dict[label]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "physionet.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "unique_310": {
                "variable": {
                    "value": "(combined_tt, inverse_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([ex[1] for ex in batch])",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_314": {
                "variable": {
                    "value": "combined_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), len(combined_tt), D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "combined_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(batch), len(combined_tt), D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_358": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PhysioNet('data/physionet', train=False, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "variable_time_collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "batch_min",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_47": {
                "variable": {
                    "value": "batch_max",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_115": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_295": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_355": {
                "seed": {
                    "value": "1991",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_53": {
                "variable": {
                    "value": "data_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_min",
                            "variable"
                        ],
                        [
                            "torch.min(data_min, batch_min)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_54": {
                "variable": {
                    "value": "data_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_max",
                            "variable"
                        ],
                        [
                            "torch.max(data_max, batch_max)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_81": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, data_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, self.label_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_103": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, data_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, self.label_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "[ex[1] for ex in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_320": {
                "*size": {
                    "value": "len(batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "N_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_320": {
                "data": {
                    "value": "float('nan')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_342": {
                "input": {
                    "value": "combined_tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "combined_tt.to(device)",
                            "Call"
                        ],
                        [
                            "combined_tt / torch.max(combined_tt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_99": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_189": {
                "variable": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tt.to(device)",
                            "Call"
                        ],
                        [
                            "[0.0]",
                            "List"
                        ],
                        [
                            "torch.tensor(tt).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_190": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vals.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.params)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_191": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.params)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, non_zero_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_202": {
                "obj": {
                    "value": "patients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, filename.split('.')[0] + '_' + str(self.quantization) + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_343": {
                "input": {
                    "value": "combined_tt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "combined_tt.to(device)",
                            "Call"
                        ],
                        [
                            "combined_tt / torch.max(combined_tt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_132": {
                "variable": {
                    "value": "outcomes[record_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.to(device)",
                            "Call"
                        ],
                        [
                            "['SAPS-I', 'SOFA', 'Length_of_stay', 'Survival', 'In-hospital_death']",
                            "List"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "outcomes[record_id]",
                            "Subscript"
                        ],
                        [
                            "labels[4]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.processed_folder, filename.split('.')[0] + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_43": {
                "input": {
                    "value": "non_missing_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vals[:, i][mask[:, i] == 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_44": {
                "input": {
                    "value": "non_missing_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vals[:, i][mask[:, i] == 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_263": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.to(device)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(len(self.params)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.stack(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, non_zero_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "len(self.params)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}